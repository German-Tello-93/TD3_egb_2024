
td3_ega_2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e84  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002d8  08009f98  08009f98  00019f98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a270  0800a270  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a270  0800a270  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a270  0800a270  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a274  0800a274  0001a274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0800a278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000090  0800a304  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800a304  00020520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b9d  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003659  00000000  00000000  00038c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  0003c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001368  00000000  00000000  0003d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b0a2  00000000  00000000  0003eae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c71  00000000  00000000  00059b82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000962f7  00000000  00000000  000717f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00107aea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e54  00000000  00000000  00107b40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08009f7c 	.word	0x08009f7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08009f7c 	.word	0x08009f7c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2uiz>:
 8000a38:	004a      	lsls	r2, r1, #1
 8000a3a:	d211      	bcs.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d211      	bcs.n	8000a66 <__aeabi_d2uiz+0x2e>
 8000a42:	d50d      	bpl.n	8000a60 <__aeabi_d2uiz+0x28>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d40e      	bmi.n	8000a6c <__aeabi_d2uiz+0x34>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d102      	bne.n	8000a72 <__aeabi_d2uiz+0x3a>
 8000a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a70:	4770      	bx	lr
 8000a72:	f04f 0000 	mov.w	r0, #0
 8000a76:	4770      	bx	lr

08000a78 <GetPage>:
 * Some STM32F103C8 have 64 KB FLASH Memory, so I guess they have Page 0 to Page 63 only.
 */

/* FLASH_PAGE_SIZE should be able to get the size of the Page according to the controller */
static uint32_t GetPage(uint32_t Address)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  for (int indx=0; indx<128; indx++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	e016      	b.n	8000ab4 <GetPage+0x3c>
  {
	  if((Address < (0x08000000 + (FLASH_PAGE_SIZE *(indx+1))) ) && (Address >= (0x08000000 + FLASH_PAGE_SIZE*indx)))
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	029b      	lsls	r3, r3, #10
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	d20b      	bcs.n	8000aae <GetPage+0x36>
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000a9c:	029b      	lsls	r3, r3, #10
 8000a9e:	687a      	ldr	r2, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d304      	bcc.n	8000aae <GetPage+0x36>
	  {
		  return (0x08000000 + FLASH_PAGE_SIZE*indx);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8000aaa:	029b      	lsls	r3, r3, #10
 8000aac:	e006      	b.n	8000abc <GetPage+0x44>
  for (int indx=0; indx<128; indx++)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b7f      	cmp	r3, #127	; 0x7f
 8000ab8:	dde5      	ble.n	8000a86 <GetPage+0xe>
	  }
  }

  return 0;
 8000aba:	2300      	movs	r3, #0
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr
	...

08000ac8 <Flash_Write_Data>:
   float float_variable =  thing.a;
   return float_variable;
}

uint32_t Flash_Write_Data (uint32_t StartPageAddress, uint32_t *Data, uint16_t numberofwords)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08a      	sub	sp, #40	; 0x28
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	4613      	mov	r3, r2
 8000ad4:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t PAGEError;
	int sofar=0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24

	  /* Unlock the Flash to enable the flash control register access *************/
	   HAL_FLASH_Unlock();
 8000ada:	f003 f993 	bl	8003e04 <HAL_FLASH_Unlock>

	   /* Erase the user Flash area*/

	  uint32_t StartPage = GetPage(StartPageAddress);
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff ffca 	bl	8000a78 <GetPage>
 8000ae4:	6238      	str	r0, [r7, #32]
	  uint32_t EndPageAdress = StartPageAddress + numberofwords*4;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	461a      	mov	r2, r3
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	61fb      	str	r3, [r7, #28]
	  uint32_t EndPage = GetPage(EndPageAdress);
 8000af2:	69f8      	ldr	r0, [r7, #28]
 8000af4:	f7ff ffc0 	bl	8000a78 <GetPage>
 8000af8:	61b8      	str	r0, [r7, #24]

	   /* Fill EraseInit structure*/
	   EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
	   EraseInitStruct.PageAddress = StartPage;
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b02:	6a3b      	ldr	r3, [r7, #32]
 8000b04:	6093      	str	r3, [r2, #8]
	   EraseInitStruct.NbPages     = ((EndPage - StartPage)/FLASH_PAGE_SIZE) +1;
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	0a9b      	lsrs	r3, r3, #10
 8000b0e:	3301      	adds	r3, #1
 8000b10:	4a19      	ldr	r2, [pc, #100]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b12:	60d3      	str	r3, [r2, #12]

	   if (HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError) != HAL_OK)
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4817      	ldr	r0, [pc, #92]	; (8000b78 <Flash_Write_Data+0xb0>)
 8000b1c:	f003 fa64 	bl	8003fe8 <HAL_FLASHEx_Erase>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d01d      	beq.n	8000b62 <Flash_Write_Data+0x9a>
	   {
	     /*Error occurred while page erase.*/
		  return HAL_FLASH_GetError ();
 8000b26:	f003 f9a3 	bl	8003e70 <HAL_FLASH_GetError>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	e020      	b.n	8000b70 <Flash_Write_Data+0xa8>

	   /* Program the user Flash area word by word*/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartPageAddress, Data[sofar]) == HAL_OK)
 8000b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	68ba      	ldr	r2, [r7, #8]
 8000b34:	4413      	add	r3, r2
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	68f9      	ldr	r1, [r7, #12]
 8000b40:	2002      	movs	r0, #2
 8000b42:	f003 f8ef 	bl	8003d24 <HAL_FLASH_Program>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d106      	bne.n	8000b5a <Flash_Write_Data+0x92>
	     {
	    	 StartPageAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 8000b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b54:	3301      	adds	r3, #1
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
 8000b58:	e003      	b.n	8000b62 <Flash_Write_Data+0x9a>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8000b5a:	f003 f989 	bl	8003e70 <HAL_FLASH_GetError>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	e006      	b.n	8000b70 <Flash_Write_Data+0xa8>
	   while (sofar<numberofwords)
 8000b62:	88fb      	ldrh	r3, [r7, #6]
 8000b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b66:	429a      	cmp	r2, r3
 8000b68:	dbe1      	blt.n	8000b2e <Flash_Write_Data+0x66>
	     }
	   }

	   /* Lock the Flash to disable the flash control register access (recommended
	      to protect the FLASH memory against possible unwanted operation) *********/
	   HAL_FLASH_Lock();
 8000b6a:	f003 f971 	bl	8003e50 <HAL_FLASH_Lock>

	   return 0;
 8000b6e:	2300      	movs	r3, #0
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3728      	adds	r7, #40	; 0x28
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200000ac 	.word	0x200000ac

08000b7c <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartPageAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	601a      	str	r2, [r3, #0]
		StartPageAddress += 4;
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	3304      	adds	r3, #4
 8000b96:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	3304      	adds	r3, #4
 8000b9c:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 8000b9e:	88fb      	ldrh	r3, [r7, #6]
 8000ba0:	1e5a      	subs	r2, r3, #1
 8000ba2:	80fa      	strh	r2, [r7, #6]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d000      	beq.n	8000baa <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartPageAddress;
 8000ba8:	e7ef      	b.n	8000b8a <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 8000baa:	bf00      	nop
	}
}
 8000bac:	bf00      	nop
 8000bae:	3714      	adds	r7, #20
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bc80      	pop	{r7}
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000bc2:	4a38      	ldr	r2, [pc, #224]	; (8000ca4 <HD44780_Init+0xec>)
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000bc8:	4b37      	ldr	r3, [pc, #220]	; (8000ca8 <HD44780_Init+0xf0>)
 8000bca:	2208      	movs	r2, #8
 8000bcc:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <HD44780_Init+0xf4>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000bd4:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <HD44780_Init+0xec>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d907      	bls.n	8000bec <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000bdc:	4b33      	ldr	r3, [pc, #204]	; (8000cac <HD44780_Init+0xf4>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	f043 0308 	orr.w	r3, r3, #8
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <HD44780_Init+0xf4>)
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e006      	b.n	8000bfa <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HD44780_Init+0xf4>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HD44780_Init+0xf4>)
 8000bf8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000bfa:	f000 f985 	bl	8000f08 <DelayInit>
  HAL_Delay(50);
 8000bfe:	2032      	movs	r0, #50	; 0x32
 8000c00:	f002 ff8c 	bl	8003b1c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000c04:	4b28      	ldr	r3, [pc, #160]	; (8000ca8 <HD44780_Init+0xf0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f000 f943 	bl	8000e94 <ExpanderWrite>
  HAL_Delay(1000);
 8000c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c12:	f002 ff83 	bl	8003b1c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000c16:	2030      	movs	r0, #48	; 0x30
 8000c18:	f000 f92b 	bl	8000e72 <Write4Bits>
  DelayUS(4500);
 8000c1c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c20:	f000 f99a 	bl	8000f58 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c24:	2030      	movs	r0, #48	; 0x30
 8000c26:	f000 f924 	bl	8000e72 <Write4Bits>
  DelayUS(4500);
 8000c2a:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c2e:	f000 f993 	bl	8000f58 <DelayUS>

  Write4Bits(0x03 << 4);
 8000c32:	2030      	movs	r0, #48	; 0x30
 8000c34:	f000 f91d 	bl	8000e72 <Write4Bits>
  DelayUS(4500);
 8000c38:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c3c:	f000 f98c 	bl	8000f58 <DelayUS>

  Write4Bits(0x02 << 4);
 8000c40:	2020      	movs	r0, #32
 8000c42:	f000 f916 	bl	8000e72 <Write4Bits>
  DelayUS(100);
 8000c46:	2064      	movs	r0, #100	; 0x64
 8000c48:	f000 f986 	bl	8000f58 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HD44780_Init+0xf4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f043 0320 	orr.w	r3, r3, #32
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f8ce 	bl	8000df8 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HD44780_Init+0xf8>)
 8000c5e:	2204      	movs	r2, #4
 8000c60:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8000c62:	f000 f875 	bl	8000d50 <HD44780_Display>
  HD44780_Clear();
 8000c66:	f000 f82b 	bl	8000cc0 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HD44780_Init+0xfc>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000c70:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <HD44780_Init+0xfc>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f043 0304 	orr.w	r3, r3, #4
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f000 f8bc 	bl	8000df8 <SendCommand>
  DelayUS(4500);
 8000c80:	f241 1094 	movw	r0, #4500	; 0x1194
 8000c84:	f000 f968 	bl	8000f58 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8000c88:	490b      	ldr	r1, [pc, #44]	; (8000cb8 <HD44780_Init+0x100>)
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f000 f876 	bl	8000d7c <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8000c90:	490a      	ldr	r1, [pc, #40]	; (8000cbc <HD44780_Init+0x104>)
 8000c92:	2001      	movs	r0, #1
 8000c94:	f000 f872 	bl	8000d7c <HD44780_CreateSpecialChar>

  HD44780_Home();
 8000c98:	f000 f81d 	bl	8000cd6 <HD44780_Home>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000023e 	.word	0x2000023e
 8000ca8:	20000240 	.word	0x20000240
 8000cac:	2000023c 	.word	0x2000023c
 8000cb0:	2000023f 	.word	0x2000023f
 8000cb4:	2000023d 	.word	0x2000023d
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000008 	.word	0x20000008

08000cc0 <HD44780_Clear>:

void HD44780_Clear()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f000 f897 	bl	8000df8 <SendCommand>
  DelayUS(2000);
 8000cca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cce:	f000 f943 	bl	8000f58 <DelayUS>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HD44780_Home>:

void HD44780_Home()
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000cda:	2002      	movs	r0, #2
 8000cdc:	f000 f88c 	bl	8000df8 <SendCommand>
  DelayUS(2000);
 8000ce0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ce4:	f000 f938 	bl	8000f58 <DelayUS>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	460a      	mov	r2, r1
 8000cf6:	71fb      	strb	r3, [r7, #7]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000cfc:	4b12      	ldr	r3, [pc, #72]	; (8000d48 <HD44780_SetCursor+0x5c>)
 8000cfe:	f107 0408 	add.w	r4, r7, #8
 8000d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000d08:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HD44780_SetCursor+0x60>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	79ba      	ldrb	r2, [r7, #6]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d303      	bcc.n	8000d1a <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HD44780_SetCursor+0x60>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	f107 0218 	add.w	r2, r7, #24
 8000d22:	4413      	add	r3, r2
 8000d24:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	b25b      	sxtb	r3, r3
 8000d32:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d36:	b25b      	sxtb	r3, r3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f000 f85c 	bl	8000df8 <SendCommand>
}
 8000d40:	bf00      	nop
 8000d42:	371c      	adds	r7, #28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd90      	pop	{r4, r7, pc}
 8000d48:	08009f98 	.word	0x08009f98
 8000d4c:	2000023e 	.word	0x2000023e

08000d50 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HD44780_Display+0x28>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	b2da      	uxtb	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HD44780_Display+0x28>)
 8000d60:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HD44780_Display+0x28>)
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f043 0308 	orr.w	r3, r3, #8
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f843 	bl	8000df8 <SendCommand>
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000023f 	.word	0x2000023f

08000d7c <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f000 f82a 	bl	8000df8 <SendCommand>
  for (int i=0; i<8; i++)
 8000da4:	2300      	movs	r3, #0
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	e009      	b.n	8000dbe <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	683a      	ldr	r2, [r7, #0]
 8000dae:	4413      	add	r3, r2
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 f82e 	bl	8000e14 <SendChar>
  for (int i=0; i<8; i++)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	ddf2      	ble.n	8000daa <HD44780_CreateSpecialChar+0x2e>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000dd6:	e006      	b.n	8000de6 <HD44780_PrintStr+0x18>
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	1c5a      	adds	r2, r3, #1
 8000ddc:	607a      	str	r2, [r7, #4]
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f817 	bl	8000e14 <SendChar>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1f4      	bne.n	8000dd8 <HD44780_PrintStr+0xa>
}
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f000 f812 	bl	8000e30 <Send>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	2101      	movs	r1, #1
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 f804 	bl	8000e30 <Send>
}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	460a      	mov	r2, r1
 8000e3a:	71fb      	strb	r3, [r7, #7]
 8000e3c:	4613      	mov	r3, r2
 8000e3e:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	f023 030f 	bic.w	r3, r3, #15
 8000e46:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	011b      	lsls	r3, r3, #4
 8000e4c:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 8000e4e:	7bfa      	ldrb	r2, [r7, #15]
 8000e50:	79bb      	ldrb	r3, [r7, #6]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	f000 f80b 	bl	8000e72 <Write4Bits>
  Write4Bits((lownib)|mode);
 8000e5c:	7bba      	ldrb	r2, [r7, #14]
 8000e5e:	79bb      	ldrb	r3, [r7, #6]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f804 	bl	8000e72 <Write4Bits>
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	4603      	mov	r3, r0
 8000e7a:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f808 	bl	8000e94 <ExpanderWrite>
  PulseEnable(value);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 f820 	bl	8000ecc <PulseEnable>
}
 8000e8c:	bf00      	nop
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b086      	sub	sp, #24
 8000e98:	af02      	add	r7, sp, #8
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <ExpanderWrite+0x30>)
 8000ea0:	781a      	ldrb	r2, [r3, #0]
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8000eaa:	f107 020f 	add.w	r2, r7, #15
 8000eae:	230a      	movs	r3, #10
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	214e      	movs	r1, #78	; 0x4e
 8000eb6:	4804      	ldr	r0, [pc, #16]	; (8000ec8 <ExpanderWrite+0x34>)
 8000eb8:	f003 fc4e 	bl	8004758 <HAL_I2C_Master_Transmit>
}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000240 	.word	0x20000240
 8000ec8:	20000250 	.word	0x20000250

08000ecc <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff ffd8 	bl	8000e94 <ExpanderWrite>
  DelayUS(20);
 8000ee4:	2014      	movs	r0, #20
 8000ee6:	f000 f837 	bl	8000f58 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ffce 	bl	8000e94 <ExpanderWrite>
  DelayUS(20);
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f000 f82d 	bl	8000f58 <DelayUS>
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <DelayInit>:

static void DelayInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <DelayInit+0x48>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	4a0f      	ldr	r2, [pc, #60]	; (8000f50 <DelayInit+0x48>)
 8000f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f16:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8000f18:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <DelayInit+0x48>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	4a0c      	ldr	r2, [pc, #48]	; (8000f50 <DelayInit+0x48>)
 8000f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f22:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <DelayInit+0x4c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <DelayInit+0x4c>)
 8000f2a:	f023 0301 	bic.w	r3, r3, #1
 8000f2e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <DelayInit+0x4c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <DelayInit+0x4c>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <DelayInit+0x4c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8000f42:	bf00      	nop
  __ASM volatile ("NOP");
 8000f44:	bf00      	nop
  __ASM volatile ("NOP");
 8000f46:	bf00      	nop
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bc80      	pop	{r7}
 8000f4e:	4770      	bx	lr
 8000f50:	e000edf0 	.word	0xe000edf0
 8000f54:	e0001000 	.word	0xe0001000

08000f58 <DelayUS>:

static void DelayUS(uint32_t us) {
 8000f58:	b480      	push	{r7}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8000f60:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <DelayUS+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <DelayUS+0x44>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	0c9a      	lsrs	r2, r3, #18
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	fb02 f303 	mul.w	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <DelayUS+0x48>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	; (8000fa0 <DelayUS+0x48>)
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d8f6      	bhi.n	8000f7a <DelayUS+0x22>
}
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	20000010 	.word	0x20000010
 8000f9c:	431bde83 	.word	0x431bde83
 8000fa0:	e0001000 	.word	0xe0001000

08000fa4 <MEN_BuildMenu>:
	privilege_t privilege;
	uint32_t state;
}level_t;

void MEN_BuildMenu(level_t *currentNode,uint32_t userNo, char row1[16], char row2[16], void (*func_Cancelar)(void), void (*func_Aceptar)(void) ,level_t *prevNode, level_t *nextNode,level_t *maestraNode, level_t *cancelarNode, level_t *aceptarNode, level_t *menuNode, level_t *lastNode)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
	currentNode->userNo = userNo;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	68ba      	ldr	r2, [r7, #8]
 8000fb6:	601a      	str	r2, [r3, #0]
    strcpy(currentNode->row1, row1);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f007 fced 	bl	800899e <strcpy>
    strcpy(currentNode->row2, row2);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	3314      	adds	r3, #20
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f007 fce7 	bl	800899e <strcpy>
    currentNode->prev = prevNode;
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	6a3a      	ldr	r2, [r7, #32]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
    currentNode->next = nextNode;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fda:	625a      	str	r2, [r3, #36]	; 0x24
    currentNode->maestra = maestraNode;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fe0:	62da      	str	r2, [r3, #44]	; 0x2c
    currentNode->cancelar = cancelarNode;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fe6:	631a      	str	r2, [r3, #48]	; 0x30
    currentNode->aceptar = aceptarNode;
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
    currentNode->func_Cancelar = func_Cancelar;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
    currentNode->func_Aceptar = func_Aceptar;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	69fa      	ldr	r2, [r7, #28]
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
    currentNode->menu = menuNode;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000ffe:	639a      	str	r2, [r3, #56]	; 0x38
    currentNode->last = lastNode;
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
    currentNode->privilege = USER;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <MEN_Next>:

void MEN_Next(level_t **currentNode)
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
  if( (*currentNode) ->next != NULL){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	2b00      	cmp	r3, #0
 8001026:	d00b      	beq.n	8001040 <MEN_Next+0x2a>
	  level_t *auxLastNode = *currentNode;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->next;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <MEN_Prev>:

void MEN_Prev(level_t **currentNode)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  if((*currentNode)->prev != NULL){
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	2b00      	cmp	r3, #0
 800105a:	d00b      	beq.n	8001074 <MEN_Prev+0x2a>
	  level_t *auxLastNode = *currentNode;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->prev;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001074:	bf00      	nop
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr

0800107e <MEN_Maestra>:
void MEN_Maestra(level_t **currentNode)
{
 800107e:	b480      	push	{r7}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  if((*currentNode)->maestra != NULL){
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <MEN_Maestra+0x2a>
	  level_t *auxLastNode = *currentNode;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->maestra;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <MEN_Cancelar>:

void MEN_Cancelar(level_t **currentNode)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  if((*currentNode)->func_Cancelar != NULL)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d004      	beq.n	80010ce <MEN_Cancelar+0x1c>
	  (*currentNode)->func_Cancelar();
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	4798      	blx	r3
  else if((*currentNode)->cancelar != NULL){
	  level_t *auxLastNode = *currentNode;
	  (*currentNode) = (*currentNode)->cancelar;
	  (*currentNode)->last = auxLastNode;
  }
}
 80010cc:	e010      	b.n	80010f0 <MEN_Cancelar+0x3e>
  else if((*currentNode)->cancelar != NULL){
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d00b      	beq.n	80010f0 <MEN_Cancelar+0x3e>
	  level_t *auxLastNode = *currentNode;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->cancelar;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <MEN_Menu>:
	  (*currentNode) = (*currentNode)->aceptar;
	  (*currentNode)->last = auxLastNode;
  }
}
void MEN_Menu(level_t **currentNode)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  if((*currentNode)->menu != NULL){
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001106:	2b00      	cmp	r3, #0
 8001108:	d00b      	beq.n	8001122 <MEN_Menu+0x2a>
	  level_t *auxLastNode = *currentNode;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	60fb      	str	r3, [r7, #12]
	  (*currentNode) = (*currentNode)->menu;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	601a      	str	r2, [r3, #0]
	  (*currentNode)->last = auxLastNode;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <MEN_Last>:

void MEN_Last(level_t **currentNode){
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  level_t *auxLastNode = *currentNode;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	60fb      	str	r3, [r7, #12]
  (*currentNode)->last = auxLastNode;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001142:	bf00      	nop
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <display_Print>:
		bufferAux[(2*j)+1] = 0;
	}
	Flash_Write_Data(PAGE_ADDR_1, bufferAux, FLASH_BUFFER_SIZE);
}

void display_Print(uint8_t accion, char *linea1, char *linea2){
 800114c:	b580      	push	{r7, lr}
 800114e:	b08e      	sub	sp, #56	; 0x38
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	73fb      	strb	r3, [r7, #15]
	display_t display;

	display.accion = accion;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	753b      	strb	r3, [r7, #20]
	strcpy(display.linea1, linea1);
 800115e:	f107 0314 	add.w	r3, r7, #20
 8001162:	3301      	adds	r3, #1
 8001164:	68b9      	ldr	r1, [r7, #8]
 8001166:	4618      	mov	r0, r3
 8001168:	f007 fc19 	bl	800899e <strcpy>
	strcpy(display.linea2, linea2);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	3311      	adds	r3, #17
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	f007 fc12 	bl	800899e <strcpy>
	xQueueSend(display_q, &display, blockForever);
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <display_Print+0x48>)
 800117c:	6818      	ldr	r0, [r3, #0]
 800117e:	f107 0114 	add.w	r1, r7, #20
 8001182:	2300      	movs	r3, #0
 8001184:	f04f 32ff 	mov.w	r2, #4294967295
 8001188:	f004 ff7c 	bl	8006084 <xQueueGenericSend>
}
 800118c:	bf00      	nop
 800118e:	3738      	adds	r7, #56	; 0x38
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000458 	.word	0x20000458

08001198 <t_Menu>:


//menu----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Menu (void *pvParameters){
 8001198:	b5b0      	push	{r4, r5, r7, lr}
 800119a:	f5ad 6db7 	sub.w	sp, sp, #1464	; 0x5b8
 800119e:	af0a      	add	r7, sp, #40	; 0x28
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	6018      	str	r0, [r3, #0]

	usuario_t usuario[CANT_MAX_USUARIOS];

	uint32_t i;

	for(i = 0; i < CANT_MAX_USUARIOS; i++){
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80011aa:	e03b      	b.n	8001224 <t_Menu+0x8c>
		usuario[i].clave = 0;
 80011ac:	f107 0220 	add.w	r2, r7, #32
 80011b0:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	4413      	add	r3, r2
 80011b8:	3304      	adds	r3, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
		usuario[i].nroUsuario = i;
 80011be:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80011c2:	b2d9      	uxtb	r1, r3
 80011c4:	f107 0220 	add.w	r2, r7, #32
 80011c8:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	4413      	add	r3, r2
 80011d0:	3301      	adds	r3, #1
 80011d2:	460a      	mov	r2, r1
 80011d4:	701a      	strb	r2, [r3, #0]
		usuario[i].accion = SCANN;
 80011d6:	f107 0220 	add.w	r2, r7, #32
 80011da:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	4413      	add	r3, r2
 80011e2:	2202      	movs	r2, #2
 80011e4:	701a      	strb	r2, [r3, #0]

		xQueueSendToBack(reqAcceso_q, &usuario[i], blockForever);
 80011e6:	4bbd      	ldr	r3, [pc, #756]	; (80014dc <t_Menu+0x344>)
 80011e8:	6818      	ldr	r0, [r3, #0]
 80011ea:	f107 0220 	add.w	r2, r7, #32
 80011ee:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	18d1      	adds	r1, r2, r3
 80011f6:	2300      	movs	r3, #0
 80011f8:	f04f 32ff 	mov.w	r2, #4294967295
 80011fc:	f004 ff42 	bl	8006084 <xQueueGenericSend>
		xQueueReceive(respAcceso_q, &usuario[i], blockForever);
 8001200:	4bb7      	ldr	r3, [pc, #732]	; (80014e0 <t_Menu+0x348>)
 8001202:	6818      	ldr	r0, [r3, #0]
 8001204:	f107 0220 	add.w	r2, r7, #32
 8001208:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	f04f 32ff 	mov.w	r2, #4294967295
 8001214:	4619      	mov	r1, r3
 8001216:	f005 f8e5 	bl	80063e4 <xQueueReceive>
	for(i = 0; i < CANT_MAX_USUARIOS; i++){
 800121a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 800121e:	3301      	adds	r3, #1
 8001220:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8001224:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001228:	2b0a      	cmp	r3, #10
 800122a:	d9bf      	bls.n	80011ac <t_Menu+0x14>
	}

	//BuildMenu(nodoActual, nroUsuario, imprimir1, imprimir2, funcCancelar, funcAceptar, nodoArriba, nodoAbajo, nodoMaestra, nodoCancelar, nodoAceptar, nodoMenu, lastMenu)

    MEN_BuildMenu(&claveUsuario1, USUARIO_1,"USUARIO 1", ">>>", 0, 0, &claveUsuario10, &claveUsuario2, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800122c:	f207 5034 	addw	r0, r7, #1332	; 0x534
 8001230:	2300      	movs	r3, #0
 8001232:	9308      	str	r3, [sp, #32]
 8001234:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001238:	9307      	str	r3, [sp, #28]
 800123a:	2300      	movs	r3, #0
 800123c:	9306      	str	r3, [sp, #24]
 800123e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001242:	9305      	str	r3, [sp, #20]
 8001244:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001248:	9304      	str	r3, [sp, #16]
 800124a:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 800124e:	9303      	str	r3, [sp, #12]
 8001250:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2300      	movs	r3, #0
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	4ba1      	ldr	r3, [pc, #644]	; (80014e4 <t_Menu+0x34c>)
 8001260:	4aa1      	ldr	r2, [pc, #644]	; (80014e8 <t_Menu+0x350>)
 8001262:	2101      	movs	r1, #1
 8001264:	f7ff fe9e 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario2, USUARIO_2,"USUARIO 2", ">>>", 0, 0, &claveUsuario1, &claveUsuario3, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001268:	f207 40e4 	addw	r0, r7, #1252	; 0x4e4
 800126c:	2300      	movs	r3, #0
 800126e:	9308      	str	r3, [sp, #32]
 8001270:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001274:	9307      	str	r3, [sp, #28]
 8001276:	2300      	movs	r3, #0
 8001278:	9306      	str	r3, [sp, #24]
 800127a:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800127e:	9305      	str	r3, [sp, #20]
 8001280:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001284:	9304      	str	r3, [sp, #16]
 8001286:	f207 4394 	addw	r3, r7, #1172	; 0x494
 800128a:	9303      	str	r3, [sp, #12]
 800128c:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2300      	movs	r3, #0
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	4b92      	ldr	r3, [pc, #584]	; (80014e4 <t_Menu+0x34c>)
 800129c:	4a93      	ldr	r2, [pc, #588]	; (80014ec <t_Menu+0x354>)
 800129e:	2102      	movs	r1, #2
 80012a0:	f7ff fe80 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario3, USUARIO_3,"USUARIO 3", ">>>", 0, 0, &claveUsuario2, &claveUsuario4, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80012a4:	f207 4094 	addw	r0, r7, #1172	; 0x494
 80012a8:	2300      	movs	r3, #0
 80012aa:	9308      	str	r3, [sp, #32]
 80012ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012b0:	9307      	str	r3, [sp, #28]
 80012b2:	2300      	movs	r3, #0
 80012b4:	9306      	str	r3, [sp, #24]
 80012b6:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80012ba:	9305      	str	r3, [sp, #20]
 80012bc:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012c0:	9304      	str	r3, [sp, #16]
 80012c2:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80012c6:	9303      	str	r3, [sp, #12]
 80012c8:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2300      	movs	r3, #0
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	2300      	movs	r3, #0
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	4b83      	ldr	r3, [pc, #524]	; (80014e4 <t_Menu+0x34c>)
 80012d8:	4a85      	ldr	r2, [pc, #532]	; (80014f0 <t_Menu+0x358>)
 80012da:	2103      	movs	r1, #3
 80012dc:	f7ff fe62 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario4, USUARIO_4,"USUARIO 4", ">>>", 0, 0, &claveUsuario3, &claveUsuario5, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80012e0:	f207 4044 	addw	r0, r7, #1092	; 0x444
 80012e4:	2300      	movs	r3, #0
 80012e6:	9308      	str	r3, [sp, #32]
 80012e8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012ec:	9307      	str	r3, [sp, #28]
 80012ee:	2300      	movs	r3, #0
 80012f0:	9306      	str	r3, [sp, #24]
 80012f2:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80012f6:	9305      	str	r3, [sp, #20]
 80012f8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80012fc:	9304      	str	r3, [sp, #16]
 80012fe:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	f207 4394 	addw	r3, r7, #1172	; 0x494
 8001308:	9302      	str	r3, [sp, #8]
 800130a:	2300      	movs	r3, #0
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	2300      	movs	r3, #0
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <t_Menu+0x34c>)
 8001314:	4a77      	ldr	r2, [pc, #476]	; (80014f4 <t_Menu+0x35c>)
 8001316:	2104      	movs	r1, #4
 8001318:	f7ff fe44 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario5, USUARIO_5,"USUARIO 5", ">>>", 0, 0, &claveUsuario4, &claveUsuario6, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800131c:	f507 707d 	add.w	r0, r7, #1012	; 0x3f4
 8001320:	2300      	movs	r3, #0
 8001322:	9308      	str	r3, [sp, #32]
 8001324:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001328:	9307      	str	r3, [sp, #28]
 800132a:	2300      	movs	r3, #0
 800132c:	9306      	str	r3, [sp, #24]
 800132e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001332:	9305      	str	r3, [sp, #20]
 8001334:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001338:	9304      	str	r3, [sp, #16]
 800133a:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	f207 4344 	addw	r3, r7, #1092	; 0x444
 8001344:	9302      	str	r3, [sp, #8]
 8001346:	2300      	movs	r3, #0
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2300      	movs	r3, #0
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	4b65      	ldr	r3, [pc, #404]	; (80014e4 <t_Menu+0x34c>)
 8001350:	4a69      	ldr	r2, [pc, #420]	; (80014f8 <t_Menu+0x360>)
 8001352:	2105      	movs	r1, #5
 8001354:	f7ff fe26 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario6, USUARIO_6,"USUARIO 6", ">>>", 0, 0, &claveUsuario5, &claveUsuario7, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001358:	f507 7069 	add.w	r0, r7, #932	; 0x3a4
 800135c:	2300      	movs	r3, #0
 800135e:	9308      	str	r3, [sp, #32]
 8001360:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001364:	9307      	str	r3, [sp, #28]
 8001366:	2300      	movs	r3, #0
 8001368:	9306      	str	r3, [sp, #24]
 800136a:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800136e:	9305      	str	r3, [sp, #20]
 8001370:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001374:	9304      	str	r3, [sp, #16]
 8001376:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800137a:	9303      	str	r3, [sp, #12]
 800137c:	f507 737d 	add.w	r3, r7, #1012	; 0x3f4
 8001380:	9302      	str	r3, [sp, #8]
 8001382:	2300      	movs	r3, #0
 8001384:	9301      	str	r3, [sp, #4]
 8001386:	2300      	movs	r3, #0
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <t_Menu+0x34c>)
 800138c:	4a5b      	ldr	r2, [pc, #364]	; (80014fc <t_Menu+0x364>)
 800138e:	2106      	movs	r1, #6
 8001390:	f7ff fe08 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario7, USUARIO_7,"USUARIO 7", ">>>", 0, 0, &claveUsuario6, &claveUsuario8, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001394:	f507 7055 	add.w	r0, r7, #852	; 0x354
 8001398:	2300      	movs	r3, #0
 800139a:	9308      	str	r3, [sp, #32]
 800139c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013a0:	9307      	str	r3, [sp, #28]
 80013a2:	2300      	movs	r3, #0
 80013a4:	9306      	str	r3, [sp, #24]
 80013a6:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80013aa:	9305      	str	r3, [sp, #20]
 80013ac:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80013b0:	9304      	str	r3, [sp, #16]
 80013b2:	f507 7341 	add.w	r3, r7, #772	; 0x304
 80013b6:	9303      	str	r3, [sp, #12]
 80013b8:	f507 7369 	add.w	r3, r7, #932	; 0x3a4
 80013bc:	9302      	str	r3, [sp, #8]
 80013be:	2300      	movs	r3, #0
 80013c0:	9301      	str	r3, [sp, #4]
 80013c2:	2300      	movs	r3, #0
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4b47      	ldr	r3, [pc, #284]	; (80014e4 <t_Menu+0x34c>)
 80013c8:	4a4d      	ldr	r2, [pc, #308]	; (8001500 <t_Menu+0x368>)
 80013ca:	2107      	movs	r1, #7
 80013cc:	f7ff fdea 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario8, USUARIO_8,"USUARIO 8", ">>>", 0, 0, &claveUsuario7, &claveUsuario9, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 80013d0:	f507 7041 	add.w	r0, r7, #772	; 0x304
 80013d4:	2300      	movs	r3, #0
 80013d6:	9308      	str	r3, [sp, #32]
 80013d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80013dc:	9307      	str	r3, [sp, #28]
 80013de:	2300      	movs	r3, #0
 80013e0:	9306      	str	r3, [sp, #24]
 80013e2:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80013e6:	9305      	str	r3, [sp, #20]
 80013e8:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80013ec:	9304      	str	r3, [sp, #16]
 80013ee:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80013f8:	9302      	str	r3, [sp, #8]
 80013fa:	2300      	movs	r3, #0
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	2300      	movs	r3, #0
 8001400:	9300      	str	r3, [sp, #0]
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <t_Menu+0x34c>)
 8001404:	4a3f      	ldr	r2, [pc, #252]	; (8001504 <t_Menu+0x36c>)
 8001406:	2108      	movs	r1, #8
 8001408:	f7ff fdcc 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario9, USUARIO_9,"USUARIO 9", ">>>", 0, 0, &claveUsuario8, &claveUsuario10, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 800140c:	f507 702d 	add.w	r0, r7, #692	; 0x2b4
 8001410:	2300      	movs	r3, #0
 8001412:	9308      	str	r3, [sp, #32]
 8001414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001418:	9307      	str	r3, [sp, #28]
 800141a:	2300      	movs	r3, #0
 800141c:	9306      	str	r3, [sp, #24]
 800141e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001422:	9305      	str	r3, [sp, #20]
 8001424:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001428:	9304      	str	r3, [sp, #16]
 800142a:	f507 7319 	add.w	r3, r7, #612	; 0x264
 800142e:	9303      	str	r3, [sp, #12]
 8001430:	f507 7341 	add.w	r3, r7, #772	; 0x304
 8001434:	9302      	str	r3, [sp, #8]
 8001436:	2300      	movs	r3, #0
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	2300      	movs	r3, #0
 800143c:	9300      	str	r3, [sp, #0]
 800143e:	4b29      	ldr	r3, [pc, #164]	; (80014e4 <t_Menu+0x34c>)
 8001440:	4a31      	ldr	r2, [pc, #196]	; (8001508 <t_Menu+0x370>)
 8001442:	2109      	movs	r1, #9
 8001444:	f7ff fdae 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveUsuario10, USUARIO_10,"USUARIO 10", ">>>", 0, 0, &claveUsuario9, &claveUsuario1, &claveMaestra, &claveUsuario1, 0, &menu, 0);
 8001448:	f507 7019 	add.w	r0, r7, #612	; 0x264
 800144c:	2300      	movs	r3, #0
 800144e:	9308      	str	r3, [sp, #32]
 8001450:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001454:	9307      	str	r3, [sp, #28]
 8001456:	2300      	movs	r3, #0
 8001458:	9306      	str	r3, [sp, #24]
 800145a:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800145e:	9305      	str	r3, [sp, #20]
 8001460:	f507 7305 	add.w	r3, r7, #532	; 0x214
 8001464:	9304      	str	r3, [sp, #16]
 8001466:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800146a:	9303      	str	r3, [sp, #12]
 800146c:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 8001470:	9302      	str	r3, [sp, #8]
 8001472:	2300      	movs	r3, #0
 8001474:	9301      	str	r3, [sp, #4]
 8001476:	2300      	movs	r3, #0
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <t_Menu+0x34c>)
 800147c:	4a23      	ldr	r2, [pc, #140]	; (800150c <t_Menu+0x374>)
 800147e:	210a      	movs	r1, #10
 8001480:	f7ff fd90 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&claveMaestra, 0,"CLAVE MAESTRA", ">>>", 0, 0, 0, 0, 0, &claveUsuario1, 0, &menu, 0);
 8001484:	f507 7005 	add.w	r0, r7, #532	; 0x214
 8001488:	2300      	movs	r3, #0
 800148a:	9308      	str	r3, [sp, #32]
 800148c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001490:	9307      	str	r3, [sp, #28]
 8001492:	2300      	movs	r3, #0
 8001494:	9306      	str	r3, [sp, #24]
 8001496:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800149a:	9305      	str	r3, [sp, #20]
 800149c:	2300      	movs	r3, #0
 800149e:	9304      	str	r3, [sp, #16]
 80014a0:	2300      	movs	r3, #0
 80014a2:	9303      	str	r3, [sp, #12]
 80014a4:	2300      	movs	r3, #0
 80014a6:	9302      	str	r3, [sp, #8]
 80014a8:	2300      	movs	r3, #0
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <t_Menu+0x34c>)
 80014b2:	4a17      	ldr	r2, [pc, #92]	; (8001510 <t_Menu+0x378>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	f7ff fd75 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&menu, 0,"MENU CONFIG.", "<<< >>>", 0, 0, &borrarUsuario, &agregarUsuario, 0, &claveUsuario1, 0, 0, 0);
 80014ba:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 80014be:	2300      	movs	r3, #0
 80014c0:	9308      	str	r3, [sp, #32]
 80014c2:	2300      	movs	r3, #0
 80014c4:	9307      	str	r3, [sp, #28]
 80014c6:	2300      	movs	r3, #0
 80014c8:	9306      	str	r3, [sp, #24]
 80014ca:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80014ce:	9305      	str	r3, [sp, #20]
 80014d0:	2300      	movs	r3, #0
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80014d8:	e01c      	b.n	8001514 <t_Menu+0x37c>
 80014da:	bf00      	nop
 80014dc:	2000024c 	.word	0x2000024c
 80014e0:	20000450 	.word	0x20000450
 80014e4:	08009fa8 	.word	0x08009fa8
 80014e8:	08009fac 	.word	0x08009fac
 80014ec:	08009fb8 	.word	0x08009fb8
 80014f0:	08009fc4 	.word	0x08009fc4
 80014f4:	08009fd0 	.word	0x08009fd0
 80014f8:	08009fdc 	.word	0x08009fdc
 80014fc:	08009fe8 	.word	0x08009fe8
 8001500:	08009ff4 	.word	0x08009ff4
 8001504:	0800a000 	.word	0x0800a000
 8001508:	0800a00c 	.word	0x0800a00c
 800150c:	0800a018 	.word	0x0800a018
 8001510:	0800a024 	.word	0x0800a024
 8001514:	9303      	str	r3, [sp, #12]
 8001516:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800151a:	9302      	str	r3, [sp, #8]
 800151c:	2300      	movs	r3, #0
 800151e:	9301      	str	r3, [sp, #4]
 8001520:	2300      	movs	r3, #0
 8001522:	9300      	str	r3, [sp, #0]
 8001524:	4bce      	ldr	r3, [pc, #824]	; (8001860 <t_Menu+0x6c8>)
 8001526:	4acf      	ldr	r2, [pc, #828]	; (8001864 <t_Menu+0x6cc>)
 8001528:	2100      	movs	r1, #0
 800152a:	f7ff fd3b 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&agregarUsuario, 11,"AGREGAR USUARIO", ">>>", 0, 0, &borrarUsuario, &borrarUsuario, 0, &claveUsuario1, 0, 0, 0);
 800152e:	f507 70e2 	add.w	r0, r7, #452	; 0x1c4
 8001532:	2300      	movs	r3, #0
 8001534:	9308      	str	r3, [sp, #32]
 8001536:	2300      	movs	r3, #0
 8001538:	9307      	str	r3, [sp, #28]
 800153a:	2300      	movs	r3, #0
 800153c:	9306      	str	r3, [sp, #24]
 800153e:	f207 5334 	addw	r3, r7, #1332	; 0x534
 8001542:	9305      	str	r3, [sp, #20]
 8001544:	2300      	movs	r3, #0
 8001546:	9304      	str	r3, [sp, #16]
 8001548:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 800154c:	9303      	str	r3, [sp, #12]
 800154e:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001552:	9302      	str	r3, [sp, #8]
 8001554:	2300      	movs	r3, #0
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	2300      	movs	r3, #0
 800155a:	9300      	str	r3, [sp, #0]
 800155c:	4bc2      	ldr	r3, [pc, #776]	; (8001868 <t_Menu+0x6d0>)
 800155e:	4ac3      	ldr	r2, [pc, #780]	; (800186c <t_Menu+0x6d4>)
 8001560:	210b      	movs	r1, #11
 8001562:	f7ff fd1f 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&borrarUsuario, 12,"BORRAR USUARIO", ">>>", 0, 0, &agregarUsuario, &agregarUsuario, 0, &claveUsuario1, 0, 0, 0);
 8001566:	f507 70ba 	add.w	r0, r7, #372	; 0x174
 800156a:	2300      	movs	r3, #0
 800156c:	9308      	str	r3, [sp, #32]
 800156e:	2300      	movs	r3, #0
 8001570:	9307      	str	r3, [sp, #28]
 8001572:	2300      	movs	r3, #0
 8001574:	9306      	str	r3, [sp, #24]
 8001576:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800157a:	9305      	str	r3, [sp, #20]
 800157c:	2300      	movs	r3, #0
 800157e:	9304      	str	r3, [sp, #16]
 8001580:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001584:	9303      	str	r3, [sp, #12]
 8001586:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 800158a:	9302      	str	r3, [sp, #8]
 800158c:	2300      	movs	r3, #0
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4bb4      	ldr	r3, [pc, #720]	; (8001868 <t_Menu+0x6d0>)
 8001596:	4ab6      	ldr	r2, [pc, #728]	; (8001870 <t_Menu+0x6d8>)
 8001598:	210c      	movs	r1, #12
 800159a:	f7ff fd03 	bl	8000fa4 <MEN_BuildMenu>
    MEN_BuildMenu(&resetFabrica, 13,"RESET FABRICA", ">>>", 0, 0, &agregarUsuario, &borrarUsuario, 0, &claveUsuario1, 0, 0, 0);
 800159e:	f507 7092 	add.w	r0, r7, #292	; 0x124
 80015a2:	2300      	movs	r3, #0
 80015a4:	9308      	str	r3, [sp, #32]
 80015a6:	2300      	movs	r3, #0
 80015a8:	9307      	str	r3, [sp, #28]
 80015aa:	2300      	movs	r3, #0
 80015ac:	9306      	str	r3, [sp, #24]
 80015ae:	f207 5334 	addw	r3, r7, #1332	; 0x534
 80015b2:	9305      	str	r3, [sp, #20]
 80015b4:	2300      	movs	r3, #0
 80015b6:	9304      	str	r3, [sp, #16]
 80015b8:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 80015bc:	9303      	str	r3, [sp, #12]
 80015be:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 80015c2:	9302      	str	r3, [sp, #8]
 80015c4:	2300      	movs	r3, #0
 80015c6:	9301      	str	r3, [sp, #4]
 80015c8:	2300      	movs	r3, #0
 80015ca:	9300      	str	r3, [sp, #0]
 80015cc:	4ba6      	ldr	r3, [pc, #664]	; (8001868 <t_Menu+0x6d0>)
 80015ce:	4aa9      	ldr	r2, [pc, #676]	; (8001874 <t_Menu+0x6dc>)
 80015d0:	210d      	movs	r1, #13
 80015d2:	f7ff fce7 	bl	8000fa4 <MEN_BuildMenu>

	char lcdStr[16] = ">>>";
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	4aa7      	ldr	r2, [pc, #668]	; (8001878 <t_Menu+0x6e0>)
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	3304      	adds	r3, #4
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
	uint32_t claveIngresada = 0, contDig = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
	lcd_init(lcdSize);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff fadf 	bl	8000bb8 <HD44780_Init>

    currentM = &claveUsuario1;
 80015fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80015fe:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001602:	601a      	str	r2, [r3, #0]
    MEN_Last(&currentM);
 8001604:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd8f 	bl	800112c <MEN_Last>
	display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 800160e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	1d19      	adds	r1, r3, #4
 8001616:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	3314      	adds	r3, #20
 800161e:	461a      	mov	r2, r3
 8001620:	2006      	movs	r0, #6
 8001622:	f7ff fd93 	bl	800114c <display_Print>

    tecla_t tecla;

	for(;;){
		xQueueReceive(tecla_q, &tecla, blockForever);
 8001626:	4b95      	ldr	r3, [pc, #596]	; (800187c <t_Menu+0x6e4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f107 010c 	add.w	r1, r7, #12
 800162e:	f04f 32ff 	mov.w	r2, #4294967295
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fed6 	bl	80063e4 <xQueueReceive>
		switch(tecla.accion){
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3b0a      	subs	r3, #10
 8001640:	2b06      	cmp	r3, #6
 8001642:	d8f0      	bhi.n	8001626 <t_Menu+0x48e>
 8001644:	a201      	add	r2, pc, #4	; (adr r2, 800164c <t_Menu+0x4b4>)
 8001646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164a:	bf00      	nop
 800164c:	08002025 	.word	0x08002025
 8001650:	08001717 	.word	0x08001717
 8001654:	08001793 	.word	0x08001793
 8001658:	08001fe3 	.word	0x08001fe3
 800165c:	0800180f 	.word	0x0800180f
 8001660:	08001891 	.word	0x08001891
 8001664:	08001669 	.word	0x08001669
			case NUM:

				if(contDig < 8){
 8001668:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 800166c:	2b07      	cmp	r3, #7
 800166e:	d844      	bhi.n	80016fa <t_Menu+0x562>
					claveIngresada += tecla.tecla * pow(10, contDig);
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fec4 	bl	8000404 <__aeabi_i2d>
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
 8001680:	f8d7 0584 	ldr.w	r0, [r7, #1412]	; 0x584
 8001684:	f7fe feae 	bl	80003e4 <__aeabi_ui2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	f04f 0000 	mov.w	r0, #0
 8001690:	497b      	ldr	r1, [pc, #492]	; (8001880 <t_Menu+0x6e8>)
 8001692:	f007 fce3 	bl	800905c <pow>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4620      	mov	r0, r4
 800169c:	4629      	mov	r1, r5
 800169e:	f7fe ff1b 	bl	80004d8 <__aeabi_dmul>
 80016a2:	4602      	mov	r2, r0
 80016a4:	460b      	mov	r3, r1
 80016a6:	4614      	mov	r4, r2
 80016a8:	461d      	mov	r5, r3
 80016aa:	f8d7 0588 	ldr.w	r0, [r7, #1416]	; 0x588
 80016ae:	f7fe fe99 	bl	80003e4 <__aeabi_ui2d>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7fe fd57 	bl	800016c <__adddf3>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f9b7 	bl	8000a38 <__aeabi_d2uiz>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
					contDig++;
 80016d0:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80016d4:	3301      	adds	r3, #1
 80016d6:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
					strcat(lcdStr,"*");
 80016da:	f107 0310 	add.w	r3, r7, #16
 80016de:	4618      	mov	r0, r3
 80016e0:	f7fe fd36 	bl	8000150 <strlen>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4413      	add	r3, r2
 80016ee:	4965      	ldr	r1, [pc, #404]	; (8001884 <t_Menu+0x6ec>)
 80016f0:	461a      	mov	r2, r3
 80016f2:	460b      	mov	r3, r1
 80016f4:	881b      	ldrh	r3, [r3, #0]
 80016f6:	8013      	strh	r3, [r2, #0]
 80016f8:	e004      	b.n	8001704 <t_Menu+0x56c>
				}
				else
					display_Print(TEMPORARY_PRINTING, '\0', "ERROR 5");
 80016fa:	4a63      	ldr	r2, [pc, #396]	; (8001888 <t_Menu+0x6f0>)
 80016fc:	2100      	movs	r1, #0
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fd24 	bl	800114c <display_Print>

				display_Print(PRINT, '\0', lcdStr);
 8001704:	f107 0310 	add.w	r3, r7, #16
 8001708:	461a      	mov	r2, r3
 800170a:	2100      	movs	r1, #0
 800170c:	2000      	movs	r0, #0
 800170e:	f7ff fd1d 	bl	800114c <display_Print>
				break;
 8001712:	f000 bca8 	b.w	8002066 <t_Menu+0xece>
			case ARRIBA:
				MEN_Prev(&currentM);
 8001716:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fc95 	bl	800104a <MEN_Prev>
				if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR)
 8001720:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f107 0220 	add.w	r2, r7, #32
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0a      	cmp	r3, #10
 8001734:	d109      	bne.n	800174a <t_Menu+0x5b2>
					display_Print(CLEAR_PRINT, currentM->row1, "Sin asignar");
 8001736:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3304      	adds	r3, #4
 800173e:	4a53      	ldr	r2, [pc, #332]	; (800188c <t_Menu+0x6f4>)
 8001740:	4619      	mov	r1, r3
 8001742:	2006      	movs	r0, #6
 8001744:	f7ff fd02 	bl	800114c <display_Print>
 8001748:	e00b      	b.n	8001762 <t_Menu+0x5ca>
				else display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 800174a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	1d19      	adds	r1, r3, #4
 8001752:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	3314      	adds	r3, #20
 800175a:	461a      	mov	r2, r3
 800175c:	2006      	movs	r0, #6
 800175e:	f7ff fcf5 	bl	800114c <display_Print>
				if(menu.privilege == MASTER)
 8001762:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001766:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800176a:	2b01      	cmp	r3, #1
 800176c:	d105      	bne.n	800177a <t_Menu+0x5e2>
					currentM->last = &borrarUsuario;
 800176e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8001778:	63da      	str	r2, [r3, #60]	; 0x3c
				reset_values();
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001786:	f107 0310 	add.w	r3, r7, #16
 800178a:	4a3b      	ldr	r2, [pc, #236]	; (8001878 <t_Menu+0x6e0>)
 800178c:	601a      	str	r2, [r3, #0]
				break;
 800178e:	f000 bc6a 	b.w	8002066 <t_Menu+0xece>

			case ABAJO:
				MEN_Next(&currentM);
 8001792:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc3d 	bl	8001016 <MEN_Next>
				if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR)
 800179c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f107 0220 	add.w	r2, r7, #32
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d109      	bne.n	80017c6 <t_Menu+0x62e>
					display_Print(CLEAR_PRINT, currentM->row1, "Sin asignar");
 80017b2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	3304      	adds	r3, #4
 80017ba:	4a34      	ldr	r2, [pc, #208]	; (800188c <t_Menu+0x6f4>)
 80017bc:	4619      	mov	r1, r3
 80017be:	2006      	movs	r0, #6
 80017c0:	f7ff fcc4 	bl	800114c <display_Print>
 80017c4:	e00b      	b.n	80017de <t_Menu+0x646>
				else display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 80017c6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1d19      	adds	r1, r3, #4
 80017ce:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	3314      	adds	r3, #20
 80017d6:	461a      	mov	r2, r3
 80017d8:	2006      	movs	r0, #6
 80017da:	f7ff fcb7 	bl	800114c <display_Print>
				if(menu.privilege == MASTER)
 80017de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017e2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d105      	bne.n	80017f6 <t_Menu+0x65e>
					currentM->last = &borrarUsuario;
 80017ea:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 80017f4:	63da      	str	r2, [r3, #60]	; 0x3c
				reset_values();
 80017f6:	2300      	movs	r3, #0
 80017f8:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001802:	f107 0310 	add.w	r3, r7, #16
 8001806:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <t_Menu+0x6e0>)
 8001808:	601a      	str	r2, [r3, #0]
				break;
 800180a:	f000 bc2c 	b.w	8002066 <t_Menu+0xece>

			case MENU:
				MEN_Maestra(&currentM);
 800180e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff fc33 	bl	800107e <MEN_Maestra>
				currentM->last = &menu;
 8001818:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8001822:	63da      	str	r2, [r3, #60]	; 0x3c
				display_Print(TEMPORARY_PRINTING, "MENU CONFIG.", 0);
 8001824:	2200      	movs	r2, #0
 8001826:	490f      	ldr	r1, [pc, #60]	; (8001864 <t_Menu+0x6cc>)
 8001828:	2001      	movs	r0, #1
 800182a:	f7ff fc8f 	bl	800114c <display_Print>
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 800182e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1d19      	adds	r1, r3, #4
 8001836:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3314      	adds	r3, #20
 800183e:	461a      	mov	r2, r3
 8001840:	2006      	movs	r0, #6
 8001842:	f7ff fc83 	bl	800114c <display_Print>
				reset_values();
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001852:	f107 0310 	add.w	r3, r7, #16
 8001856:	4a08      	ldr	r2, [pc, #32]	; (8001878 <t_Menu+0x6e0>)
 8001858:	601a      	str	r2, [r3, #0]
				break;
 800185a:	f000 bc04 	b.w	8002066 <t_Menu+0xece>
 800185e:	bf00      	nop
 8001860:	0800a034 	.word	0x0800a034
 8001864:	0800a03c 	.word	0x0800a03c
 8001868:	08009fa8 	.word	0x08009fa8
 800186c:	0800a04c 	.word	0x0800a04c
 8001870:	0800a05c 	.word	0x0800a05c
 8001874:	0800a06c 	.word	0x0800a06c
 8001878:	003e3e3e 	.word	0x003e3e3e
 800187c:	200002fc 	.word	0x200002fc
 8001880:	40240000 	.word	0x40240000
 8001884:	0800a07c 	.word	0x0800a07c
 8001888:	0800a080 	.word	0x0800a080
 800188c:	0800a088 	.word	0x0800a088

			case ACEPTAR:

				if((currentM == &claveUsuario1 || currentM == &claveUsuario2 || currentM == &claveUsuario3 || currentM == &claveUsuario4 || currentM == &claveMaestra) && menu.privilege == USER){
 8001890:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	f207 5334 	addw	r3, r7, #1332	; 0x534
 800189a:	429a      	cmp	r2, r3
 800189c:	d01c      	beq.n	80018d8 <t_Menu+0x740>
 800189e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	f207 43e4 	addw	r3, r7, #1252	; 0x4e4
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d015      	beq.n	80018d8 <t_Menu+0x740>
 80018ac:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	f207 4394 	addw	r3, r7, #1172	; 0x494
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d00e      	beq.n	80018d8 <t_Menu+0x740>
 80018ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	f207 4344 	addw	r3, r7, #1092	; 0x444
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d007      	beq.n	80018d8 <t_Menu+0x740>
 80018c8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	f507 7305 	add.w	r3, r7, #532	; 0x214
 80018d2:	429a      	cmp	r2, r3
 80018d4:	f040 81c2 	bne.w	8001c5c <t_Menu+0xac4>
 80018d8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80018dc:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f040 81bb 	bne.w	8001c5c <t_Menu+0xac4>
					if(currentM->userNo == 0){
 80018e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 80f3 	bne.w	8001ada <t_Menu+0x942>
						//clave maestra
						if(contDig != 8) display_Print(TEMPORARY_PRINTING, 0, "Error de digitos");
 80018f4:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d005      	beq.n	8001908 <t_Menu+0x770>
 80018fc:	4ac0      	ldr	r2, [pc, #768]	; (8001c00 <t_Menu+0xa68>)
 80018fe:	2100      	movs	r1, #0
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff fc23 	bl	800114c <display_Print>
					if(currentM->userNo == 0){
 8001906:	e361      	b.n	8001fcc <t_Menu+0xe34>
						else{
							//cantidad correcta de digitos
							usuario[currentM->userNo].clave = claveIngresada;
 8001908:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f107 0220 	add.w	r2, r7, #32
 8001914:	011b      	lsls	r3, r3, #4
 8001916:	4413      	add	r3, r2
 8001918:	3304      	adds	r3, #4
 800191a:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 800191e:	601a      	str	r2, [r3, #0]
							usuario[currentM->userNo].accion = READ;
 8001920:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f107 0220 	add.w	r2, r7, #32
 800192c:	011b      	lsls	r3, r3, #4
 800192e:	4413      	add	r3, r2
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]

							usuario[currentM->userNo].id = global_id++;
 8001934:	4bb3      	ldr	r3, [pc, #716]	; (8001c04 <t_Menu+0xa6c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	1c5a      	adds	r2, r3, #1
 800193a:	49b2      	ldr	r1, [pc, #712]	; (8001c04 <t_Menu+0xa6c>)
 800193c:	600a      	str	r2, [r1, #0]
 800193e:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	f107 0120 	add.w	r1, r7, #32
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	440a      	add	r2, r1
 800194e:	320c      	adds	r2, #12
 8001950:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001952:	4bad      	ldr	r3, [pc, #692]	; (8001c08 <t_Menu+0xa70>)
 8001954:	6818      	ldr	r0, [r3, #0]
 8001956:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f107 0220 	add.w	r2, r7, #32
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	18d1      	adds	r1, r2, r3
 8001966:	2300      	movs	r3, #0
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	f004 fb8a 	bl	8006084 <xQueueGenericSend>
							xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], blockForever);
 8001970:	4ba6      	ldr	r3, [pc, #664]	; (8001c0c <t_Menu+0xa74>)
 8001972:	6818      	ldr	r0, [r3, #0]
 8001974:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f107 0220 	add.w	r2, r7, #32
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	18d1      	adds	r1, r2, r3
 8001984:	2300      	movs	r3, #0
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	f004 fb7b 	bl	8006084 <xQueueGenericSend>

							xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 800198e:	4ba0      	ldr	r3, [pc, #640]	; (8001c10 <t_Menu+0xa78>)
 8001990:	6818      	ldr	r0, [r3, #0]
 8001992:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f107 0220 	add.w	r2, r7, #32
 800199e:	011b      	lsls	r3, r3, #4
 80019a0:	4413      	add	r3, r2
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295
 80019a6:	4619      	mov	r1, r3
 80019a8:	f004 fd1c 	bl	80063e4 <xQueueReceive>
							reset_values();
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 80019b2:	2300      	movs	r3, #0
 80019b4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4a95      	ldr	r2, [pc, #596]	; (8001c14 <t_Menu+0xa7c>)
 80019be:	601a      	str	r2, [r3, #0]

							switch(usuario[currentM->userNo].accion){
 80019c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f107 0220 	add.w	r2, r7, #32
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	4413      	add	r3, r2
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	d061      	beq.n	8001a9a <t_Menu+0x902>
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	f300 813a 	bgt.w	8001c50 <t_Menu+0xab8>
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d002      	beq.n	80019e6 <t_Menu+0x84e>
 80019e0:	2b06      	cmp	r3, #6
 80019e2:	d048      	beq.n	8001a76 <t_Menu+0x8de>
									reset_values();
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
									break;

								default:
									break;
 80019e4:	e134      	b.n	8001c50 <t_Menu+0xab8>
									if(currentM->last == &menu){
 80019e6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ee:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d11e      	bne.n	8001a34 <t_Menu+0x89c>
										MEN_Menu(&currentM);
 80019f6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fb7c 	bl	80010f8 <MEN_Menu>
										display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001a00:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	1d19      	adds	r1, r3, #4
 8001a08:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	3314      	adds	r3, #20
 8001a10:	461a      	mov	r2, r3
 8001a12:	2006      	movs	r0, #6
 8001a14:	f7ff fb9a 	bl	800114c <display_Print>
										menu.privilege = MASTER;
 8001a18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
										agregarUsuario.state = 0;
 8001a22:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001a26:	2200      	movs	r2, #0
 8001a28:	64da      	str	r2, [r3, #76]	; 0x4c
										borrarUsuario.state = 0;
 8001a2a:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001a2e:	2200      	movs	r2, #0
 8001a30:	64da      	str	r2, [r3, #76]	; 0x4c
									break;
 8001a32:	e112      	b.n	8001c5a <t_Menu+0xac2>
										display_Print(TEMPORARY_PRINTING, 0, "Acceso maestro");
 8001a34:	4a78      	ldr	r2, [pc, #480]	; (8001c18 <t_Menu+0xa80>)
 8001a36:	2100      	movs	r1, #0
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff fb87 	bl	800114c <display_Print>
										reset_values();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	4a71      	ldr	r2, [pc, #452]	; (8001c14 <t_Menu+0xa7c>)
 8001a50:	601a      	str	r2, [r3, #0]
										currentM = &claveUsuario1;
 8001a52:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a56:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001a5a:	601a      	str	r2, [r3, #0]
										display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001a5c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	1d19      	adds	r1, r3, #4
 8001a64:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	3314      	adds	r3, #20
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	2006      	movs	r0, #6
 8001a70:	f7ff fb6c 	bl	800114c <display_Print>
									break;
 8001a74:	e0f1      	b.n	8001c5a <t_Menu+0xac2>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso denegado");
 8001a76:	4a69      	ldr	r2, [pc, #420]	; (8001c1c <t_Menu+0xa84>)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	f7ff fb66 	bl	800114c <display_Print>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001a80:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	1d19      	adds	r1, r3, #4
 8001a88:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3314      	adds	r3, #20
 8001a90:	461a      	mov	r2, r3
 8001a92:	2006      	movs	r0, #6
 8001a94:	f7ff fb5a 	bl	800114c <display_Print>
									break;
 8001a98:	e0df      	b.n	8001c5a <t_Menu+0xac2>
									display_Print(TEMPORARY_PRINTING_10s, "Espere 10 seg", "Acceso denegado");
 8001a9a:	4a60      	ldr	r2, [pc, #384]	; (8001c1c <t_Menu+0xa84>)
 8001a9c:	4960      	ldr	r1, [pc, #384]	; (8001c20 <t_Menu+0xa88>)
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f7ff fb54 	bl	800114c <display_Print>
									vTaskDelay(sleep_10s);
 8001aa4:	f242 7010 	movw	r0, #10000	; 0x2710
 8001aa8:	f005 f898 	bl	8006bdc <vTaskDelay>
									reset_values();
 8001aac:	2300      	movs	r3, #0
 8001aae:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001ab8:	f107 0310 	add.w	r3, r7, #16
 8001abc:	4a55      	ldr	r2, [pc, #340]	; (8001c14 <t_Menu+0xa7c>)
 8001abe:	601a      	str	r2, [r3, #0]
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001ac0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	1d19      	adds	r1, r3, #4
 8001ac8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	3314      	adds	r3, #20
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	2006      	movs	r0, #6
 8001ad4:	f7ff fb3a 	bl	800114c <display_Print>
									break;
 8001ad8:	e0bf      	b.n	8001c5a <t_Menu+0xac2>
							}
						}
					}
					else{
						if(contDig != 4) display_Print(TEMPORARY_PRINTING, 0, "ERROR 3");
 8001ada:	f8d7 3584 	ldr.w	r3, [r7, #1412]	; 0x584
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	d005      	beq.n	8001aee <t_Menu+0x956>
 8001ae2:	4a50      	ldr	r2, [pc, #320]	; (8001c24 <t_Menu+0xa8c>)
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2001      	movs	r0, #1
 8001ae8:	f7ff fb30 	bl	800114c <display_Print>
					if(currentM->userNo == 0){
 8001aec:	e26e      	b.n	8001fcc <t_Menu+0xe34>
						else{
							//cantidad correcta de digitos
							usuario[currentM->userNo].clave = claveIngresada;
 8001aee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f107 0220 	add.w	r2, r7, #32
 8001afa:	011b      	lsls	r3, r3, #4
 8001afc:	4413      	add	r3, r2
 8001afe:	3304      	adds	r3, #4
 8001b00:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8001b04:	601a      	str	r2, [r3, #0]
							usuario[currentM->userNo].accion = READ;
 8001b06:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f107 0220 	add.w	r2, r7, #32
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]

							usuario[currentM->userNo].id = global_id++;
 8001b1a:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <t_Menu+0xa6c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	1c5a      	adds	r2, r3, #1
 8001b20:	4938      	ldr	r1, [pc, #224]	; (8001c04 <t_Menu+0xa6c>)
 8001b22:	600a      	str	r2, [r1, #0]
 8001b24:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001b28:	6812      	ldr	r2, [r2, #0]
 8001b2a:	6812      	ldr	r2, [r2, #0]
 8001b2c:	f107 0120 	add.w	r1, r7, #32
 8001b30:	0112      	lsls	r2, r2, #4
 8001b32:	440a      	add	r2, r1
 8001b34:	320c      	adds	r2, #12
 8001b36:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001b38:	4b33      	ldr	r3, [pc, #204]	; (8001c08 <t_Menu+0xa70>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f107 0220 	add.w	r2, r7, #32
 8001b48:	011b      	lsls	r3, r3, #4
 8001b4a:	18d1      	adds	r1, r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b52:	f004 fa97 	bl	8006084 <xQueueGenericSend>
							xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], blockForever);
 8001b56:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <t_Menu+0xa74>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f107 0220 	add.w	r2, r7, #32
 8001b66:	011b      	lsls	r3, r3, #4
 8001b68:	18d1      	adds	r1, r2, r3
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b70:	f004 fa88 	bl	8006084 <xQueueGenericSend>

							xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001b74:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <t_Menu+0xa78>)
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f107 0220 	add.w	r2, r7, #32
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	4413      	add	r3, r2
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f004 fc29 	bl	80063e4 <xQueueReceive>
							reset_values();
 8001b92:	2300      	movs	r3, #0
 8001b94:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	; (8001c14 <t_Menu+0xa7c>)
 8001ba4:	601a      	str	r2, [r3, #0]

							switch(usuario[currentM->userNo].accion){
 8001ba6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f107 0220 	add.w	r2, r7, #32
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	2b07      	cmp	r3, #7
 8001bba:	d04b      	beq.n	8001c54 <t_Menu+0xabc>
 8001bbc:	2b07      	cmp	r3, #7
 8001bbe:	dc4b      	bgt.n	8001c58 <t_Menu+0xac0>
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d002      	beq.n	8001bca <t_Menu+0xa32>
 8001bc4:	2b06      	cmp	r3, #6
 8001bc6:	d031      	beq.n	8001c2c <t_Menu+0xa94>
									break;
								case ACC_ERROR:

									break;
								default:
									break;
 8001bc8:	e046      	b.n	8001c58 <t_Menu+0xac0>
									display_Print(TEMPORARY_PRINTING, 0, "Acceso permitido");
 8001bca:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <t_Menu+0xa90>)
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fabc 	bl	800114c <display_Print>
									vTaskDelay(sleep_2s);
 8001bd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bd8:	f005 f800 	bl	8006bdc <vTaskDelay>
									MEN_Last(&currentM);
 8001bdc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff faa3 	bl	800112c <MEN_Last>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001be6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	1d19      	adds	r1, r3, #4
 8001bee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3314      	adds	r3, #20
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	2006      	movs	r0, #6
 8001bfa:	f7ff faa7 	bl	800114c <display_Print>
									break;
 8001bfe:	e02c      	b.n	8001c5a <t_Menu+0xac2>
 8001c00:	0800a094 	.word	0x0800a094
 8001c04:	200000d8 	.word	0x200000d8
 8001c08:	2000024c 	.word	0x2000024c
 8001c0c:	20000400 	.word	0x20000400
 8001c10:	20000450 	.word	0x20000450
 8001c14:	003e3e3e 	.word	0x003e3e3e
 8001c18:	0800a0a8 	.word	0x0800a0a8
 8001c1c:	0800a0b8 	.word	0x0800a0b8
 8001c20:	0800a0c8 	.word	0x0800a0c8
 8001c24:	0800a0d8 	.word	0x0800a0d8
 8001c28:	0800a0e0 	.word	0x0800a0e0
									display_Print(TEMPORARY_PRINTING, 0, "Acceso denegado");
 8001c2c:	4aca      	ldr	r2, [pc, #808]	; (8001f58 <t_Menu+0xdc0>)
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2001      	movs	r0, #1
 8001c32:	f7ff fa8b 	bl	800114c <display_Print>
									display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001c36:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	1d19      	adds	r1, r3, #4
 8001c3e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	3314      	adds	r3, #20
 8001c46:	461a      	mov	r2, r3
 8001c48:	2006      	movs	r0, #6
 8001c4a:	f7ff fa7f 	bl	800114c <display_Print>
									break;
 8001c4e:	e004      	b.n	8001c5a <t_Menu+0xac2>
									break;
 8001c50:	bf00      	nop
 8001c52:	e1bb      	b.n	8001fcc <t_Menu+0xe34>
									break;
 8001c54:	bf00      	nop
 8001c56:	e1b9      	b.n	8001fcc <t_Menu+0xe34>
									break;
 8001c58:	bf00      	nop
					if(currentM->userNo == 0){
 8001c5a:	e1b7      	b.n	8001fcc <t_Menu+0xe34>
							}
						}
					}
				}
				else if(menu.privilege == MASTER){
 8001c5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001c60:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	f040 81b1 	bne.w	8001fcc <t_Menu+0xe34>
					if(currentM == &agregarUsuario){
 8001c6a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f040 8098 	bne.w	8001daa <t_Menu+0xc12>
						switch(agregarUsuario.state){
 8001c7a:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d002      	beq.n	8001c8a <t_Menu+0xaf2>
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d03b      	beq.n	8001d00 <t_Menu+0xb68>
 8001c88:	e1a0      	b.n	8001fcc <t_Menu+0xe34>
						case 0:
							i = 1;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
							while(usuario[i].accion != ACC_SIN_ASIGNAR){
 8001c90:	e00f      	b.n	8001cb2 <t_Menu+0xb1a>
								if(i < CANT_MAX_USUARIOS) i++;
 8001c92:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001c96:	2b0a      	cmp	r3, #10
 8001c98:	d805      	bhi.n	8001ca6 <t_Menu+0xb0e>
 8001c9a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 8001ca4:	e005      	b.n	8001cb2 <t_Menu+0xb1a>
								else {
									display_Print(TEMPORARY_PRINTING, 0, "Sin espacio");
 8001ca6:	4aad      	ldr	r2, [pc, #692]	; (8001f5c <t_Menu+0xdc4>)
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7ff fa4e 	bl	800114c <display_Print>
									break;
 8001cb0:	e008      	b.n	8001cc4 <t_Menu+0xb2c>
							while(usuario[i].accion != ACC_SIN_ASIGNAR){
 8001cb2:	f107 0220 	add.w	r2, r7, #32
 8001cb6:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001cba:	011b      	lsls	r3, r3, #4
 8001cbc:	4413      	add	r3, r2
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b0a      	cmp	r3, #10
 8001cc2:	d1e6      	bne.n	8001c92 <t_Menu+0xafa>
								}
							}
							if(usuario[i].accion == ACC_SIN_ASIGNAR){
 8001cc4:	f107 0220 	add.w	r2, r7, #32
 8001cc8:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	f040 8179 	bne.w	8001fca <t_Menu+0xe32>
								sprintf(lcdStr, "Usuario %u libre", i);
 8001cd8:	f107 0310 	add.w	r3, r7, #16
 8001cdc:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8001ce0:	499f      	ldr	r1, [pc, #636]	; (8001f60 <t_Menu+0xdc8>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f006 fe2c 	bl	8008940 <siprintf>
								display_Print(TEMPORARY_PRINTING, 0, lcdStr);
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	461a      	mov	r2, r3
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	f7ff fa2b 	bl	800114c <display_Print>
								agregarUsuario.state = 1;
 8001cf6:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	64da      	str	r2, [r3, #76]	; 0x4c
							}
							break;
 8001cfe:	e164      	b.n	8001fca <t_Menu+0xe32>
						case 1:
							usuario[i].clave = claveIngresada;
 8001d00:	f107 0220 	add.w	r2, r7, #32
 8001d04:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	f8d7 2588 	ldr.w	r2, [r7, #1416]	; 0x588
 8001d12:	601a      	str	r2, [r3, #0]
							usuario[i].accion = WRITE;
 8001d14:	f107 0220 	add.w	r2, r7, #32
 8001d18:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001d1c:	011b      	lsls	r3, r3, #4
 8001d1e:	4413      	add	r3, r2
 8001d20:	2201      	movs	r2, #1
 8001d22:	701a      	strb	r2, [r3, #0]
							usuario[i].nroUsuario = i;
 8001d24:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001d28:	b2d9      	uxtb	r1, r3
 8001d2a:	f107 0220 	add.w	r2, r7, #32
 8001d2e:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001d32:	011b      	lsls	r3, r3, #4
 8001d34:	4413      	add	r3, r2
 8001d36:	3301      	adds	r3, #1
 8001d38:	460a      	mov	r2, r1
 8001d3a:	701a      	strb	r2, [r3, #0]

							xQueueSendToBack(reqAcceso_q, &usuario[i], blockForever);
 8001d3c:	4b89      	ldr	r3, [pc, #548]	; (8001f64 <t_Menu+0xdcc>)
 8001d3e:	6818      	ldr	r0, [r3, #0]
 8001d40:	f107 0220 	add.w	r2, r7, #32
 8001d44:	f8d7 358c 	ldr.w	r3, [r7, #1420]	; 0x58c
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	18d1      	adds	r1, r2, r3
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001d52:	f004 f997 	bl	8006084 <xQueueGenericSend>
							sprintf(lcdStr, "Usuario %u", i);
 8001d56:	f107 0310 	add.w	r3, r7, #16
 8001d5a:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8001d5e:	4982      	ldr	r1, [pc, #520]	; (8001f68 <t_Menu+0xdd0>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f006 fded 	bl	8008940 <siprintf>
							display_Print(TEMPORARY_PRINTING, lcdStr, "Guardado");
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	4a80      	ldr	r2, [pc, #512]	; (8001f6c <t_Menu+0xdd4>)
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2001      	movs	r0, #1
 8001d70:	f7ff f9ec 	bl	800114c <display_Print>
						    currentM = &claveUsuario1;
 8001d74:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d78:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001d7c:	601a      	str	r2, [r3, #0]
							display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001d7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	1d19      	adds	r1, r3, #4
 8001d86:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3314      	adds	r3, #20
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2006      	movs	r0, #6
 8001d92:	f7ff f9db 	bl	800114c <display_Print>
							agregarUsuario.state = 0;
 8001d96:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	64da      	str	r2, [r3, #76]	; 0x4c
							menu.privilege = USER;
 8001d9e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
							break;
 8001da8:	e110      	b.n	8001fcc <t_Menu+0xe34>
						}

					}
					else if(currentM == &borrarUsuario){
 8001daa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d121      	bne.n	8001dfc <t_Menu+0xc64>
						currentM = &claveUsuario1;
 8001db8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dbc:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001dc0:	601a      	str	r2, [r3, #0]
						display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001dc2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	1d19      	adds	r1, r3, #4
 8001dca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3314      	adds	r3, #20
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2006      	movs	r0, #6
 8001dd6:	f7ff f9b9 	bl	800114c <display_Print>
						display_Print(TEMPORARY_PRINTING, currentM->row1, currentM->row2);
 8001dda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1d19      	adds	r1, r3, #4
 8001de2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	3314      	adds	r3, #20
 8001dea:	461a      	mov	r2, r3
 8001dec:	2001      	movs	r0, #1
 8001dee:	f7ff f9ad 	bl	800114c <display_Print>
						borrarUsuario.state = 1;
 8001df2:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001df6:	2201      	movs	r2, #1
 8001df8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001dfa:	e0e7      	b.n	8001fcc <t_Menu+0xe34>
					}
					else if(currentM->last == &borrarUsuario){
 8001dfc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e04:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	f040 80df 	bne.w	8001fcc <t_Menu+0xe34>
						usuario[currentM->userNo].clave = 0;
 8001e0e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f107 0220 	add.w	r2, r7, #32
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3304      	adds	r3, #4
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
						usuario[currentM->userNo].accion = WRITE;
 8001e24:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f107 0220 	add.w	r2, r7, #32
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	4413      	add	r3, r2
 8001e34:	2201      	movs	r2, #1
 8001e36:	701a      	strb	r2, [r3, #0]

						usuario[currentM->userNo].id = global_id++;
 8001e38:	4b4d      	ldr	r3, [pc, #308]	; (8001f70 <t_Menu+0xdd8>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	494c      	ldr	r1, [pc, #304]	; (8001f70 <t_Menu+0xdd8>)
 8001e40:	600a      	str	r2, [r1, #0]
 8001e42:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001e46:	6812      	ldr	r2, [r2, #0]
 8001e48:	6812      	ldr	r2, [r2, #0]
 8001e4a:	f107 0120 	add.w	r1, r7, #32
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	440a      	add	r2, r1
 8001e52:	320c      	adds	r2, #12
 8001e54:	6013      	str	r3, [r2, #0]
						xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <t_Menu+0xdcc>)
 8001e58:	6818      	ldr	r0, [r3, #0]
 8001e5a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f107 0220 	add.w	r2, r7, #32
 8001e66:	011b      	lsls	r3, r3, #4
 8001e68:	18d1      	adds	r1, r2, r3
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	f004 f908 	bl	8006084 <xQueueGenericSend>
						xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], blockForever);
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <t_Menu+0xddc>)
 8001e76:	6818      	ldr	r0, [r3, #0]
 8001e78:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f107 0220 	add.w	r2, r7, #32
 8001e84:	011b      	lsls	r3, r3, #4
 8001e86:	18d1      	adds	r1, r2, r3
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001e8e:	f004 f8f9 	bl	8006084 <xQueueGenericSend>

						usuario[currentM->userNo].accion = SCANN;
 8001e92:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f107 0220 	add.w	r2, r7, #32
 8001e9e:	011b      	lsls	r3, r3, #4
 8001ea0:	4413      	add	r3, r2
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	701a      	strb	r2, [r3, #0]

						usuario[currentM->userNo].id = global_id++;
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <t_Menu+0xdd8>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	4930      	ldr	r1, [pc, #192]	; (8001f70 <t_Menu+0xdd8>)
 8001eae:	600a      	str	r2, [r1, #0]
 8001eb0:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8001eb4:	6812      	ldr	r2, [r2, #0]
 8001eb6:	6812      	ldr	r2, [r2, #0]
 8001eb8:	f107 0120 	add.w	r1, r7, #32
 8001ebc:	0112      	lsls	r2, r2, #4
 8001ebe:	440a      	add	r2, r1
 8001ec0:	320c      	adds	r2, #12
 8001ec2:	6013      	str	r3, [r2, #0]
						xQueueSendToBack(reqAcceso_q, &usuario[currentM->userNo], blockForever);
 8001ec4:	4b27      	ldr	r3, [pc, #156]	; (8001f64 <t_Menu+0xdcc>)
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f107 0220 	add.w	r2, r7, #32
 8001ed4:	011b      	lsls	r3, r3, #4
 8001ed6:	18d1      	adds	r1, r2, r3
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f04f 32ff 	mov.w	r2, #4294967295
 8001ede:	f004 f8d1 	bl	8006084 <xQueueGenericSend>
						xQueueSendToBack(reqAcceso_aux_q, &usuario[currentM->userNo], blockForever);
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <t_Menu+0xddc>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f107 0220 	add.w	r2, r7, #32
 8001ef2:	011b      	lsls	r3, r3, #4
 8001ef4:	18d1      	adds	r1, r2, r3
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	f004 f8c2 	bl	8006084 <xQueueGenericSend>

						xQueueReceive(respAcceso_q, &usuario[currentM->userNo], blockForever);
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <t_Menu+0xde0>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f107 0220 	add.w	r2, r7, #32
 8001f10:	011b      	lsls	r3, r3, #4
 8001f12:	4413      	add	r3, r2
 8001f14:	f04f 32ff 	mov.w	r2, #4294967295
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f004 fa63 	bl	80063e4 <xQueueReceive>

						if(usuario[currentM->userNo].accion == ACC_SIN_ASIGNAR){
 8001f1e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f107 0220 	add.w	r2, r7, #32
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	4413      	add	r3, r2
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	2b0a      	cmp	r3, #10
 8001f32:	d125      	bne.n	8001f80 <t_Menu+0xde8>
							sprintf(lcdStr, "Usuario %u", currentM->userNo);
 8001f34:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	f107 0310 	add.w	r3, r7, #16
 8001f40:	4909      	ldr	r1, [pc, #36]	; (8001f68 <t_Menu+0xdd0>)
 8001f42:	4618      	mov	r0, r3
 8001f44:	f006 fcfc 	bl	8008940 <siprintf>
							display_Print(TEMPORARY_PRINTING, lcdStr, "Borrado");
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	; (8001f7c <t_Menu+0xde4>)
 8001f4e:	4619      	mov	r1, r3
 8001f50:	2001      	movs	r0, #1
 8001f52:	f7ff f8fb 	bl	800114c <display_Print>
 8001f56:	e018      	b.n	8001f8a <t_Menu+0xdf2>
 8001f58:	0800a0b8 	.word	0x0800a0b8
 8001f5c:	0800a0f4 	.word	0x0800a0f4
 8001f60:	0800a100 	.word	0x0800a100
 8001f64:	2000024c 	.word	0x2000024c
 8001f68:	0800a114 	.word	0x0800a114
 8001f6c:	0800a120 	.word	0x0800a120
 8001f70:	200000d8 	.word	0x200000d8
 8001f74:	20000400 	.word	0x20000400
 8001f78:	20000450 	.word	0x20000450
 8001f7c:	0800a12c 	.word	0x0800a12c
						}
						else
							display_Print(TEMPORARY_PRINTING, 0, "Error en borrado");
 8001f80:	4a3a      	ldr	r2, [pc, #232]	; (800206c <t_Menu+0xed4>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	2001      	movs	r0, #1
 8001f86:	f7ff f8e1 	bl	800114c <display_Print>
					    currentM = &claveUsuario1;
 8001f8a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f8e:	f207 5234 	addw	r2, r7, #1332	; 0x534
 8001f92:	601a      	str	r2, [r3, #0]
						display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 8001f94:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	1d19      	adds	r1, r3, #4
 8001f9c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	3314      	adds	r3, #20
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2006      	movs	r0, #6
 8001fa8:	f7ff f8d0 	bl	800114c <display_Print>

						borrarUsuario.state = 0;
 8001fac:	f507 73ba 	add.w	r3, r7, #372	; 0x174
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	64da      	str	r2, [r3, #76]	; 0x4c
						menu.privilege = USER;
 8001fb4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
						MEN_Last(&currentM);
 8001fbe:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7ff f8b2 	bl	800112c <MEN_Last>
 8001fc8:	e000      	b.n	8001fcc <t_Menu+0xe34>
							break;
 8001fca:	bf00      	nop
					}
				}
				reset_values();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001fd8:	f107 0310 	add.w	r3, r7, #16
 8001fdc:	4a24      	ldr	r2, [pc, #144]	; (8002070 <t_Menu+0xed8>)
 8001fde:	601a      	str	r2, [r3, #0]
				break;
 8001fe0:	e041      	b.n	8002066 <t_Menu+0xece>
			case CANCELAR:
				MEN_Cancelar(&currentM);
 8001fe2:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff f863 	bl	80010b2 <MEN_Cancelar>
				reset_values();
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <t_Menu+0xed8>)
 8001ffe:	601a      	str	r2, [r3, #0]
				menu.privilege = USER;
 8002000:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002004:	2200      	movs	r2, #0
 8002006:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 800200a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	1d19      	adds	r1, r3, #4
 8002012:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3314      	adds	r3, #20
 800201a:	461a      	mov	r2, r3
 800201c:	2006      	movs	r0, #6
 800201e:	f7ff f895 	bl	800114c <display_Print>

				break;
 8002022:	e020      	b.n	8002066 <t_Menu+0xece>

			case MAESTRA:
				MEN_Maestra(&currentM);
 8002024:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff f828 	bl	800107e <MEN_Maestra>
				reset_values();
 800202e:	2300      	movs	r3, #0
 8002030:	f8c7 3588 	str.w	r3, [r7, #1416]	; 0x588
 8002034:	2300      	movs	r3, #0
 8002036:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 800203a:	f107 0310 	add.w	r3, r7, #16
 800203e:	4a0c      	ldr	r2, [pc, #48]	; (8002070 <t_Menu+0xed8>)
 8002040:	601a      	str	r2, [r3, #0]
				menu.privilege = USER;
 8002042:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
				display_Print(CLEAR_PRINT, currentM->row1, currentM->row2);
 800204c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1d19      	adds	r1, r3, #4
 8002054:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	3314      	adds	r3, #20
 800205c:	461a      	mov	r2, r3
 800205e:	2006      	movs	r0, #6
 8002060:	f7ff f874 	bl	800114c <display_Print>
				break;
 8002064:	bf00      	nop
		xQueueReceive(tecla_q, &tecla, blockForever);
 8002066:	f7ff bade 	b.w	8001626 <t_Menu+0x48e>
 800206a:	bf00      	nop
 800206c:	0800a134 	.word	0x0800a134
 8002070:	003e3e3e 	.word	0x003e3e3e

08002074 <t_Display>:


//display----------------------------------------------------------------------------------------------------------------------------------------------------------------------


static void t_Display (void *pvParameters){
 8002074:	b580      	push	{r7, lr}
 8002076:	b094      	sub	sp, #80	; 0x50
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
	display_t display;
	uint8_t lastRow1[16], lastRow2[16];
	for(;;){
		if(strcmp(display.linea1,"\0") != 0) strcpy(lastRow1, display.linea1);
 800207c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <t_Display+0x22>
 8002084:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002088:	1c5a      	adds	r2, r3, #1
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4611      	mov	r1, r2
 8002090:	4618      	mov	r0, r3
 8002092:	f006 fc84 	bl	800899e <strcpy>
		if(strcmp(display.linea2,"\0") != 0) strcpy(lastRow2, display.linea2);
 8002096:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <t_Display+0x3e>
 800209e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020a2:	f103 0211 	add.w	r2, r3, #17
 80020a6:	f107 030c 	add.w	r3, r7, #12
 80020aa:	4611      	mov	r1, r2
 80020ac:	4618      	mov	r0, r3
 80020ae:	f006 fc76 	bl	800899e <strcpy>

		xQueueReceive(display_q, &display, blockForever);
 80020b2:	4b66      	ldr	r3, [pc, #408]	; (800224c <t_Display+0x1d8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80020ba:	f04f 32ff 	mov.w	r2, #4294967295
 80020be:	4618      	mov	r0, r3
 80020c0:	f004 f990 	bl	80063e4 <xQueueReceive>
		switch(display.accion){
 80020c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80020c8:	2b06      	cmp	r3, #6
 80020ca:	f200 80ae 	bhi.w	800222a <t_Display+0x1b6>
 80020ce:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <t_Display+0x60>)
 80020d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d4:	080020f1 	.word	0x080020f1
 80020d8:	0800211b 	.word	0x0800211b
 80020dc:	08002179 	.word	0x08002179
 80020e0:	080021d7 	.word	0x080021d7
 80020e4:	080021dd 	.word	0x080021dd
 80020e8:	080021ed 	.word	0x080021ed
 80020ec:	080021fd 	.word	0x080021fd
			case PRINT:
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 80020f0:	2100      	movs	r1, #0
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7fe fdfa 	bl	8000cec <HD44780_SetCursor>
 80020f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80020fc:	3301      	adds	r3, #1
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fe65 	bl	8000dce <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002104:	2101      	movs	r1, #1
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fdf0 	bl	8000cec <HD44780_SetCursor>
 800210c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002110:	3311      	adds	r3, #17
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fe5b 	bl	8000dce <HD44780_PrintStr>
				}
				break;
 8002118:	e097      	b.n	800224a <t_Display+0x1d6>
			case TEMPORARY_PRINTING:
				lcd_clear();
 800211a:	f7fe fdd1 	bl	8000cc0 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 800211e:	2100      	movs	r1, #0
 8002120:	2000      	movs	r0, #0
 8002122:	f7fe fde3 	bl	8000cec <HD44780_SetCursor>
 8002126:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800212a:	3301      	adds	r3, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe fe4e 	bl	8000dce <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002132:	2101      	movs	r1, #1
 8002134:	2000      	movs	r0, #0
 8002136:	f7fe fdd9 	bl	8000cec <HD44780_SetCursor>
 800213a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800213e:	3311      	adds	r3, #17
 8002140:	4618      	mov	r0, r3
 8002142:	f7fe fe44 	bl	8000dce <HD44780_PrintStr>
				}
				vTaskDelay(sleep_2s);
 8002146:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800214a:	f004 fd47 	bl	8006bdc <vTaskDelay>
				lcd_clear();
 800214e:	f7fe fdb7 	bl	8000cc0 <HD44780_Clear>
				lcd_msgPrint(0, 0, lastRow1);
 8002152:	2100      	movs	r1, #0
 8002154:	2000      	movs	r0, #0
 8002156:	f7fe fdc9 	bl	8000cec <HD44780_SetCursor>
 800215a:	f107 031c 	add.w	r3, r7, #28
 800215e:	4618      	mov	r0, r3
 8002160:	f7fe fe35 	bl	8000dce <HD44780_PrintStr>
				lcd_msgPrint(0, 1, lastRow2);
 8002164:	2101      	movs	r1, #1
 8002166:	2000      	movs	r0, #0
 8002168:	f7fe fdc0 	bl	8000cec <HD44780_SetCursor>
 800216c:	f107 030c 	add.w	r3, r7, #12
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fe2c 	bl	8000dce <HD44780_PrintStr>
				break;
 8002176:	e068      	b.n	800224a <t_Display+0x1d6>
			case TEMPORARY_PRINTING_10s:
				lcd_clear();
 8002178:	f7fe fda2 	bl	8000cc0 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 800217c:	2100      	movs	r1, #0
 800217e:	2000      	movs	r0, #0
 8002180:	f7fe fdb4 	bl	8000cec <HD44780_SetCursor>
 8002184:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002188:	3301      	adds	r3, #1
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fe1f 	bl	8000dce <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002190:	2101      	movs	r1, #1
 8002192:	2000      	movs	r0, #0
 8002194:	f7fe fdaa 	bl	8000cec <HD44780_SetCursor>
 8002198:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800219c:	3311      	adds	r3, #17
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fe15 	bl	8000dce <HD44780_PrintStr>
				}
				vTaskDelay(sleep_10s);
 80021a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80021a8:	f004 fd18 	bl	8006bdc <vTaskDelay>
				lcd_clear();
 80021ac:	f7fe fd88 	bl	8000cc0 <HD44780_Clear>
				lcd_msgPrint(0, 0, lastRow1);
 80021b0:	2100      	movs	r1, #0
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fe fd9a 	bl	8000cec <HD44780_SetCursor>
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fe06 	bl	8000dce <HD44780_PrintStr>
				lcd_msgPrint(0, 1, lastRow2);
 80021c2:	2101      	movs	r1, #1
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7fe fd91 	bl	8000cec <HD44780_SetCursor>
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe fdfd 	bl	8000dce <HD44780_PrintStr>
				break;
 80021d4:	e039      	b.n	800224a <t_Display+0x1d6>
			case CLEAR:
				lcd_clear();
 80021d6:	f7fe fd73 	bl	8000cc0 <HD44780_Clear>
				break;
 80021da:	e036      	b.n	800224a <t_Display+0x1d6>
			case CLEAR_1:
				lcd_msgPrint(0, 0, "                ");
 80021dc:	2100      	movs	r1, #0
 80021de:	2000      	movs	r0, #0
 80021e0:	f7fe fd84 	bl	8000cec <HD44780_SetCursor>
 80021e4:	481a      	ldr	r0, [pc, #104]	; (8002250 <t_Display+0x1dc>)
 80021e6:	f7fe fdf2 	bl	8000dce <HD44780_PrintStr>
				break;
 80021ea:	e02e      	b.n	800224a <t_Display+0x1d6>
			case CLEAR_2:
				lcd_msgPrint(0, 1, "                ");
 80021ec:	2101      	movs	r1, #1
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7fe fd7c 	bl	8000cec <HD44780_SetCursor>
 80021f4:	4816      	ldr	r0, [pc, #88]	; (8002250 <t_Display+0x1dc>)
 80021f6:	f7fe fdea 	bl	8000dce <HD44780_PrintStr>
				break;
 80021fa:	e026      	b.n	800224a <t_Display+0x1d6>
			case CLEAR_PRINT:
				lcd_clear();
 80021fc:	f7fe fd60 	bl	8000cc0 <HD44780_Clear>
				if(display.linea1 != 0){
					lcd_msgPrint(0, 0, display.linea1);
 8002200:	2100      	movs	r1, #0
 8002202:	2000      	movs	r0, #0
 8002204:	f7fe fd72 	bl	8000cec <HD44780_SetCursor>
 8002208:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800220c:	3301      	adds	r3, #1
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fddd 	bl	8000dce <HD44780_PrintStr>
				}
				if(display.linea2 != 0){
					lcd_msgPrint(0, 1, display.linea2);
 8002214:	2101      	movs	r1, #1
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe fd68 	bl	8000cec <HD44780_SetCursor>
 800221c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002220:	3311      	adds	r3, #17
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe fdd3 	bl	8000dce <HD44780_PrintStr>
				}
				break;
 8002228:	e00f      	b.n	800224a <t_Display+0x1d6>
			default:
				lcd_clear();
 800222a:	f7fe fd49 	bl	8000cc0 <HD44780_Clear>
				lcd_msgPrint(0, 1, "ERROR 1");
 800222e:	2101      	movs	r1, #1
 8002230:	2000      	movs	r0, #0
 8002232:	f7fe fd5b 	bl	8000cec <HD44780_SetCursor>
 8002236:	4807      	ldr	r0, [pc, #28]	; (8002254 <t_Display+0x1e0>)
 8002238:	f7fe fdc9 	bl	8000dce <HD44780_PrintStr>
				vTaskDelay(sleep_1s);
 800223c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002240:	f004 fccc 	bl	8006bdc <vTaskDelay>
				lcd_clear();
 8002244:	f7fe fd3c 	bl	8000cc0 <HD44780_Clear>
				break;
 8002248:	bf00      	nop
		if(strcmp(display.linea1,"\0") != 0) strcpy(lastRow1, display.linea1);
 800224a:	e717      	b.n	800207c <t_Display+0x8>
 800224c:	20000458 	.word	0x20000458
 8002250:	0800a148 	.word	0x0800a148
 8002254:	0800a15c 	.word	0x0800a15c

08002258 <t_Flash>:
}

//flash----------------------------------------------------------------------------------------------------------------------------------------------------------------------


static void t_Flash (void *pvParameters){
 8002258:	b580      	push	{r7, lr}
 800225a:	b0a8      	sub	sp, #160	; 0xa0
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
	 * la mitad de FLASH_BUFFER_SIZE sera el numero maximo de usuarios permitidos. FLASH_BUFFER_SIZE debe ser un numero par.
	 * el maximo teorico de usuarios pemitidos es 512 (la mitad del tamaño de una pagina de la memoria flash)
	 *
	 */

	uint32_t index = 0, nroUsuario;
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	usuario_t value;
	uint32_t buffer[FLASH_BUFFER_SIZE];

	for(;;){
		xQueueReceive(flashcmd_q, &value, portMAX_DELAY);
 8002266:	4b35      	ldr	r3, [pc, #212]	; (800233c <t_Flash+0xe4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f107 0188 	add.w	r1, r7, #136	; 0x88
 800226e:	f04f 32ff 	mov.w	r2, #4294967295
 8002272:	4618      	mov	r0, r3
 8002274:	f004 f8b6 	bl	80063e4 <xQueueReceive>
		switch(value.accion){
 8002278:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <t_Flash+0x2e>
 8002280:	2b01      	cmp	r3, #1
 8002282:	d02c      	beq.n	80022de <t_Flash+0x86>
			buffer[index + 1] = value.clave;					//se escrive el codigo en el indice impar

			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
			break;
		default:
			break;
 8002284:	e058      	b.n	8002338 <t_Flash+0xe0>
			index = (2 * (value.nroUsuario));							//se calcula el indice del usuario solicitado
 8002286:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);	//se realiza la lectura de la memoria
 8002290:	f107 0308 	add.w	r3, r7, #8
 8002294:	2220      	movs	r2, #32
 8002296:	4619      	mov	r1, r3
 8002298:	4829      	ldr	r0, [pc, #164]	; (8002340 <t_Flash+0xe8>)
 800229a:	f7fe fc6f 	bl	8000b7c <Flash_Read_Data>
			value.nroUsuario = buffer[index];								//se asigna a la estructura el nro de usuario, si esta vacio se asigna "SIN_ASIGNAR"
 800229e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80022a8:	4413      	add	r3, r2
 80022aa:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
			value.clave = buffer[index + 1];								//se asigna a la estructura de usuario la clave correspondiente
 80022b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b8:	3301      	adds	r3, #1
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80022c0:	4413      	add	r3, r2
 80022c2:	f853 3c98 	ldr.w	r3, [r3, #-152]
 80022c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			xQueueSend(flashdata_q,&value,portMAX_DELAY);
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <t_Flash+0xec>)
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	f107 0188 	add.w	r1, r7, #136	; 0x88
 80022d2:	2300      	movs	r3, #0
 80022d4:	f04f 32ff 	mov.w	r2, #4294967295
 80022d8:	f003 fed4 	bl	8006084 <xQueueGenericSend>
			break;
 80022dc:	e02c      	b.n	8002338 <t_Flash+0xe0>
			index = (value.nroUsuario)*2;
 80022de:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
			nroUsuario = value.nroUsuario;
 80022e8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80022ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
			Flash_Read_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	2220      	movs	r2, #32
 80022f6:	4619      	mov	r1, r3
 80022f8:	4811      	ldr	r0, [pc, #68]	; (8002340 <t_Flash+0xe8>)
 80022fa:	f7fe fc3f 	bl	8000b7c <Flash_Read_Data>
			buffer[index] = nroUsuario;				//se escrive el numero de usuario en el indice par
 80022fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002308:	4413      	add	r3, r2
 800230a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800230e:	f843 2c98 	str.w	r2, [r3, #-152]
			buffer[index + 1] = value.clave;					//se escrive el codigo en el indice impar
 8002312:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002316:	3301      	adds	r3, #1
 8002318:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002322:	440b      	add	r3, r1
 8002324:	f843 2c98 	str.w	r2, [r3, #-152]
			Flash_Write_Data(PAGE_ADDR_1, buffer, FLASH_BUFFER_SIZE);
 8002328:	f107 0308 	add.w	r3, r7, #8
 800232c:	2220      	movs	r2, #32
 800232e:	4619      	mov	r1, r3
 8002330:	4803      	ldr	r0, [pc, #12]	; (8002340 <t_Flash+0xe8>)
 8002332:	f7fe fbc9 	bl	8000ac8 <Flash_Write_Data>
			break;
 8002336:	bf00      	nop
		xQueueReceive(flashcmd_q, &value, portMAX_DELAY);
 8002338:	e795      	b.n	8002266 <t_Flash+0xe>
 800233a:	bf00      	nop
 800233c:	20000244 	.word	0x20000244
 8002340:	0801fc00 	.word	0x0801fc00
 8002344:	20000248 	.word	0x20000248

08002348 <t_ControlAcceso>:
	}
}

//control de acceso----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_ControlAcceso (void *pvParameters){
 8002348:	b580      	push	{r7, lr}
 800234a:	b0b8      	sub	sp, #224	; 0xe0
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
	usuario_t usuario[CANT_MAX_USUARIOS], usuarioAux;
	nroUsuario_t nroUsuario;
	actuador_t actuador;

	for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002356:	e00d      	b.n	8002374 <t_ControlAcceso+0x2c>
		usuario[i].intentosDisp = CANT_MAX_INTENTOS;
 8002358:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002362:	4413      	add	r3, r2
 8002364:	3bb4      	subs	r3, #180	; 0xb4
 8002366:	2203      	movs	r2, #3
 8002368:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 800236a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800236e:	3301      	adds	r3, #1
 8002370:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002378:	2b0a      	cmp	r3, #10
 800237a:	d9ed      	bls.n	8002358 <t_ControlAcceso+0x10>
	}

	for(;;){
		if(xQueueReceive(reqAcceso_q, &usuarioAux, blockForever) == pdPASS){
 800237c:	4ba4      	ldr	r3, [pc, #656]	; (8002610 <t_ControlAcceso+0x2c8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f107 0114 	add.w	r1, r7, #20
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	4618      	mov	r0, r3
 800238a:	f004 f82b 	bl	80063e4 <xQueueReceive>
 800238e:	4603      	mov	r3, r0
 8002390:	2b01      	cmp	r3, #1
 8002392:	f040 8269 	bne.w	8002868 <t_ControlAcceso+0x520>

			nroUsuario = usuarioAux.nroUsuario;
 8002396:	7d7b      	ldrb	r3, [r7, #21]
 8002398:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
			usuario[nroUsuario].nroUsuario = usuarioAux.nroUsuario;
 800239c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80023a0:	7d7a      	ldrb	r2, [r7, #21]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80023a8:	440b      	add	r3, r1
 80023aa:	3bbb      	subs	r3, #187	; 0xbb
 80023ac:	701a      	strb	r2, [r3, #0]
			usuario[nroUsuario].clave = usuarioAux.clave;
 80023ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	011b      	lsls	r3, r3, #4
 80023b6:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80023ba:	440b      	add	r3, r1
 80023bc:	3bb8      	subs	r3, #184	; 0xb8
 80023be:	601a      	str	r2, [r3, #0]
			usuario[nroUsuario].accion = usuarioAux.accion;
 80023c0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80023c4:	7d3a      	ldrb	r2, [r7, #20]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80023cc:	440b      	add	r3, r1
 80023ce:	3bbc      	subs	r3, #188	; 0xbc
 80023d0:	701a      	strb	r2, [r3, #0]

			switch(usuario[nroUsuario].accion){
 80023d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80023dc:	4413      	add	r3, r2
 80023de:	3bbc      	subs	r3, #188	; 0xbc
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	f000 81e3 	beq.w	80027ae <t_ControlAcceso+0x466>
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	f300 823f 	bgt.w	800286c <t_ControlAcceso+0x524>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d003      	beq.n	80023fa <t_ControlAcceso+0xb2>
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	f000 81cd 	beq.w	8002792 <t_ControlAcceso+0x44a>
					usuario[nroUsuario].id = global_id++;
					xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
					xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], blockForever);
					break;
				default:
					break;
 80023f8:	e238      	b.n	800286c <t_ControlAcceso+0x524>
					if(nroUsuario == MAESTRO){
 80023fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 8097 	bne.w	8002532 <t_ControlAcceso+0x1ea>
						usuario[nroUsuario].accion = READ;
 8002404:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800240e:	4413      	add	r3, r2
 8002410:	3bbc      	subs	r3, #188	; 0xbc
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
						xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 8002416:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <t_ControlAcceso+0x2cc>)
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800241e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	18d1      	adds	r1, r2, r3
 8002426:	2300      	movs	r3, #0
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	f003 fe2a 	bl	8006084 <xQueueGenericSend>
						xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 8002430:	4b79      	ldr	r3, [pc, #484]	; (8002618 <t_ControlAcceso+0x2d0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f107 0114 	add.w	r1, r7, #20
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	4618      	mov	r0, r3
 800243e:	f003 ffd1 	bl	80063e4 <xQueueReceive>
						if(usuarioAux.clave == usuario[nroUsuario].clave){
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800244e:	440b      	add	r3, r1
 8002450:	3bb8      	subs	r3, #184	; 0xb8
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d123      	bne.n	80024a0 <t_ControlAcceso+0x158>
							usuario[nroUsuario].accion = ACC_OK;
 8002458:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800245c:	011b      	lsls	r3, r3, #4
 800245e:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002462:	4413      	add	r3, r2
 8002464:	3bbc      	subs	r3, #188	; 0xbc
 8002466:	2205      	movs	r2, #5
 8002468:	701a      	strb	r2, [r3, #0]
							actuador.tipo = PUERTA;
 800246a:	2301      	movs	r3, #1
 800246c:	733b      	strb	r3, [r7, #12]
							actuador.accion = ACC_MASTER;
 800246e:	230c      	movs	r3, #12
 8002470:	737b      	strb	r3, [r7, #13]
							for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 8002472:	2300      	movs	r3, #0
 8002474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002478:	e00d      	b.n	8002496 <t_ControlAcceso+0x14e>
								usuario[i].intentosDisp = CANT_MAX_INTENTOS;
 800247a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002484:	4413      	add	r3, r2
 8002486:	3bb4      	subs	r3, #180	; 0xb4
 8002488:	2203      	movs	r2, #3
 800248a:	601a      	str	r2, [r3, #0]
							for(uint32_t i = 0; i < CANT_MAX_USUARIOS; i++){
 800248c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002490:	3301      	adds	r3, #1
 8002492:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002496:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800249a:	2b0a      	cmp	r3, #10
 800249c:	d9ed      	bls.n	800247a <t_ControlAcceso+0x132>
 800249e:	e008      	b.n	80024b2 <t_ControlAcceso+0x16a>
							usuario[nroUsuario].accion = ACC_ERROR;
 80024a0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80024aa:	4413      	add	r3, r2
 80024ac:	3bbc      	subs	r3, #188	; 0xbc
 80024ae:	2207      	movs	r2, #7
 80024b0:	701a      	strb	r2, [r3, #0]
						actuador.id = global_id++;
 80024b2:	4b5a      	ldr	r3, [pc, #360]	; (800261c <t_ControlAcceso+0x2d4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	4958      	ldr	r1, [pc, #352]	; (800261c <t_ControlAcceso+0x2d4>)
 80024ba:	600a      	str	r2, [r1, #0]
 80024bc:	613b      	str	r3, [r7, #16]
						xQueueSend(actuador_q, &actuador, blockForever);
 80024be:	4b58      	ldr	r3, [pc, #352]	; (8002620 <t_ControlAcceso+0x2d8>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f107 010c 	add.w	r1, r7, #12
 80024c6:	2300      	movs	r3, #0
 80024c8:	f04f 32ff 	mov.w	r2, #4294967295
 80024cc:	f003 fdda 	bl	8006084 <xQueueGenericSend>
						xQueueSendToBack(actuador_aux_q, &actuador, blockForever);
 80024d0:	4b54      	ldr	r3, [pc, #336]	; (8002624 <t_ControlAcceso+0x2dc>)
 80024d2:	6818      	ldr	r0, [r3, #0]
 80024d4:	f107 010c 	add.w	r1, r7, #12
 80024d8:	2300      	movs	r3, #0
 80024da:	f04f 32ff 	mov.w	r2, #4294967295
 80024de:	f003 fdd1 	bl	8006084 <xQueueGenericSend>
						usuario[nroUsuario].id = global_id++;
 80024e2:	4b4e      	ldr	r3, [pc, #312]	; (800261c <t_ControlAcceso+0x2d4>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	494c      	ldr	r1, [pc, #304]	; (800261c <t_ControlAcceso+0x2d4>)
 80024ea:	600a      	str	r2, [r1, #0]
 80024ec:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 80024f0:	0112      	lsls	r2, r2, #4
 80024f2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80024f6:	440a      	add	r2, r1
 80024f8:	3ab0      	subs	r2, #176	; 0xb0
 80024fa:	6013      	str	r3, [r2, #0]
						xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 80024fc:	4b4a      	ldr	r3, [pc, #296]	; (8002628 <t_ControlAcceso+0x2e0>)
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002504:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	18d1      	adds	r1, r2, r3
 800250c:	2300      	movs	r3, #0
 800250e:	f04f 32ff 	mov.w	r2, #4294967295
 8002512:	f003 fdb7 	bl	8006084 <xQueueGenericSend>
						xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], blockForever);
 8002516:	4b45      	ldr	r3, [pc, #276]	; (800262c <t_ControlAcceso+0x2e4>)
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800251e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	18d1      	adds	r1, r2, r3
 8002526:	2300      	movs	r3, #0
 8002528:	f04f 32ff 	mov.w	r2, #4294967295
 800252c:	f003 fdaa 	bl	8006084 <xQueueGenericSend>
					break;
 8002530:	e19e      	b.n	8002870 <t_ControlAcceso+0x528>
					else if(nroUsuario != MAESTRO && nroUsuario != SIN_ASIGNAR){
 8002532:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 819a 	beq.w	8002870 <t_ControlAcceso+0x528>
 800253c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002540:	2b0b      	cmp	r3, #11
 8002542:	f000 8195 	beq.w	8002870 <t_ControlAcceso+0x528>
						if(usuario[nroUsuario].intentosDisp != SIN_INTENTOS_DISP){
 8002546:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002550:	4413      	add	r3, r2
 8002552:	3bb4      	subs	r3, #180	; 0xb4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 80cf 	beq.w	80026fa <t_ControlAcceso+0x3b2>
							usuario[nroUsuario].accion = READ;
 800255c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002560:	011b      	lsls	r3, r3, #4
 8002562:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002566:	4413      	add	r3, r2
 8002568:	3bbc      	subs	r3, #188	; 0xbc
 800256a:	2200      	movs	r2, #0
 800256c:	701a      	strb	r2, [r3, #0]
							xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 800256e:	4b29      	ldr	r3, [pc, #164]	; (8002614 <t_ControlAcceso+0x2cc>)
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002576:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	18d1      	adds	r1, r2, r3
 800257e:	2300      	movs	r3, #0
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	f003 fd7e 	bl	8006084 <xQueueGenericSend>
							xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <t_ControlAcceso+0x2d0>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f107 0114 	add.w	r1, r7, #20
 8002590:	f04f 32ff 	mov.w	r2, #4294967295
 8002594:	4618      	mov	r0, r3
 8002596:	f003 ff25 	bl	80063e4 <xQueueReceive>
							if(usuarioAux.clave == usuario[nroUsuario].clave){
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80025a6:	440b      	add	r3, r1
 80025a8:	3bb8      	subs	r3, #184	; 0xb8
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d13f      	bne.n	8002630 <t_ControlAcceso+0x2e8>
								usuario[nroUsuario].accion = ACC_OK;
 80025b0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80025b4:	011b      	lsls	r3, r3, #4
 80025b6:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80025ba:	4413      	add	r3, r2
 80025bc:	3bbc      	subs	r3, #188	; 0xbc
 80025be:	2205      	movs	r2, #5
 80025c0:	701a      	strb	r2, [r3, #0]
								actuador.tipo = PUERTA;
 80025c2:	2301      	movs	r3, #1
 80025c4:	733b      	strb	r3, [r7, #12]
								actuador.accion = ACC_OK;
 80025c6:	2305      	movs	r3, #5
 80025c8:	737b      	strb	r3, [r7, #13]
								usuario[nroUsuario].intentosDisp = CANT_MAX_INTENTOS;
 80025ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80025d4:	4413      	add	r3, r2
 80025d6:	3bb4      	subs	r3, #180	; 0xb4
 80025d8:	2203      	movs	r2, #3
 80025da:	601a      	str	r2, [r3, #0]
								actuador.id = global_id++;
 80025dc:	4b0f      	ldr	r3, [pc, #60]	; (800261c <t_ControlAcceso+0x2d4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	490e      	ldr	r1, [pc, #56]	; (800261c <t_ControlAcceso+0x2d4>)
 80025e4:	600a      	str	r2, [r1, #0]
 80025e6:	613b      	str	r3, [r7, #16]
								xQueueSend(actuador_q, &actuador, blockForever);
 80025e8:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <t_ControlAcceso+0x2d8>)
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	f107 010c 	add.w	r1, r7, #12
 80025f0:	2300      	movs	r3, #0
 80025f2:	f04f 32ff 	mov.w	r2, #4294967295
 80025f6:	f003 fd45 	bl	8006084 <xQueueGenericSend>
								xQueueSendToBack(actuador_aux_q, &actuador, blockForever);
 80025fa:	4b0a      	ldr	r3, [pc, #40]	; (8002624 <t_ControlAcceso+0x2dc>)
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	f107 010c 	add.w	r1, r7, #12
 8002602:	2300      	movs	r3, #0
 8002604:	f04f 32ff 	mov.w	r2, #4294967295
 8002608:	f003 fd3c 	bl	8006084 <xQueueGenericSend>
 800260c:	e04d      	b.n	80026aa <t_ControlAcceso+0x362>
 800260e:	bf00      	nop
 8002610:	2000024c 	.word	0x2000024c
 8002614:	20000244 	.word	0x20000244
 8002618:	20000248 	.word	0x20000248
 800261c:	200000d8 	.word	0x200000d8
 8002620:	2000044c 	.word	0x2000044c
 8002624:	200002f8 	.word	0x200002f8
 8002628:	20000450 	.word	0x20000450
 800262c:	20000454 	.word	0x20000454
								usuario[nroUsuario].accion = ACC_DENEGADO;
 8002630:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800263a:	4413      	add	r3, r2
 800263c:	3bbc      	subs	r3, #188	; 0xbc
 800263e:	2206      	movs	r2, #6
 8002640:	701a      	strb	r2, [r3, #0]
								usuario[nroUsuario].intentosDisp--;
 8002642:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002646:	011a      	lsls	r2, r3, #4
 8002648:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800264c:	440a      	add	r2, r1
 800264e:	3ab4      	subs	r2, #180	; 0xb4
 8002650:	6812      	ldr	r2, [r2, #0]
 8002652:	3a01      	subs	r2, #1
 8002654:	011b      	lsls	r3, r3, #4
 8002656:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800265a:	440b      	add	r3, r1
 800265c:	3bb4      	subs	r3, #180	; 0xb4
 800265e:	601a      	str	r2, [r3, #0]
								if(usuario[nroUsuario].intentosDisp == SIN_INTENTOS_DISP){
 8002660:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 800266a:	4413      	add	r3, r2
 800266c:	3bb4      	subs	r3, #180	; 0xb4
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d11a      	bne.n	80026aa <t_ControlAcceso+0x362>
									actuador.tipo = PUERTA;
 8002674:	2301      	movs	r3, #1
 8002676:	733b      	strb	r3, [r7, #12]
									actuador.accion = ACC_DENEGADO;
 8002678:	2306      	movs	r3, #6
 800267a:	737b      	strb	r3, [r7, #13]
									actuador.id = global_id++;
 800267c:	4b7d      	ldr	r3, [pc, #500]	; (8002874 <t_ControlAcceso+0x52c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1c5a      	adds	r2, r3, #1
 8002682:	497c      	ldr	r1, [pc, #496]	; (8002874 <t_ControlAcceso+0x52c>)
 8002684:	600a      	str	r2, [r1, #0]
 8002686:	613b      	str	r3, [r7, #16]
									xQueueSend(actuador_q, &actuador, nonBlocking);
 8002688:	4b7b      	ldr	r3, [pc, #492]	; (8002878 <t_ControlAcceso+0x530>)
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	f107 010c 	add.w	r1, r7, #12
 8002690:	2300      	movs	r3, #0
 8002692:	2200      	movs	r2, #0
 8002694:	f003 fcf6 	bl	8006084 <xQueueGenericSend>
									xQueueSendToBack(actuador_aux_q, &actuador, blockForever);
 8002698:	4b78      	ldr	r3, [pc, #480]	; (800287c <t_ControlAcceso+0x534>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	f107 010c 	add.w	r1, r7, #12
 80026a0:	2300      	movs	r3, #0
 80026a2:	f04f 32ff 	mov.w	r2, #4294967295
 80026a6:	f003 fced 	bl	8006084 <xQueueGenericSend>
							usuario[nroUsuario].id = global_id++;
 80026aa:	4b72      	ldr	r3, [pc, #456]	; (8002874 <t_ControlAcceso+0x52c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	4970      	ldr	r1, [pc, #448]	; (8002874 <t_ControlAcceso+0x52c>)
 80026b2:	600a      	str	r2, [r1, #0]
 80026b4:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 80026b8:	0112      	lsls	r2, r2, #4
 80026ba:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80026be:	440a      	add	r2, r1
 80026c0:	3ab0      	subs	r2, #176	; 0xb0
 80026c2:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 80026c4:	4b6e      	ldr	r3, [pc, #440]	; (8002880 <t_ControlAcceso+0x538>)
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80026cc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026d0:	011b      	lsls	r3, r3, #4
 80026d2:	18d1      	adds	r1, r2, r3
 80026d4:	2300      	movs	r3, #0
 80026d6:	f04f 32ff 	mov.w	r2, #4294967295
 80026da:	f003 fcd3 	bl	8006084 <xQueueGenericSend>
							xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], blockForever);
 80026de:	4b69      	ldr	r3, [pc, #420]	; (8002884 <t_ControlAcceso+0x53c>)
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80026e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	18d1      	adds	r1, r2, r3
 80026ee:	2300      	movs	r3, #0
 80026f0:	f04f 32ff 	mov.w	r2, #4294967295
 80026f4:	f003 fcc6 	bl	8006084 <xQueueGenericSend>
					break;
 80026f8:	e0ba      	b.n	8002870 <t_ControlAcceso+0x528>
							usuario[nroUsuario].accion = ACC_DENEGADO;
 80026fa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002704:	4413      	add	r3, r2
 8002706:	3bbc      	subs	r3, #188	; 0xbc
 8002708:	2206      	movs	r2, #6
 800270a:	701a      	strb	r2, [r3, #0]
							actuador.tipo = PUERTA;
 800270c:	2301      	movs	r3, #1
 800270e:	733b      	strb	r3, [r7, #12]
							actuador.accion = ACC_DENEGADO;
 8002710:	2306      	movs	r3, #6
 8002712:	737b      	strb	r3, [r7, #13]
							actuador.id = global_id++;
 8002714:	4b57      	ldr	r3, [pc, #348]	; (8002874 <t_ControlAcceso+0x52c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	1c5a      	adds	r2, r3, #1
 800271a:	4956      	ldr	r1, [pc, #344]	; (8002874 <t_ControlAcceso+0x52c>)
 800271c:	600a      	str	r2, [r1, #0]
 800271e:	613b      	str	r3, [r7, #16]
							xQueueSend(actuador_q, &actuador, nonBlocking);
 8002720:	4b55      	ldr	r3, [pc, #340]	; (8002878 <t_ControlAcceso+0x530>)
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	f107 010c 	add.w	r1, r7, #12
 8002728:	2300      	movs	r3, #0
 800272a:	2200      	movs	r2, #0
 800272c:	f003 fcaa 	bl	8006084 <xQueueGenericSend>
							xQueueSendToBack(actuador_aux_q, &actuador, blockForever);
 8002730:	4b52      	ldr	r3, [pc, #328]	; (800287c <t_ControlAcceso+0x534>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	f107 010c 	add.w	r1, r7, #12
 8002738:	2300      	movs	r3, #0
 800273a:	f04f 32ff 	mov.w	r2, #4294967295
 800273e:	f003 fca1 	bl	8006084 <xQueueGenericSend>
							usuario[nroUsuario].id = global_id++;
 8002742:	4b4c      	ldr	r3, [pc, #304]	; (8002874 <t_ControlAcceso+0x52c>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	494a      	ldr	r1, [pc, #296]	; (8002874 <t_ControlAcceso+0x52c>)
 800274a:	600a      	str	r2, [r1, #0]
 800274c:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8002756:	440a      	add	r2, r1
 8002758:	3ab0      	subs	r2, #176	; 0xb0
 800275a:	6013      	str	r3, [r2, #0]
							xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 800275c:	4b48      	ldr	r3, [pc, #288]	; (8002880 <t_ControlAcceso+0x538>)
 800275e:	6818      	ldr	r0, [r3, #0]
 8002760:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002764:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	18d1      	adds	r1, r2, r3
 800276c:	2300      	movs	r3, #0
 800276e:	f04f 32ff 	mov.w	r2, #4294967295
 8002772:	f003 fc87 	bl	8006084 <xQueueGenericSend>
							xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], blockForever);
 8002776:	4b43      	ldr	r3, [pc, #268]	; (8002884 <t_ControlAcceso+0x53c>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800277e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	18d1      	adds	r1, r2, r3
 8002786:	2300      	movs	r3, #0
 8002788:	f04f 32ff 	mov.w	r2, #4294967295
 800278c:	f003 fc7a 	bl	8006084 <xQueueGenericSend>
					break;
 8002790:	e06e      	b.n	8002870 <t_ControlAcceso+0x528>
					xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 8002792:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <t_ControlAcceso+0x540>)
 8002794:	6818      	ldr	r0, [r3, #0]
 8002796:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800279a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	18d1      	adds	r1, r2, r3
 80027a2:	2300      	movs	r3, #0
 80027a4:	f04f 32ff 	mov.w	r2, #4294967295
 80027a8:	f003 fc6c 	bl	8006084 <xQueueGenericSend>
					break;
 80027ac:	e061      	b.n	8002872 <t_ControlAcceso+0x52a>
					usuario[nroUsuario].accion = READ;
 80027ae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80027b8:	4413      	add	r3, r2
 80027ba:	3bbc      	subs	r3, #188	; 0xbc
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
					xQueueSend(flashcmd_q, &usuario[nroUsuario], blockForever);
 80027c0:	4b31      	ldr	r3, [pc, #196]	; (8002888 <t_ControlAcceso+0x540>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80027c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	18d1      	adds	r1, r2, r3
 80027d0:	2300      	movs	r3, #0
 80027d2:	f04f 32ff 	mov.w	r2, #4294967295
 80027d6:	f003 fc55 	bl	8006084 <xQueueGenericSend>
					xQueueReceive(flashdata_q, &usuarioAux, blockForever);
 80027da:	4b2c      	ldr	r3, [pc, #176]	; (800288c <t_ControlAcceso+0x544>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f107 0114 	add.w	r1, r7, #20
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
 80027e6:	4618      	mov	r0, r3
 80027e8:	f003 fdfc 	bl	80063e4 <xQueueReceive>
					if(usuarioAux.clave == 0)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <t_ControlAcceso+0x4be>
						usuario[nroUsuario].accion = ACC_SIN_ASIGNAR;
 80027f2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80027fc:	4413      	add	r3, r2
 80027fe:	3bbc      	subs	r3, #188	; 0xbc
 8002800:	220a      	movs	r2, #10
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	e008      	b.n	8002818 <t_ControlAcceso+0x4d0>
						usuario[nroUsuario].accion = ACC_ASIGNADO;
 8002806:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8002810:	4413      	add	r3, r2
 8002812:	3bbc      	subs	r3, #188	; 0xbc
 8002814:	220b      	movs	r2, #11
 8002816:	701a      	strb	r2, [r3, #0]
					usuario[nroUsuario].id = global_id++;
 8002818:	4b16      	ldr	r3, [pc, #88]	; (8002874 <t_ControlAcceso+0x52c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	4915      	ldr	r1, [pc, #84]	; (8002874 <t_ControlAcceso+0x52c>)
 8002820:	600a      	str	r2, [r1, #0]
 8002822:	f897 20d7 	ldrb.w	r2, [r7, #215]	; 0xd7
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800282c:	440a      	add	r2, r1
 800282e:	3ab0      	subs	r2, #176	; 0xb0
 8002830:	6013      	str	r3, [r2, #0]
					xQueueSendToBack(respAcceso_q, &usuario[nroUsuario], blockForever);
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <t_ControlAcceso+0x538>)
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 800283a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	18d1      	adds	r1, r2, r3
 8002842:	2300      	movs	r3, #0
 8002844:	f04f 32ff 	mov.w	r2, #4294967295
 8002848:	f003 fc1c 	bl	8006084 <xQueueGenericSend>
					xQueueSendToBack(respAcceso_aux_q, &usuario[nroUsuario], blockForever);
 800284c:	4b0d      	ldr	r3, [pc, #52]	; (8002884 <t_ControlAcceso+0x53c>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
 8002854:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	18d1      	adds	r1, r2, r3
 800285c:	2300      	movs	r3, #0
 800285e:	f04f 32ff 	mov.w	r2, #4294967295
 8002862:	f003 fc0f 	bl	8006084 <xQueueGenericSend>
					break;
 8002866:	e004      	b.n	8002872 <t_ControlAcceso+0x52a>
			}
		}
 8002868:	bf00      	nop
 800286a:	e587      	b.n	800237c <t_ControlAcceso+0x34>
					break;
 800286c:	bf00      	nop
 800286e:	e585      	b.n	800237c <t_ControlAcceso+0x34>
					break;
 8002870:	bf00      	nop
		if(xQueueReceive(reqAcceso_q, &usuarioAux, blockForever) == pdPASS){
 8002872:	e583      	b.n	800237c <t_ControlAcceso+0x34>
 8002874:	200000d8 	.word	0x200000d8
 8002878:	2000044c 	.word	0x2000044c
 800287c:	200002f8 	.word	0x200002f8
 8002880:	20000450 	.word	0x20000450
 8002884:	20000454 	.word	0x20000454
 8002888:	20000244 	.word	0x20000244
 800288c:	20000248 	.word	0x20000248

08002890 <t_Actuadores>:
	}
}

//actuadores----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Actuadores (void *pvParameters){
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	actuador_t actuador;
	accion_t acceso = ACC_DENEGADO;
 8002898:	2306      	movs	r3, #6
 800289a:	75fb      	strb	r3, [r7, #23]
	for(;;){
		xQueueReceive(actuador_q, &actuador, blockForever);
 800289c:	4b5f      	ldr	r3, [pc, #380]	; (8002a1c <t_Actuadores+0x18c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f107 010c 	add.w	r1, r7, #12
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 fd9b 	bl	80063e4 <xQueueReceive>
		if(actuador.tipo == PUERTA){
 80028ae:	7b3b      	ldrb	r3, [r7, #12]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	f040 80ac 	bne.w	8002a0e <t_Actuadores+0x17e>
			switch (actuador.accion){
 80028b6:	7b7b      	ldrb	r3, [r7, #13]
 80028b8:	3b05      	subs	r3, #5
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	f200 80a9 	bhi.w	8002a12 <t_Actuadores+0x182>
 80028c0:	a201      	add	r2, pc, #4	; (adr r2, 80028c8 <t_Actuadores+0x38>)
 80028c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c6:	bf00      	nop
 80028c8:	080028ed 	.word	0x080028ed
 80028cc:	08002957 	.word	0x08002957
 80028d0:	08002a13 	.word	0x08002a13
 80028d4:	08002a13 	.word	0x08002a13
 80028d8:	08002a13 	.word	0x08002a13
 80028dc:	08002a13 	.word	0x08002a13
 80028e0:	08002a13 	.word	0x08002a13
 80028e4:	08002975 	.word	0x08002975
 80028e8:	080029ab 	.word	0x080029ab
				case ACC_OK:
					acceso = ACC_OK;
 80028ec:	2305      	movs	r3, #5
 80028ee:	75fb      	strb	r3, [r7, #23]
					hal_digitalOutput(LOW, ledVerde);
 80028f0:	2200      	movs	r2, #0
 80028f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80028f6:	484a      	ldr	r0, [pc, #296]	; (8002a20 <t_Actuadores+0x190>)
 80028f8:	f001 fdb9 	bl	800446e <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acPuerta);
 80028fc:	2201      	movs	r2, #1
 80028fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002902:	4847      	ldr	r0, [pc, #284]	; (8002a20 <t_Actuadores+0x190>)
 8002904:	f001 fdb3 	bl	800446e <HAL_GPIO_WritePin>
					vTaskDelay(sleep_10s);
 8002908:	f242 7010 	movw	r0, #10000	; 0x2710
 800290c:	f004 f966 	bl	8006bdc <vTaskDelay>
					if(hal_digitalInput(PA) == LOW){
 8002910:	2102      	movs	r1, #2
 8002912:	4843      	ldr	r0, [pc, #268]	; (8002a20 <t_Actuadores+0x190>)
 8002914:	f001 fd94 	bl	8004440 <HAL_GPIO_ReadPin>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10c      	bne.n	8002938 <t_Actuadores+0xa8>
						hal_digitalOutput(LOW, ledRojo);
 800291e:	2200      	movs	r2, #0
 8002920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002924:	483e      	ldr	r0, [pc, #248]	; (8002a20 <t_Actuadores+0x190>)
 8002926:	f001 fda2 	bl	800446e <HAL_GPIO_WritePin>
						hal_digitalOutput(HIGH, acAlarma);
 800292a:	2201      	movs	r2, #1
 800292c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002930:	483b      	ldr	r0, [pc, #236]	; (8002a20 <t_Actuadores+0x190>)
 8002932:	f001 fd9c 	bl	800446e <HAL_GPIO_WritePin>
 8002936:	e00b      	b.n	8002950 <t_Actuadores+0xc0>
					}
					else{
						hal_digitalOutput(HIGH, ledVerde);
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293e:	4838      	ldr	r0, [pc, #224]	; (8002a20 <t_Actuadores+0x190>)
 8002940:	f001 fd95 	bl	800446e <HAL_GPIO_WritePin>
						hal_digitalOutput(LOW, acPuerta);
 8002944:	2200      	movs	r2, #0
 8002946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800294a:	4835      	ldr	r0, [pc, #212]	; (8002a20 <t_Actuadores+0x190>)
 800294c:	f001 fd8f 	bl	800446e <HAL_GPIO_WritePin>
					}
					acceso = ACC_DENEGADO;
 8002950:	2306      	movs	r3, #6
 8002952:	75fb      	strb	r3, [r7, #23]
					break;
 8002954:	e060      	b.n	8002a18 <t_Actuadores+0x188>
				case ACC_DENEGADO:
					acceso = ACC_DENEGADO;
 8002956:	2306      	movs	r3, #6
 8002958:	75fb      	strb	r3, [r7, #23]
					hal_digitalOutput(LOW, ledRojo);
 800295a:	2200      	movs	r2, #0
 800295c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002960:	482f      	ldr	r0, [pc, #188]	; (8002a20 <t_Actuadores+0x190>)
 8002962:	f001 fd84 	bl	800446e <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acAlarma);
 8002966:	2201      	movs	r2, #1
 8002968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296c:	482c      	ldr	r0, [pc, #176]	; (8002a20 <t_Actuadores+0x190>)
 800296e:	f001 fd7e 	bl	800446e <HAL_GPIO_WritePin>
//					vTaskDelay(sleep_10s);
//					hal_digitalOutput(HIGH, ledRojo);
//					hal_digitalOutput(LOW, acAlarma);
					break;
 8002972:	e051      	b.n	8002a18 <t_Actuadores+0x188>
				case ACC_MASTER:
					acceso = ACC_OK;
 8002974:	2305      	movs	r3, #5
 8002976:	75fb      	strb	r3, [r7, #23]
					hal_digitalOutput(HIGH, ledRojo);
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800297e:	4828      	ldr	r0, [pc, #160]	; (8002a20 <t_Actuadores+0x190>)
 8002980:	f001 fd75 	bl	800446e <HAL_GPIO_WritePin>
					hal_digitalOutput(LOW, acAlarma);
 8002984:	2200      	movs	r2, #0
 8002986:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800298a:	4825      	ldr	r0, [pc, #148]	; (8002a20 <t_Actuadores+0x190>)
 800298c:	f001 fd6f 	bl	800446e <HAL_GPIO_WritePin>
					hal_digitalOutput(LOW, ledVerde);
 8002990:	2200      	movs	r2, #0
 8002992:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002996:	4822      	ldr	r0, [pc, #136]	; (8002a20 <t_Actuadores+0x190>)
 8002998:	f001 fd69 	bl	800446e <HAL_GPIO_WritePin>
					hal_digitalOutput(HIGH, acPuerta);
 800299c:	2201      	movs	r2, #1
 800299e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029a2:	481f      	ldr	r0, [pc, #124]	; (8002a20 <t_Actuadores+0x190>)
 80029a4:	f001 fd63 	bl	800446e <HAL_GPIO_WritePin>
//					}
//					else{
//						hal_digitalOutput(HIGH, ledVerde);
//						hal_digitalOutput(LOW, acPuerta);
//					}
					break;
 80029a8:	e036      	b.n	8002a18 <t_Actuadores+0x188>
				case CAMBIO_ESTADO:
					vTaskDelay(sleep_100ms);
 80029aa:	2064      	movs	r0, #100	; 0x64
 80029ac:	f004 f916 	bl	8006bdc <vTaskDelay>
					if(hal_digitalInput(PA) == LOW){
 80029b0:	2102      	movs	r1, #2
 80029b2:	481b      	ldr	r0, [pc, #108]	; (8002a20 <t_Actuadores+0x190>)
 80029b4:	f001 fd44 	bl	8004440 <HAL_GPIO_ReadPin>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <t_Actuadores+0x14e>
						if(acceso == ACC_DENEGADO){
 80029be:	7dfb      	ldrb	r3, [r7, #23]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d128      	bne.n	8002a16 <t_Actuadores+0x186>
							hal_digitalOutput(LOW, ledRojo);
 80029c4:	2200      	movs	r2, #0
 80029c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ca:	4815      	ldr	r0, [pc, #84]	; (8002a20 <t_Actuadores+0x190>)
 80029cc:	f001 fd4f 	bl	800446e <HAL_GPIO_WritePin>
							hal_digitalOutput(HIGH, acAlarma);
 80029d0:	2201      	movs	r2, #1
 80029d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029d6:	4812      	ldr	r0, [pc, #72]	; (8002a20 <t_Actuadores+0x190>)
 80029d8:	f001 fd49 	bl	800446e <HAL_GPIO_WritePin>
							hal_digitalOutput(LOW, acAlarma);
							hal_digitalOutput(HIGH, ledVerde);

						}
					}
					break;
 80029dc:	e01b      	b.n	8002a16 <t_Actuadores+0x186>
						if(acceso == ACC_OK){
 80029de:	7dfb      	ldrb	r3, [r7, #23]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d118      	bne.n	8002a16 <t_Actuadores+0x186>
							acceso = ACC_DENEGADO;
 80029e4:	2306      	movs	r3, #6
 80029e6:	75fb      	strb	r3, [r7, #23]
							hal_digitalOutput(HIGH, ledRojo);
 80029e8:	2201      	movs	r2, #1
 80029ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029ee:	480c      	ldr	r0, [pc, #48]	; (8002a20 <t_Actuadores+0x190>)
 80029f0:	f001 fd3d 	bl	800446e <HAL_GPIO_WritePin>
							hal_digitalOutput(LOW, acAlarma);
 80029f4:	2200      	movs	r2, #0
 80029f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80029fa:	4809      	ldr	r0, [pc, #36]	; (8002a20 <t_Actuadores+0x190>)
 80029fc:	f001 fd37 	bl	800446e <HAL_GPIO_WritePin>
							hal_digitalOutput(HIGH, ledVerde);
 8002a00:	2201      	movs	r2, #1
 8002a02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a06:	4806      	ldr	r0, [pc, #24]	; (8002a20 <t_Actuadores+0x190>)
 8002a08:	f001 fd31 	bl	800446e <HAL_GPIO_WritePin>
					break;
 8002a0c:	e003      	b.n	8002a16 <t_Actuadores+0x186>
				default:
					break;
			}
		}
 8002a0e:	bf00      	nop
 8002a10:	e744      	b.n	800289c <t_Actuadores+0xc>
					break;
 8002a12:	bf00      	nop
 8002a14:	e742      	b.n	800289c <t_Actuadores+0xc>
					break;
 8002a16:	bf00      	nop
		xQueueReceive(actuador_q, &actuador, blockForever);
 8002a18:	e740      	b.n	800289c <t_Actuadores+0xc>
 8002a1a:	bf00      	nop
 8002a1c:	2000044c 	.word	0x2000044c
 8002a20:	40010c00 	.word	0x40010c00

08002a24 <t_Teclado>:
	}
}

//teclado----------------------------------------------------------------------------------------------------------------------------------------------------------------------

static void t_Teclado (void *pvParameters){
 8002a24:	b590      	push	{r4, r7, lr}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
	columna_t columna;
	fila_t fila;
	tecla_t tecla;
	uint8_t teclado[4][4] = {{1,4,7,MENU},{2,5,8,0},{3,6,9,ACEPTAR},{MAESTRA,ARRIBA,ABAJO,CANCELAR}};
 8002a2c:	4b6b      	ldr	r3, [pc, #428]	; (8002bdc <t_Teclado+0x1b8>)
 8002a2e:	f107 040c 	add.w	r4, r7, #12
 8002a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	hal_digitalOutput(LOW, fil1);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	4868      	ldr	r0, [pc, #416]	; (8002be0 <t_Teclado+0x1bc>)
 8002a3e:	f001 fd16 	bl	800446e <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil2);
 8002a42:	2200      	movs	r2, #0
 8002a44:	2108      	movs	r1, #8
 8002a46:	4866      	ldr	r0, [pc, #408]	; (8002be0 <t_Teclado+0x1bc>)
 8002a48:	f001 fd11 	bl	800446e <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil3);
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a52:	4864      	ldr	r0, [pc, #400]	; (8002be4 <t_Teclado+0x1c0>)
 8002a54:	f001 fd0b 	bl	800446e <HAL_GPIO_WritePin>
	hal_digitalOutput(LOW, fil4);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a5e:	4861      	ldr	r0, [pc, #388]	; (8002be4 <t_Teclado+0x1c0>)
 8002a60:	f001 fd05 	bl	800446e <HAL_GPIO_WritePin>

	for(;;){
		xQueueReceive(columna_q, &columna, blockForever);
 8002a64:	4b60      	ldr	r3, [pc, #384]	; (8002be8 <t_Teclado+0x1c4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f107 011e 	add.w	r1, r7, #30
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	4618      	mov	r0, r3
 8002a72:	f003 fcb7 	bl	80063e4 <xQueueReceive>

		hal_digitalOutput(HIGH, fil1);
 8002a76:	2201      	movs	r2, #1
 8002a78:	2110      	movs	r1, #16
 8002a7a:	4859      	ldr	r0, [pc, #356]	; (8002be0 <t_Teclado+0x1bc>)
 8002a7c:	f001 fcf7 	bl	800446e <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil2);
 8002a80:	2201      	movs	r2, #1
 8002a82:	2108      	movs	r1, #8
 8002a84:	4856      	ldr	r0, [pc, #344]	; (8002be0 <t_Teclado+0x1bc>)
 8002a86:	f001 fcf2 	bl	800446e <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil3);
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a90:	4854      	ldr	r0, [pc, #336]	; (8002be4 <t_Teclado+0x1c0>)
 8002a92:	f001 fcec 	bl	800446e <HAL_GPIO_WritePin>
		hal_digitalOutput(HIGH, fil4);
 8002a96:	2201      	movs	r2, #1
 8002a98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a9c:	4851      	ldr	r0, [pc, #324]	; (8002be4 <t_Teclado+0x1c0>)
 8002a9e:	f001 fce6 	bl	800446e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil1);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2110      	movs	r1, #16
 8002aa6:	484e      	ldr	r0, [pc, #312]	; (8002be0 <t_Teclado+0x1bc>)
 8002aa8:	f001 fce1 	bl	800446e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002aac:	4b4e      	ldr	r3, [pc, #312]	; (8002be8 <t_Teclado+0x1c4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f107 011e 	add.w	r1, r7, #30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fc94 	bl	80063e4 <xQueueReceive>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d101      	bne.n	8002ac6 <t_Teclado+0xa2>
			fila = FILA_1;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	77fb      	strb	r3, [r7, #31]
		}
		hal_digitalOutput(HIGH, fil1);
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	2110      	movs	r1, #16
 8002aca:	4845      	ldr	r0, [pc, #276]	; (8002be0 <t_Teclado+0x1bc>)
 8002acc:	f001 fccf 	bl	800446e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil2);
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2108      	movs	r1, #8
 8002ad4:	4842      	ldr	r0, [pc, #264]	; (8002be0 <t_Teclado+0x1bc>)
 8002ad6:	f001 fcca 	bl	800446e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <t_Teclado+0x1c4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f107 011e 	add.w	r1, r7, #30
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 fc7d 	bl	80063e4 <xQueueReceive>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d101      	bne.n	8002af4 <t_Teclado+0xd0>
			fila = FILA_2;
 8002af0:	2301      	movs	r3, #1
 8002af2:	77fb      	strb	r3, [r7, #31]
		}
		hal_digitalOutput(HIGH, fil2);
 8002af4:	2201      	movs	r2, #1
 8002af6:	2108      	movs	r1, #8
 8002af8:	4839      	ldr	r0, [pc, #228]	; (8002be0 <t_Teclado+0x1bc>)
 8002afa:	f001 fcb8 	bl	800446e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil3);
 8002afe:	2200      	movs	r2, #0
 8002b00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b04:	4837      	ldr	r0, [pc, #220]	; (8002be4 <t_Teclado+0x1c0>)
 8002b06:	f001 fcb2 	bl	800446e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002b0a:	4b37      	ldr	r3, [pc, #220]	; (8002be8 <t_Teclado+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f107 011e 	add.w	r1, r7, #30
 8002b12:	2200      	movs	r2, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f003 fc65 	bl	80063e4 <xQueueReceive>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d101      	bne.n	8002b24 <t_Teclado+0x100>
			fila = FILA_3;
 8002b20:	2302      	movs	r3, #2
 8002b22:	77fb      	strb	r3, [r7, #31]
		}
		hal_digitalOutput(HIGH, fil3);
 8002b24:	2201      	movs	r2, #1
 8002b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b2a:	482e      	ldr	r0, [pc, #184]	; (8002be4 <t_Teclado+0x1c0>)
 8002b2c:	f001 fc9f 	bl	800446e <HAL_GPIO_WritePin>

		hal_digitalOutput(LOW, fil4);
 8002b30:	2200      	movs	r2, #0
 8002b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b36:	482b      	ldr	r0, [pc, #172]	; (8002be4 <t_Teclado+0x1c0>)
 8002b38:	f001 fc99 	bl	800446e <HAL_GPIO_WritePin>
		if(xQueueReceive(columna_q, &columna, nonBlocking) == pdPASS){
 8002b3c:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <t_Teclado+0x1c4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f107 011e 	add.w	r1, r7, #30
 8002b44:	2200      	movs	r2, #0
 8002b46:	4618      	mov	r0, r3
 8002b48:	f003 fc4c 	bl	80063e4 <xQueueReceive>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d101      	bne.n	8002b56 <t_Teclado+0x132>
			fila = FILA_4;
 8002b52:	2303      	movs	r3, #3
 8002b54:	77fb      	strb	r3, [r7, #31]
		}
		hal_digitalOutput(HIGH, fil4);
 8002b56:	2201      	movs	r2, #1
 8002b58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b5c:	4821      	ldr	r0, [pc, #132]	; (8002be4 <t_Teclado+0x1c0>)
 8002b5e:	f001 fc86 	bl	800446e <HAL_GPIO_WritePin>

		tecla.tecla = teclado[columna][fila];
 8002b62:	7fbb      	ldrb	r3, [r7, #30]
 8002b64:	461a      	mov	r2, r3
 8002b66:	7ffb      	ldrb	r3, [r7, #31]
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	f107 0120 	add.w	r1, r7, #32
 8002b6e:	440a      	add	r2, r1
 8002b70:	4413      	add	r3, r2
 8002b72:	3b14      	subs	r3, #20
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	777b      	strb	r3, [r7, #29]
		if(tecla.tecla < 10) tecla.accion = NUM;
 8002b78:	7f7b      	ldrb	r3, [r7, #29]
 8002b7a:	2b09      	cmp	r3, #9
 8002b7c:	d802      	bhi.n	8002b84 <t_Teclado+0x160>
 8002b7e:	2310      	movs	r3, #16
 8002b80:	773b      	strb	r3, [r7, #28]
 8002b82:	e001      	b.n	8002b88 <t_Teclado+0x164>
		else tecla.accion = tecla.tecla;
 8002b84:	7f7b      	ldrb	r3, [r7, #29]
 8002b86:	773b      	strb	r3, [r7, #28]

		xQueueSendToBack(tecla_q, &tecla, blockForever);
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <t_Teclado+0x1c8>)
 8002b8a:	6818      	ldr	r0, [r3, #0]
 8002b8c:	f107 011c 	add.w	r1, r7, #28
 8002b90:	2300      	movs	r3, #0
 8002b92:	f04f 32ff 	mov.w	r2, #4294967295
 8002b96:	f003 fa75 	bl	8006084 <xQueueGenericSend>

		vTaskDelay(sleep_500ms);
 8002b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002b9e:	f004 f81d 	bl	8006bdc <vTaskDelay>
		xQueueReset(columna_q);
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <t_Teclado+0x1c4>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 f969 	bl	8005e80 <xQueueGenericReset>
		hal_digitalOutput(LOW, fil1);
 8002bae:	2200      	movs	r2, #0
 8002bb0:	2110      	movs	r1, #16
 8002bb2:	480b      	ldr	r0, [pc, #44]	; (8002be0 <t_Teclado+0x1bc>)
 8002bb4:	f001 fc5b 	bl	800446e <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil2);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	2108      	movs	r1, #8
 8002bbc:	4808      	ldr	r0, [pc, #32]	; (8002be0 <t_Teclado+0x1bc>)
 8002bbe:	f001 fc56 	bl	800446e <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil3);
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bc8:	4806      	ldr	r0, [pc, #24]	; (8002be4 <t_Teclado+0x1c0>)
 8002bca:	f001 fc50 	bl	800446e <HAL_GPIO_WritePin>
		hal_digitalOutput(LOW, fil4);
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <t_Teclado+0x1c0>)
 8002bd6:	f001 fc4a 	bl	800446e <HAL_GPIO_WritePin>
		xQueueReceive(columna_q, &columna, blockForever);
 8002bda:	e743      	b.n	8002a64 <t_Teclado+0x40>
 8002bdc:	0800a164 	.word	0x0800a164
 8002be0:	40010c00 	.word	0x40010c00
 8002be4:	40010800 	.word	0x40010800
 8002be8:	2000045c 	.word	0x2000045c
 8002bec:	200002fc 	.word	0x200002fc

08002bf0 <emptyaux_ac>:
	else{
		return 1;
	}
}

void emptyaux_ac(actuador_t *a){
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
	a->accion=0;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	705a      	strb	r2, [r3, #1]
	a->anterior=0;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	709a      	strb	r2, [r3, #2]
	a->tipo=0;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	701a      	strb	r2, [r3, #0]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <emptyaux_us>:
void emptyaux_us(usuario_t *a){
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
	a->accion=0;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]
	a->clave=0;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	605a      	str	r2, [r3, #4]
	a->intentosDisp=0;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	609a      	str	r2, [r3, #8]
	a->nroUsuario=0;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	705a      	strb	r2, [r3, #1]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bc80      	pop	{r7}
 8002c3c:	4770      	bx	lr

08002c3e <clraux>:

void clraux(char *a){
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
	for(uint8_t n=0; n < 16; n++){
 8002c46:	2300      	movs	r3, #0
 8002c48:	73fb      	strb	r3, [r7, #15]
 8002c4a:	e007      	b.n	8002c5c <clraux+0x1e>
		a[n] = '0';
 8002c4c:	7bfb      	ldrb	r3, [r7, #15]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4413      	add	r3, r2
 8002c52:	2230      	movs	r2, #48	; 0x30
 8002c54:	701a      	strb	r2, [r3, #0]
	for(uint8_t n=0; n < 16; n++){
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	73fb      	strb	r3, [r7, #15]
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	2b0f      	cmp	r3, #15
 8002c60:	d9f4      	bls.n	8002c4c <clraux+0xe>
	}
}
 8002c62:	bf00      	nop
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <t_Comextern>:

/*
 *tarea para la comunicacion con la raspberri
 */
static void t_Comextern (void *pvParameters){
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b090      	sub	sp, #64	; 0x40
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]

	actuador_t aux_actuador;
	usuario_t aux_usuario;
	char aux_str[16];

	emptyaux_ac(&aux_actuador);
 8002c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7ff ffb7 	bl	8002bf0 <emptyaux_ac>
	emptyaux_us(&aux_usuario);
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff ffc4 	bl	8002c14 <emptyaux_us>

	while(1){

		for(uint32_t k = 0; k < (uxQueueMessagesWaiting(respAcceso_aux_q)); k++){
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c90:	e08c      	b.n	8002dac <t_Comextern+0x13c>
			xQueueReceive(respAcceso_aux_q, &aux_usuario, nonBlocking);
 8002c92:	4b9a      	ldr	r3, [pc, #616]	; (8002efc <t_Comextern+0x28c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f107 011c 	add.w	r1, r7, #28
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f003 fba1 	bl	80063e4 <xQueueReceive>

			clraux(aux_str);
 8002ca2:	f107 030c 	add.w	r3, r7, #12
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff ffc9 	bl	8002c3e <clraux>
			sprintf(&aux_str, aux_usuario.id);
 8002cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	4611      	mov	r1, r2
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f005 fe42 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	4619      	mov	r1, r3
 8002cc2:	488f      	ldr	r0, [pc, #572]	; (8002f00 <t_Comextern+0x290>)
 8002cc4:	f005 fe5c 	bl	8008980 <strcat>
			clraux(aux_str);
 8002cc8:	f107 030c 	add.w	r3, r7, #12
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff ffb6 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",resp,us:");
 8002cd2:	488b      	ldr	r0, [pc, #556]	; (8002f00 <t_Comextern+0x290>)
 8002cd4:	f7fd fa3c 	bl	8000150 <strlen>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <t_Comextern+0x290>)
 8002cde:	4413      	add	r3, r2
 8002ce0:	4988      	ldr	r1, [pc, #544]	; (8002f04 <t_Comextern+0x294>)
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	cb03      	ldmia	r3!, {r0, r1}
 8002ce8:	6010      	str	r0, [r2, #0]
 8002cea:	6051      	str	r1, [r2, #4]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	8113      	strh	r3, [r2, #8]
			sprintf(&aux_str, (uint32_t)aux_usuario.nroUsuario);
 8002cf0:	7f7b      	ldrb	r3, [r7, #29]
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	f107 030c 	add.w	r3, r7, #12
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f005 fe20 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	4619      	mov	r1, r3
 8002d06:	487e      	ldr	r0, [pc, #504]	; (8002f00 <t_Comextern+0x290>)
 8002d08:	f005 fe3a 	bl	8008980 <strcat>
			clraux(aux_str);
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7ff ff94 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",k:");
 8002d16:	487a      	ldr	r0, [pc, #488]	; (8002f00 <t_Comextern+0x290>)
 8002d18:	f7fd fa1a 	bl	8000150 <strlen>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b77      	ldr	r3, [pc, #476]	; (8002f00 <t_Comextern+0x290>)
 8002d22:	4413      	add	r3, r2
 8002d24:	4a78      	ldr	r2, [pc, #480]	; (8002f08 <t_Comextern+0x298>)
 8002d26:	6810      	ldr	r0, [r2, #0]
 8002d28:	6018      	str	r0, [r3, #0]
			sprintf(&aux_str, aux_usuario.clave);
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f107 030c 	add.w	r3, r7, #12
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f005 fe03 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002d3a:	f107 030c 	add.w	r3, r7, #12
 8002d3e:	4619      	mov	r1, r3
 8002d40:	486f      	ldr	r0, [pc, #444]	; (8002f00 <t_Comextern+0x290>)
 8002d42:	f005 fe1d 	bl	8008980 <strcat>
			clraux(aux_str);
 8002d46:	f107 030c 	add.w	r3, r7, #12
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff ff77 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",");
 8002d50:	486b      	ldr	r0, [pc, #428]	; (8002f00 <t_Comextern+0x290>)
 8002d52:	f7fd f9fd 	bl	8000150 <strlen>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b69      	ldr	r3, [pc, #420]	; (8002f00 <t_Comextern+0x290>)
 8002d5c:	4413      	add	r3, r2
 8002d5e:	496b      	ldr	r1, [pc, #428]	; (8002f0c <t_Comextern+0x29c>)
 8002d60:	461a      	mov	r2, r3
 8002d62:	460b      	mov	r3, r1
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	8013      	strh	r3, [r2, #0]
			sprintf(&aux_str, aux_usuario.intentosDisp);
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	f107 030c 	add.w	r3, r7, #12
 8002d70:	4611      	mov	r1, r2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f005 fde4 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002d78:	f107 030c 	add.w	r3, r7, #12
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4860      	ldr	r0, [pc, #384]	; (8002f00 <t_Comextern+0x290>)
 8002d80:	f005 fdfe 	bl	8008980 <strcat>
			clraux(aux_str);
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff ff58 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, "$");
 8002d8e:	485c      	ldr	r0, [pc, #368]	; (8002f00 <t_Comextern+0x290>)
 8002d90:	f7fd f9de 	bl	8000150 <strlen>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <t_Comextern+0x290>)
 8002d9a:	4413      	add	r3, r2
 8002d9c:	495c      	ldr	r1, [pc, #368]	; (8002f10 <t_Comextern+0x2a0>)
 8002d9e:	461a      	mov	r2, r3
 8002da0:	460b      	mov	r3, r1
 8002da2:	881b      	ldrh	r3, [r3, #0]
 8002da4:	8013      	strh	r3, [r2, #0]
		for(uint32_t k = 0; k < (uxQueueMessagesWaiting(respAcceso_aux_q)); k++){
 8002da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da8:	3301      	adds	r3, #1
 8002daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dac:	4b53      	ldr	r3, [pc, #332]	; (8002efc <t_Comextern+0x28c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f003 fbf7 	bl	80065a4 <uxQueueMessagesWaiting>
 8002db6:	4602      	mov	r2, r0
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	f4ff af69 	bcc.w	8002c92 <t_Comextern+0x22>
			buffer_index++;
			*/

		}

		for(uint32_t l = 0; l < (uxQueueMessagesWaiting(reqAcceso_aux_q)); l++){
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dc4:	e08c      	b.n	8002ee0 <t_Comextern+0x270>
			xQueueReceive(reqAcceso_aux_q, &aux_usuario, nonBlocking);
 8002dc6:	4b53      	ldr	r3, [pc, #332]	; (8002f14 <t_Comextern+0x2a4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f107 011c 	add.w	r1, r7, #28
 8002dce:	2200      	movs	r2, #0
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fb07 	bl	80063e4 <xQueueReceive>

			clraux(aux_str);
 8002dd6:	f107 030c 	add.w	r3, r7, #12
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff2f 	bl	8002c3e <clraux>
			sprintf(&aux_str, aux_usuario.id);
 8002de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de2:	461a      	mov	r2, r3
 8002de4:	f107 030c 	add.w	r3, r7, #12
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f005 fda8 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002df0:	f107 030c 	add.w	r3, r7, #12
 8002df4:	4619      	mov	r1, r3
 8002df6:	4842      	ldr	r0, [pc, #264]	; (8002f00 <t_Comextern+0x290>)
 8002df8:	f005 fdc2 	bl	8008980 <strcat>
			clraux(aux_str);
 8002dfc:	f107 030c 	add.w	r3, r7, #12
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff ff1c 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",req,us:");
 8002e06:	483e      	ldr	r0, [pc, #248]	; (8002f00 <t_Comextern+0x290>)
 8002e08:	f7fd f9a2 	bl	8000150 <strlen>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <t_Comextern+0x290>)
 8002e12:	4413      	add	r3, r2
 8002e14:	4940      	ldr	r1, [pc, #256]	; (8002f18 <t_Comextern+0x2a8>)
 8002e16:	461a      	mov	r2, r3
 8002e18:	460b      	mov	r3, r1
 8002e1a:	cb03      	ldmia	r3!, {r0, r1}
 8002e1c:	6010      	str	r0, [r2, #0]
 8002e1e:	6051      	str	r1, [r2, #4]
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	7213      	strb	r3, [r2, #8]
			sprintf(&aux_str, (uint32_t)aux_usuario.nroUsuario);
 8002e24:	7f7b      	ldrb	r3, [r7, #29]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f005 fd86 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002e34:	f107 030c 	add.w	r3, r7, #12
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4831      	ldr	r0, [pc, #196]	; (8002f00 <t_Comextern+0x290>)
 8002e3c:	f005 fda0 	bl	8008980 <strcat>
			clraux(aux_str);
 8002e40:	f107 030c 	add.w	r3, r7, #12
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fefa 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",k:");
 8002e4a:	482d      	ldr	r0, [pc, #180]	; (8002f00 <t_Comextern+0x290>)
 8002e4c:	f7fd f980 	bl	8000150 <strlen>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b2a      	ldr	r3, [pc, #168]	; (8002f00 <t_Comextern+0x290>)
 8002e56:	4413      	add	r3, r2
 8002e58:	4a2b      	ldr	r2, [pc, #172]	; (8002f08 <t_Comextern+0x298>)
 8002e5a:	6810      	ldr	r0, [r2, #0]
 8002e5c:	6018      	str	r0, [r3, #0]
			sprintf(&aux_str, aux_usuario.clave);
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f107 030c 	add.w	r3, r7, #12
 8002e66:	4611      	mov	r1, r2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 fd69 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002e6e:	f107 030c 	add.w	r3, r7, #12
 8002e72:	4619      	mov	r1, r3
 8002e74:	4822      	ldr	r0, [pc, #136]	; (8002f00 <t_Comextern+0x290>)
 8002e76:	f005 fd83 	bl	8008980 <strcat>
			clraux(aux_str);
 8002e7a:	f107 030c 	add.w	r3, r7, #12
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fedd 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",");
 8002e84:	481e      	ldr	r0, [pc, #120]	; (8002f00 <t_Comextern+0x290>)
 8002e86:	f7fd f963 	bl	8000150 <strlen>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b1c      	ldr	r3, [pc, #112]	; (8002f00 <t_Comextern+0x290>)
 8002e90:	4413      	add	r3, r2
 8002e92:	491e      	ldr	r1, [pc, #120]	; (8002f0c <t_Comextern+0x29c>)
 8002e94:	461a      	mov	r2, r3
 8002e96:	460b      	mov	r3, r1
 8002e98:	881b      	ldrh	r3, [r3, #0]
 8002e9a:	8013      	strh	r3, [r2, #0]
			sprintf(&aux_str, aux_usuario.intentosDisp);
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	f107 030c 	add.w	r3, r7, #12
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 fd4a 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002eac:	f107 030c 	add.w	r3, r7, #12
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4813      	ldr	r0, [pc, #76]	; (8002f00 <t_Comextern+0x290>)
 8002eb4:	f005 fd64 	bl	8008980 <strcat>
			clraux(aux_str);
 8002eb8:	f107 030c 	add.w	r3, r7, #12
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff febe 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, "$");
 8002ec2:	480f      	ldr	r0, [pc, #60]	; (8002f00 <t_Comextern+0x290>)
 8002ec4:	f7fd f944 	bl	8000150 <strlen>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <t_Comextern+0x290>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	490f      	ldr	r1, [pc, #60]	; (8002f10 <t_Comextern+0x2a0>)
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	881b      	ldrh	r3, [r3, #0]
 8002ed8:	8013      	strh	r3, [r2, #0]
		for(uint32_t l = 0; l < (uxQueueMessagesWaiting(reqAcceso_aux_q)); l++){
 8002eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002edc:	3301      	adds	r3, #1
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <t_Comextern+0x2a4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fb5d 	bl	80065a4 <uxQueueMessagesWaiting>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	f4ff af69 	bcc.w	8002dc6 <t_Comextern+0x156>
			com_tx_buffer[buffer_index] = (char) aux_usuario.intentosDisp;
			buffer_index++;
			*/
		}

		for(uint32_t m = 0; m < (uxQueueMessagesWaiting(actuador_aux_q)); m++){
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8002ef8:	e0a0      	b.n	800303c <t_Comextern+0x3cc>
 8002efa:	bf00      	nop
 8002efc:	20000454 	.word	0x20000454
 8002f00:	20000300 	.word	0x20000300
 8002f04:	0800a174 	.word	0x0800a174
 8002f08:	0800a180 	.word	0x0800a180
 8002f0c:	0800a184 	.word	0x0800a184
 8002f10:	0800a188 	.word	0x0800a188
 8002f14:	20000400 	.word	0x20000400
 8002f18:	0800a18c 	.word	0x0800a18c
			xQueueReceive(actuador_aux_q, &aux_actuador, nonBlocking);
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	; (8003054 <t_Comextern+0x3e4>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8002f24:	2200      	movs	r2, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f003 fa5c 	bl	80063e4 <xQueueReceive>


			clraux(aux_str);
 8002f2c:	f107 030c 	add.w	r3, r7, #12
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff fe84 	bl	8002c3e <clraux>
			sprintf(&aux_str, aux_actuador.id);
 8002f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f107 030c 	add.w	r3, r7, #12
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f005 fcfd 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002f46:	f107 030c 	add.w	r3, r7, #12
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4842      	ldr	r0, [pc, #264]	; (8003058 <t_Comextern+0x3e8>)
 8002f4e:	f005 fd17 	bl	8008980 <strcat>
			clraux(aux_str);
 8002f52:	f107 030c 	add.w	r3, r7, #12
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7ff fe71 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",act,t:");
 8002f5c:	483e      	ldr	r0, [pc, #248]	; (8003058 <t_Comextern+0x3e8>)
 8002f5e:	f7fd f8f7 	bl	8000150 <strlen>
 8002f62:	4603      	mov	r3, r0
 8002f64:	461a      	mov	r2, r3
 8002f66:	4b3c      	ldr	r3, [pc, #240]	; (8003058 <t_Comextern+0x3e8>)
 8002f68:	4413      	add	r3, r2
 8002f6a:	493c      	ldr	r1, [pc, #240]	; (800305c <t_Comextern+0x3ec>)
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	460b      	mov	r3, r1
 8002f70:	cb03      	ldmia	r3!, {r0, r1}
 8002f72:	6010      	str	r0, [r2, #0]
 8002f74:	6051      	str	r1, [r2, #4]
			sprintf(&aux_str, (uint32_t)aux_actuador.tipo);
 8002f76:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f005 fcdc 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002f88:	f107 030c 	add.w	r3, r7, #12
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	4832      	ldr	r0, [pc, #200]	; (8003058 <t_Comextern+0x3e8>)
 8002f90:	f005 fcf6 	bl	8008980 <strcat>
			clraux(aux_str);
 8002f94:	f107 030c 	add.w	r3, r7, #12
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff fe50 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",ac:");
 8002f9e:	482e      	ldr	r0, [pc, #184]	; (8003058 <t_Comextern+0x3e8>)
 8002fa0:	f7fd f8d6 	bl	8000150 <strlen>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <t_Comextern+0x3e8>)
 8002faa:	4413      	add	r3, r2
 8002fac:	4a2c      	ldr	r2, [pc, #176]	; (8003060 <t_Comextern+0x3f0>)
 8002fae:	6810      	ldr	r0, [r2, #0]
 8002fb0:	6018      	str	r0, [r3, #0]
 8002fb2:	7912      	ldrb	r2, [r2, #4]
 8002fb4:	711a      	strb	r2, [r3, #4]
			sprintf(&aux_str, (uint32_t)aux_actuador.accion);
 8002fb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f107 030c 	add.w	r3, r7, #12
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f005 fcbc 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8002fc8:	f107 030c 	add.w	r3, r7, #12
 8002fcc:	4619      	mov	r1, r3
 8002fce:	4822      	ldr	r0, [pc, #136]	; (8003058 <t_Comextern+0x3e8>)
 8002fd0:	f005 fcd6 	bl	8008980 <strcat>
			clraux(aux_str);
 8002fd4:	f107 030c 	add.w	r3, r7, #12
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fe30 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, ",an:");
 8002fde:	481e      	ldr	r0, [pc, #120]	; (8003058 <t_Comextern+0x3e8>)
 8002fe0:	f7fd f8b6 	bl	8000150 <strlen>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <t_Comextern+0x3e8>)
 8002fea:	4413      	add	r3, r2
 8002fec:	4a1d      	ldr	r2, [pc, #116]	; (8003064 <t_Comextern+0x3f4>)
 8002fee:	6810      	ldr	r0, [r2, #0]
 8002ff0:	6018      	str	r0, [r3, #0]
 8002ff2:	7912      	ldrb	r2, [r2, #4]
 8002ff4:	711a      	strb	r2, [r3, #4]
			sprintf(&aux_str, (uint32_t)aux_actuador.anterior);
 8002ff6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f107 030c 	add.w	r3, r7, #12
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f005 fc9c 	bl	8008940 <siprintf>
			strcat(com_tx_buffer, aux_str);
 8003008:	f107 030c 	add.w	r3, r7, #12
 800300c:	4619      	mov	r1, r3
 800300e:	4812      	ldr	r0, [pc, #72]	; (8003058 <t_Comextern+0x3e8>)
 8003010:	f005 fcb6 	bl	8008980 <strcat>
			clraux(aux_str);
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff fe10 	bl	8002c3e <clraux>
			strcat(com_tx_buffer, "$");
 800301e:	480e      	ldr	r0, [pc, #56]	; (8003058 <t_Comextern+0x3e8>)
 8003020:	f7fd f896 	bl	8000150 <strlen>
 8003024:	4603      	mov	r3, r0
 8003026:	461a      	mov	r2, r3
 8003028:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <t_Comextern+0x3e8>)
 800302a:	4413      	add	r3, r2
 800302c:	490e      	ldr	r1, [pc, #56]	; (8003068 <t_Comextern+0x3f8>)
 800302e:	461a      	mov	r2, r3
 8003030:	460b      	mov	r3, r1
 8003032:	881b      	ldrh	r3, [r3, #0]
 8003034:	8013      	strh	r3, [r2, #0]
		for(uint32_t m = 0; m < (uxQueueMessagesWaiting(actuador_aux_q)); m++){
 8003036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003038:	3301      	adds	r3, #1
 800303a:	637b      	str	r3, [r7, #52]	; 0x34
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <t_Comextern+0x3e4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f003 faaf 	bl	80065a4 <uxQueueMessagesWaiting>
 8003046:	4602      	mov	r2, r0
 8003048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800304a:	4293      	cmp	r3, r2
 800304c:	f4ff af66 	bcc.w	8002f1c <t_Comextern+0x2ac>
		for(uint32_t k = 0; k < (uxQueueMessagesWaiting(respAcceso_aux_q)); k++){
 8003050:	e61c      	b.n	8002c8c <t_Comextern+0x1c>
 8003052:	bf00      	nop
 8003054:	200002f8 	.word	0x200002f8
 8003058:	20000300 	.word	0x20000300
 800305c:	0800a198 	.word	0x0800a198
 8003060:	0800a1a0 	.word	0x0800a1a0
 8003064:	0800a1a8 	.word	0x0800a1a8
 8003068:	0800a188 	.word	0x0800a188

0800306c <err>:

}


//Debugging function
static void err (uint8_t errCode){
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	71fb      	strb	r3, [r7, #7]
	while(1);
 8003076:	e7fe      	b.n	8003076 <err+0xa>

08003078 <HAL_GPIO_EXTI_Callback>:
}

//ISR
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	4603      	mov	r3, r0
 8003080:	80fb      	strh	r3, [r7, #6]
	columna_t columna;
	actuador_t actuador;
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003082:	2300      	movs	r3, #0
 8003084:	60bb      	str	r3, [r7, #8]

	if(GPIO_Pin != PA_Pin){
 8003086:	88fb      	ldrh	r3, [r7, #6]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d029      	beq.n	80030e0 <HAL_GPIO_EXTI_Callback+0x68>
		switch(GPIO_Pin){
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003092:	d00f      	beq.n	80030b4 <HAL_GPIO_EXTI_Callback+0x3c>
 8003094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003098:	dc18      	bgt.n	80030cc <HAL_GPIO_EXTI_Callback+0x54>
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d00c      	beq.n	80030ba <HAL_GPIO_EXTI_Callback+0x42>
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a4:	dc12      	bgt.n	80030cc <HAL_GPIO_EXTI_Callback+0x54>
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030aa:	d00c      	beq.n	80030c6 <HAL_GPIO_EXTI_Callback+0x4e>
 80030ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030b0:	d006      	beq.n	80030c0 <HAL_GPIO_EXTI_Callback+0x48>
 80030b2:	e00b      	b.n	80030cc <HAL_GPIO_EXTI_Callback+0x54>
			case col1_Pin:
				columna = COLUMNA_1;
 80030b4:	2300      	movs	r3, #0
 80030b6:	75fb      	strb	r3, [r7, #23]
				break;
 80030b8:	e008      	b.n	80030cc <HAL_GPIO_EXTI_Callback+0x54>
			case col2_Pin:
				columna = COLUMNA_2;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
				break;
 80030be:	e005      	b.n	80030cc <HAL_GPIO_EXTI_Callback+0x54>
			case col3_Pin:
				columna = COLUMNA_3;
 80030c0:	2302      	movs	r3, #2
 80030c2:	75fb      	strb	r3, [r7, #23]
				break;
 80030c4:	e002      	b.n	80030cc <HAL_GPIO_EXTI_Callback+0x54>
			case col4_Pin:
				columna = COLUMNA_4;
 80030c6:	2303      	movs	r3, #3
 80030c8:	75fb      	strb	r3, [r7, #23]
				break;
 80030ca:	bf00      	nop
		}
		xQueueSendFromISR(columna_q, &columna, &xHigherPriorityTaskWoken);
 80030cc:	4b12      	ldr	r3, [pc, #72]	; (8003118 <HAL_GPIO_EXTI_Callback+0xa0>)
 80030ce:	6818      	ldr	r0, [r3, #0]
 80030d0:	f107 0208 	add.w	r2, r7, #8
 80030d4:	f107 0117 	add.w	r1, r7, #23
 80030d8:	2300      	movs	r3, #0
 80030da:	f003 f8d1 	bl	8006280 <xQueueGenericSendFromISR>
 80030de:	e00c      	b.n	80030fa <HAL_GPIO_EXTI_Callback+0x82>
	}
	else{
		actuador.tipo = PUERTA;
 80030e0:	2301      	movs	r3, #1
 80030e2:	733b      	strb	r3, [r7, #12]
		actuador.accion = CAMBIO_ESTADO;
 80030e4:	230d      	movs	r3, #13
 80030e6:	737b      	strb	r3, [r7, #13]
		xQueueSendFromISR(actuador_q, &actuador, &xHigherPriorityTaskWoken);
 80030e8:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_GPIO_EXTI_Callback+0xa4>)
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	f107 0208 	add.w	r2, r7, #8
 80030f0:	f107 010c 	add.w	r1, r7, #12
 80030f4:	2300      	movs	r3, #0
 80030f6:	f003 f8c3 	bl	8006280 <xQueueGenericSendFromISR>
	}
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d007      	beq.n	8003110 <HAL_GPIO_EXTI_Callback+0x98>
 8003100:	4b07      	ldr	r3, [pc, #28]	; (8003120 <HAL_GPIO_EXTI_Callback+0xa8>)
 8003102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003106:	601a      	str	r2, [r3, #0]
 8003108:	f3bf 8f4f 	dsb	sy
 800310c:	f3bf 8f6f 	isb	sy
}
 8003110:	bf00      	nop
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	2000045c 	.word	0x2000045c
 800311c:	2000044c 	.word	0x2000044c
 8003120:	e000ed04 	.word	0xe000ed04

08003124 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b092      	sub	sp, #72	; 0x48
 8003128:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800312a:	f000 fcc5 	bl	8003ab8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800312e:	f000 f931 	bl	8003394 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003132:	f000 fa1f 	bl	8003574 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003136:	f000 f973 	bl	8003420 <MX_I2C1_Init>
  MX_TIM2_Init();
 800313a:	f000 f9cd 	bl	80034d8 <MX_TIM2_Init>
  MX_I2C2_Init();
 800313e:	f000 f99d 	bl	800347c <MX_I2C2_Init>
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  hal_digitalOutput(LOW, acAlarma);
 8003142:	2200      	movs	r2, #0
 8003144:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003148:	4876      	ldr	r0, [pc, #472]	; (8003324 <main+0x200>)
 800314a:	f001 f990 	bl	800446e <HAL_GPIO_WritePin>
  hal_digitalOutput(LOW, acPuerta);
 800314e:	2200      	movs	r2, #0
 8003150:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003154:	4873      	ldr	r0, [pc, #460]	; (8003324 <main+0x200>)
 8003156:	f001 f98a 	bl	800446e <HAL_GPIO_WritePin>
  hal_digitalOutput(HIGH, ledRojo);
 800315a:	2201      	movs	r2, #1
 800315c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003160:	4870      	ldr	r0, [pc, #448]	; (8003324 <main+0x200>)
 8003162:	f001 f984 	bl	800446e <HAL_GPIO_WritePin>
  hal_digitalOutput(HIGH, ledVerde);
 8003166:	2201      	movs	r2, #1
 8003168:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800316c:	486d      	ldr	r0, [pc, #436]	; (8003324 <main+0x200>)
 800316e:	f001 f97e 	bl	800446e <HAL_GPIO_WritePin>
  //dummyDataMemoryRecording();

  hal_digitalOutput(HIGH,builtinLed);
 8003172:	2201      	movs	r2, #1
 8003174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003178:	486b      	ldr	r0, [pc, #428]	; (8003328 <main+0x204>)
 800317a:	f001 f978 	bl	800446e <HAL_GPIO_WritePin>

  columna_q = xQueueCreate(1, sizeof(columna));
 800317e:	2200      	movs	r2, #0
 8003180:	2101      	movs	r1, #1
 8003182:	2001      	movs	r0, #1
 8003184:	f002 ff0c 	bl	8005fa0 <xQueueGenericCreate>
 8003188:	4603      	mov	r3, r0
 800318a:	4a68      	ldr	r2, [pc, #416]	; (800332c <main+0x208>)
 800318c:	6013      	str	r3, [r2, #0]
  tecla_q = xQueueCreate(1, sizeof(tecla));
 800318e:	2200      	movs	r2, #0
 8003190:	2102      	movs	r1, #2
 8003192:	2001      	movs	r0, #1
 8003194:	f002 ff04 	bl	8005fa0 <xQueueGenericCreate>
 8003198:	4603      	mov	r3, r0
 800319a:	4a65      	ldr	r2, [pc, #404]	; (8003330 <main+0x20c>)
 800319c:	6013      	str	r3, [r2, #0]
  display_q = xQueueCreate(2,sizeof(display));
 800319e:	2200      	movs	r2, #0
 80031a0:	2121      	movs	r1, #33	; 0x21
 80031a2:	2002      	movs	r0, #2
 80031a4:	f002 fefc 	bl	8005fa0 <xQueueGenericCreate>
 80031a8:	4603      	mov	r3, r0
 80031aa:	4a62      	ldr	r2, [pc, #392]	; (8003334 <main+0x210>)
 80031ac:	6013      	str	r3, [r2, #0]
  actuador_q = xQueueCreate(1, sizeof(actuador));
 80031ae:	2200      	movs	r2, #0
 80031b0:	2108      	movs	r1, #8
 80031b2:	2001      	movs	r0, #1
 80031b4:	f002 fef4 	bl	8005fa0 <xQueueGenericCreate>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4a5f      	ldr	r2, [pc, #380]	; (8003338 <main+0x214>)
 80031bc:	6013      	str	r3, [r2, #0]
  reqAcceso_q = xQueueCreate(1, sizeof(usuario));
 80031be:	2200      	movs	r2, #0
 80031c0:	2110      	movs	r1, #16
 80031c2:	2001      	movs	r0, #1
 80031c4:	f002 feec 	bl	8005fa0 <xQueueGenericCreate>
 80031c8:	4603      	mov	r3, r0
 80031ca:	4a5c      	ldr	r2, [pc, #368]	; (800333c <main+0x218>)
 80031cc:	6013      	str	r3, [r2, #0]
  respAcceso_q = xQueueCreate(1, sizeof(usuario));
 80031ce:	2200      	movs	r2, #0
 80031d0:	2110      	movs	r1, #16
 80031d2:	2001      	movs	r0, #1
 80031d4:	f002 fee4 	bl	8005fa0 <xQueueGenericCreate>
 80031d8:	4603      	mov	r3, r0
 80031da:	4a59      	ldr	r2, [pc, #356]	; (8003340 <main+0x21c>)
 80031dc:	6013      	str	r3, [r2, #0]
  flashcmd_q = xQueueCreate(1,sizeof(usuario));
 80031de:	2200      	movs	r2, #0
 80031e0:	2110      	movs	r1, #16
 80031e2:	2001      	movs	r0, #1
 80031e4:	f002 fedc 	bl	8005fa0 <xQueueGenericCreate>
 80031e8:	4603      	mov	r3, r0
 80031ea:	4a56      	ldr	r2, [pc, #344]	; (8003344 <main+0x220>)
 80031ec:	6013      	str	r3, [r2, #0]
  flashdata_q = xQueueCreate(1,sizeof(usuario));
 80031ee:	2200      	movs	r2, #0
 80031f0:	2110      	movs	r1, #16
 80031f2:	2001      	movs	r0, #1
 80031f4:	f002 fed4 	bl	8005fa0 <xQueueGenericCreate>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4a53      	ldr	r2, [pc, #332]	; (8003348 <main+0x224>)
 80031fc:	6013      	str	r3, [r2, #0]

  actuador_aux_q = xQueueCreate(3, sizeof(actuador));
 80031fe:	2200      	movs	r2, #0
 8003200:	2108      	movs	r1, #8
 8003202:	2003      	movs	r0, #3
 8003204:	f002 fecc 	bl	8005fa0 <xQueueGenericCreate>
 8003208:	4603      	mov	r3, r0
 800320a:	4a50      	ldr	r2, [pc, #320]	; (800334c <main+0x228>)
 800320c:	6013      	str	r3, [r2, #0]
  reqAcceso_aux_q = xQueueCreate(3, sizeof(usuario));
 800320e:	2200      	movs	r2, #0
 8003210:	2110      	movs	r1, #16
 8003212:	2003      	movs	r0, #3
 8003214:	f002 fec4 	bl	8005fa0 <xQueueGenericCreate>
 8003218:	4603      	mov	r3, r0
 800321a:	4a4d      	ldr	r2, [pc, #308]	; (8003350 <main+0x22c>)
 800321c:	6013      	str	r3, [r2, #0]
  respAcceso_aux_q = xQueueCreate(3, sizeof(usuario));
 800321e:	2200      	movs	r2, #0
 8003220:	2110      	movs	r1, #16
 8003222:	2003      	movs	r0, #3
 8003224:	f002 febc 	bl	8005fa0 <xQueueGenericCreate>
 8003228:	4603      	mov	r3, r0
 800322a:	4a4a      	ldr	r2, [pc, #296]	; (8003354 <main+0x230>)
 800322c:	6013      	str	r3, [r2, #0]


  if(xTaskCreate(t_Menu, "", stackSize1, NULL, tskIDLE_PRIORITY + prioridad_tMenu, &tMenu_h) != pdPASS)
 800322e:	4b4a      	ldr	r3, [pc, #296]	; (8003358 <main+0x234>)
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2301      	movs	r3, #1
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800323c:	4947      	ldr	r1, [pc, #284]	; (800335c <main+0x238>)
 800323e:	4848      	ldr	r0, [pc, #288]	; (8003360 <main+0x23c>)
 8003240:	f003 fb60 	bl	8006904 <xTaskCreate>
 8003244:	4603      	mov	r3, r0
 8003246:	2b01      	cmp	r3, #1
 8003248:	d002      	beq.n	8003250 <main+0x12c>
	  err(0);
 800324a:	2000      	movs	r0, #0
 800324c:	f7ff ff0e 	bl	800306c <err>
  if(xTaskCreate(t_Teclado, "", stackSize, NULL, tskIDLE_PRIORITY + prioridad_tTeclado, &tTeclado_h) != pdPASS)
 8003250:	4b44      	ldr	r3, [pc, #272]	; (8003364 <main+0x240>)
 8003252:	9301      	str	r3, [sp, #4]
 8003254:	2302      	movs	r3, #2
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	2300      	movs	r3, #0
 800325a:	2280      	movs	r2, #128	; 0x80
 800325c:	493f      	ldr	r1, [pc, #252]	; (800335c <main+0x238>)
 800325e:	4842      	ldr	r0, [pc, #264]	; (8003368 <main+0x244>)
 8003260:	f003 fb50 	bl	8006904 <xTaskCreate>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d002      	beq.n	8003270 <main+0x14c>
	  err(1);
 800326a:	2001      	movs	r0, #1
 800326c:	f7ff fefe 	bl	800306c <err>
  if(xTaskCreate(t_Display, "", stackSize1, NULL, tskIDLE_PRIORITY + prioridad_tDisplay, &tDisplay_h) != pdPASS)
 8003270:	4b3e      	ldr	r3, [pc, #248]	; (800336c <main+0x248>)
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	2301      	movs	r3, #1
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800327e:	4937      	ldr	r1, [pc, #220]	; (800335c <main+0x238>)
 8003280:	483b      	ldr	r0, [pc, #236]	; (8003370 <main+0x24c>)
 8003282:	f003 fb3f 	bl	8006904 <xTaskCreate>
 8003286:	4603      	mov	r3, r0
 8003288:	2b01      	cmp	r3, #1
 800328a:	d002      	beq.n	8003292 <main+0x16e>
	  err(2);
 800328c:	2002      	movs	r0, #2
 800328e:	f7ff feed 	bl	800306c <err>
  if(xTaskCreate(t_Flash, "", stackSize1, NULL, tskIDLE_PRIORITY + prioridad_tFlash, &tFlash_h) != pdPASS)
 8003292:	4b38      	ldr	r3, [pc, #224]	; (8003374 <main+0x250>)
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	2302      	movs	r3, #2
 8003298:	9300      	str	r3, [sp, #0]
 800329a:	2300      	movs	r3, #0
 800329c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a0:	492e      	ldr	r1, [pc, #184]	; (800335c <main+0x238>)
 80032a2:	4835      	ldr	r0, [pc, #212]	; (8003378 <main+0x254>)
 80032a4:	f003 fb2e 	bl	8006904 <xTaskCreate>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <main+0x190>
	  err(3);
 80032ae:	2003      	movs	r0, #3
 80032b0:	f7ff fedc 	bl	800306c <err>
  if(xTaskCreate(t_ControlAcceso, "", stackSize, NULL, tskIDLE_PRIORITY + prioridad_tControlAcceso, &tControlAcceso_h) != pdPASS)
 80032b4:	4b31      	ldr	r3, [pc, #196]	; (800337c <main+0x258>)
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	2301      	movs	r3, #1
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2300      	movs	r3, #0
 80032be:	2280      	movs	r2, #128	; 0x80
 80032c0:	4926      	ldr	r1, [pc, #152]	; (800335c <main+0x238>)
 80032c2:	482f      	ldr	r0, [pc, #188]	; (8003380 <main+0x25c>)
 80032c4:	f003 fb1e 	bl	8006904 <xTaskCreate>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d002      	beq.n	80032d4 <main+0x1b0>
	  err(4);
 80032ce:	2004      	movs	r0, #4
 80032d0:	f7ff fecc 	bl	800306c <err>
  if(xTaskCreate(t_Actuadores, "", stackSize5, NULL, tskIDLE_PRIORITY + prioridad_tActuadores, &tActuadores_h) != pdPASS)
 80032d4:	4b2b      	ldr	r3, [pc, #172]	; (8003384 <main+0x260>)
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	2303      	movs	r3, #3
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	2300      	movs	r3, #0
 80032de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032e2:	491e      	ldr	r1, [pc, #120]	; (800335c <main+0x238>)
 80032e4:	4828      	ldr	r0, [pc, #160]	; (8003388 <main+0x264>)
 80032e6:	f003 fb0d 	bl	8006904 <xTaskCreate>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d002      	beq.n	80032f6 <main+0x1d2>
	  err(5);
 80032f0:	2005      	movs	r0, #5
 80032f2:	f7ff febb 	bl	800306c <err>
  if(xTaskCreate(t_Comextern, "", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + prioridad_tComextern, &tComextern_h) != pdPASS)
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <main+0x268>)
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	2301      	movs	r3, #1
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	2300      	movs	r3, #0
 8003300:	2280      	movs	r2, #128	; 0x80
 8003302:	4916      	ldr	r1, [pc, #88]	; (800335c <main+0x238>)
 8003304:	4822      	ldr	r0, [pc, #136]	; (8003390 <main+0x26c>)
 8003306:	f003 fafd 	bl	8006904 <xTaskCreate>
 800330a:	4603      	mov	r3, r0
 800330c:	2b01      	cmp	r3, #1
 800330e:	d002      	beq.n	8003316 <main+0x1f2>
  	  err(6);
 8003310:	2006      	movs	r0, #6
 8003312:	f7ff feab 	bl	800306c <err>

  vTaskStartScheduler();
 8003316:	f003 fc95 	bl	8006c44 <vTaskStartScheduler>
 800331a:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 800331c:	4618      	mov	r0, r3
 800331e:	3740      	adds	r7, #64	; 0x40
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40010c00 	.word	0x40010c00
 8003328:	40011000 	.word	0x40011000
 800332c:	2000045c 	.word	0x2000045c
 8003330:	200002fc 	.word	0x200002fc
 8003334:	20000458 	.word	0x20000458
 8003338:	2000044c 	.word	0x2000044c
 800333c:	2000024c 	.word	0x2000024c
 8003340:	20000450 	.word	0x20000450
 8003344:	20000244 	.word	0x20000244
 8003348:	20000248 	.word	0x20000248
 800334c:	200002f8 	.word	0x200002f8
 8003350:	20000400 	.word	0x20000400
 8003354:	20000454 	.word	0x20000454
 8003358:	200000bc 	.word	0x200000bc
 800335c:	0800a1b0 	.word	0x0800a1b0
 8003360:	08001199 	.word	0x08001199
 8003364:	200000c8 	.word	0x200000c8
 8003368:	08002a25 	.word	0x08002a25
 800336c:	200000c0 	.word	0x200000c0
 8003370:	08002075 	.word	0x08002075
 8003374:	200000c4 	.word	0x200000c4
 8003378:	08002259 	.word	0x08002259
 800337c:	200000cc 	.word	0x200000cc
 8003380:	08002349 	.word	0x08002349
 8003384:	200000d0 	.word	0x200000d0
 8003388:	08002891 	.word	0x08002891
 800338c:	200000d4 	.word	0x200000d4
 8003390:	08002c71 	.word	0x08002c71

08003394 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b090      	sub	sp, #64	; 0x40
 8003398:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800339a:	f107 0318 	add.w	r3, r7, #24
 800339e:	2228      	movs	r2, #40	; 0x28
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f005 fa0e 	bl	80087c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033a8:	1d3b      	adds	r3, r7, #4
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	605a      	str	r2, [r3, #4]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80033c0:	2300      	movs	r3, #0
 80033c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033c4:	2301      	movs	r3, #1
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033c8:	2302      	movs	r3, #2
 80033ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80033d2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033d8:	f107 0318 	add.w	r3, r7, #24
 80033dc:	4618      	mov	r0, r3
 80033de:	f001 fd13 	bl	8004e08 <HAL_RCC_OscConfig>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80033e8:	f000 f98e 	bl	8003708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033ec:	230f      	movs	r3, #15
 80033ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033f0:	2302      	movs	r3, #2
 80033f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033f4:	2300      	movs	r3, #0
 80033f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f001 ff7e 	bl	8005308 <HAL_RCC_ClockConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003412:	f000 f979 	bl	8003708 <Error_Handler>
  }
}
 8003416:	bf00      	nop
 8003418:	3740      	adds	r7, #64	; 0x40
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
	...

08003420 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003424:	4b12      	ldr	r3, [pc, #72]	; (8003470 <MX_I2C1_Init+0x50>)
 8003426:	4a13      	ldr	r2, [pc, #76]	; (8003474 <MX_I2C1_Init+0x54>)
 8003428:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800342a:	4b11      	ldr	r3, [pc, #68]	; (8003470 <MX_I2C1_Init+0x50>)
 800342c:	4a12      	ldr	r2, [pc, #72]	; (8003478 <MX_I2C1_Init+0x58>)
 800342e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003430:	4b0f      	ldr	r3, [pc, #60]	; (8003470 <MX_I2C1_Init+0x50>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <MX_I2C1_Init+0x50>)
 8003438:	2200      	movs	r2, #0
 800343a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800343c:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <MX_I2C1_Init+0x50>)
 800343e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003442:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003444:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <MX_I2C1_Init+0x50>)
 8003446:	2200      	movs	r2, #0
 8003448:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <MX_I2C1_Init+0x50>)
 800344c:	2200      	movs	r2, #0
 800344e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003450:	4b07      	ldr	r3, [pc, #28]	; (8003470 <MX_I2C1_Init+0x50>)
 8003452:	2200      	movs	r2, #0
 8003454:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003456:	4b06      	ldr	r3, [pc, #24]	; (8003470 <MX_I2C1_Init+0x50>)
 8003458:	2200      	movs	r2, #0
 800345a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800345c:	4804      	ldr	r0, [pc, #16]	; (8003470 <MX_I2C1_Init+0x50>)
 800345e:	f001 f837 	bl	80044d0 <HAL_I2C_Init>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003468:	f000 f94e 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800346c:	bf00      	nop
 800346e:	bd80      	pop	{r7, pc}
 8003470:	20000250 	.word	0x20000250
 8003474:	40005400 	.word	0x40005400
 8003478:	000186a0 	.word	0x000186a0

0800347c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003480:	4b12      	ldr	r3, [pc, #72]	; (80034cc <MX_I2C2_Init+0x50>)
 8003482:	4a13      	ldr	r2, [pc, #76]	; (80034d0 <MX_I2C2_Init+0x54>)
 8003484:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003486:	4b11      	ldr	r3, [pc, #68]	; (80034cc <MX_I2C2_Init+0x50>)
 8003488:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <MX_I2C2_Init+0x58>)
 800348a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800348c:	4b0f      	ldr	r3, [pc, #60]	; (80034cc <MX_I2C2_Init+0x50>)
 800348e:	2200      	movs	r2, #0
 8003490:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003492:	4b0e      	ldr	r3, [pc, #56]	; (80034cc <MX_I2C2_Init+0x50>)
 8003494:	2200      	movs	r2, #0
 8003496:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <MX_I2C2_Init+0x50>)
 800349a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800349e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <MX_I2C2_Init+0x50>)
 80034a2:	2200      	movs	r2, #0
 80034a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80034a6:	4b09      	ldr	r3, [pc, #36]	; (80034cc <MX_I2C2_Init+0x50>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ac:	4b07      	ldr	r3, [pc, #28]	; (80034cc <MX_I2C2_Init+0x50>)
 80034ae:	2200      	movs	r2, #0
 80034b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <MX_I2C2_Init+0x50>)
 80034b4:	2200      	movs	r2, #0
 80034b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034b8:	4804      	ldr	r0, [pc, #16]	; (80034cc <MX_I2C2_Init+0x50>)
 80034ba:	f001 f809 	bl	80044d0 <HAL_I2C_Init>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80034c4:	f000 f920 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80034c8:	bf00      	nop
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	200002a4 	.word	0x200002a4
 80034d0:	40005800 	.word	0x40005800
 80034d4:	000186a0 	.word	0x000186a0

080034d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034de:	f107 0308 	add.w	r3, r7, #8
 80034e2:	2200      	movs	r2, #0
 80034e4:	601a      	str	r2, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	609a      	str	r2, [r3, #8]
 80034ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ec:	463b      	mov	r3, r7
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]
 80034f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034f4:	4b1e      	ldr	r3, [pc, #120]	; (8003570 <MX_TIM2_Init+0x98>)
 80034f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 80034fc:	4b1c      	ldr	r3, [pc, #112]	; (8003570 <MX_TIM2_Init+0x98>)
 80034fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8003502:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <MX_TIM2_Init+0x98>)
 8003506:	2200      	movs	r2, #0
 8003508:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65000;
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <MX_TIM2_Init+0x98>)
 800350c:	f64f 52e8 	movw	r2, #65000	; 0xfde8
 8003510:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003512:	4b17      	ldr	r3, [pc, #92]	; (8003570 <MX_TIM2_Init+0x98>)
 8003514:	2200      	movs	r2, #0
 8003516:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003518:	4b15      	ldr	r3, [pc, #84]	; (8003570 <MX_TIM2_Init+0x98>)
 800351a:	2200      	movs	r2, #0
 800351c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800351e:	4814      	ldr	r0, [pc, #80]	; (8003570 <MX_TIM2_Init+0x98>)
 8003520:	f002 f8b0 	bl	8005684 <HAL_TIM_Base_Init>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800352a:	f000 f8ed 	bl	8003708 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800352e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003532:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003534:	f107 0308 	add.w	r3, r7, #8
 8003538:	4619      	mov	r1, r3
 800353a:	480d      	ldr	r0, [pc, #52]	; (8003570 <MX_TIM2_Init+0x98>)
 800353c:	f002 fa4c 	bl	80059d8 <HAL_TIM_ConfigClockSource>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003546:	f000 f8df 	bl	8003708 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003552:	463b      	mov	r3, r7
 8003554:	4619      	mov	r1, r3
 8003556:	4806      	ldr	r0, [pc, #24]	; (8003570 <MX_TIM2_Init+0x98>)
 8003558:	f002 fc22 	bl	8005da0 <HAL_TIMEx_MasterConfigSynchronization>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003562:	f000 f8d1 	bl	8003708 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	20000404 	.word	0x20000404

08003574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b088      	sub	sp, #32
 8003578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800357a:	f107 0310 	add.w	r3, r7, #16
 800357e:	2200      	movs	r2, #0
 8003580:	601a      	str	r2, [r3, #0]
 8003582:	605a      	str	r2, [r3, #4]
 8003584:	609a      	str	r2, [r3, #8]
 8003586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003588:	4b51      	ldr	r3, [pc, #324]	; (80036d0 <MX_GPIO_Init+0x15c>)
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	4a50      	ldr	r2, [pc, #320]	; (80036d0 <MX_GPIO_Init+0x15c>)
 800358e:	f043 0310 	orr.w	r3, r3, #16
 8003592:	6193      	str	r3, [r2, #24]
 8003594:	4b4e      	ldr	r3, [pc, #312]	; (80036d0 <MX_GPIO_Init+0x15c>)
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	f003 0310 	and.w	r3, r3, #16
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035a2:	699b      	ldr	r3, [r3, #24]
 80035a4:	4a4a      	ldr	r2, [pc, #296]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035a6:	f043 0320 	orr.w	r3, r3, #32
 80035aa:	6193      	str	r3, [r2, #24]
 80035ac:	4b48      	ldr	r3, [pc, #288]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f003 0320 	and.w	r3, r3, #32
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b8:	4b45      	ldr	r3, [pc, #276]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	4a44      	ldr	r2, [pc, #272]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035be:	f043 0308 	orr.w	r3, r3, #8
 80035c2:	6193      	str	r3, [r2, #24]
 80035c4:	4b42      	ldr	r3, [pc, #264]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035c6:	699b      	ldr	r3, [r3, #24]
 80035c8:	f003 0308 	and.w	r3, r3, #8
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d0:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4a3e      	ldr	r2, [pc, #248]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035d6:	f043 0304 	orr.w	r3, r3, #4
 80035da:	6193      	str	r3, [r2, #24]
 80035dc:	4b3c      	ldr	r3, [pc, #240]	; (80036d0 <MX_GPIO_Init+0x15c>)
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	603b      	str	r3, [r7, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(builtinLed_GPIO_Port, builtinLed_Pin, GPIO_PIN_RESET);
 80035e8:	2200      	movs	r2, #0
 80035ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035ee:	4839      	ldr	r0, [pc, #228]	; (80036d4 <MX_GPIO_Init+0x160>)
 80035f0:	f000 ff3d 	bl	800446e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, acPuerta_Pin|acAlarma_Pin|ledRojo_Pin|ledVerde_Pin
 80035f4:	2200      	movs	r2, #0
 80035f6:	f24f 0118 	movw	r1, #61464	; 0xf018
 80035fa:	4837      	ldr	r0, [pc, #220]	; (80036d8 <MX_GPIO_Init+0x164>)
 80035fc:	f000 ff37 	bl	800446e <HAL_GPIO_WritePin>
                          |fil2_Pin|fil1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, fil4_Pin|fil3_Pin, GPIO_PIN_RESET);
 8003600:	2200      	movs	r2, #0
 8003602:	f44f 4110 	mov.w	r1, #36864	; 0x9000
 8003606:	4835      	ldr	r0, [pc, #212]	; (80036dc <MX_GPIO_Init+0x168>)
 8003608:	f000 ff31 	bl	800446e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : builtinLed_Pin */
  GPIO_InitStruct.Pin = builtinLed_Pin;
 800360c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003610:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003612:	2301      	movs	r3, #1
 8003614:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003616:	2300      	movs	r3, #0
 8003618:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361a:	2302      	movs	r3, #2
 800361c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(builtinLed_GPIO_Port, &GPIO_InitStruct);
 800361e:	f107 0310 	add.w	r3, r7, #16
 8003622:	4619      	mov	r1, r3
 8003624:	482b      	ldr	r0, [pc, #172]	; (80036d4 <MX_GPIO_Init+0x160>)
 8003626:	f000 fd87 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA_Pin */
  GPIO_InitStruct.Pin = PA_Pin;
 800362a:	2302      	movs	r3, #2
 800362c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800362e:	4b2c      	ldr	r3, [pc, #176]	; (80036e0 <MX_GPIO_Init+0x16c>)
 8003630:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003632:	2302      	movs	r3, #2
 8003634:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PA_GPIO_Port, &GPIO_InitStruct);
 8003636:	f107 0310 	add.w	r3, r7, #16
 800363a:	4619      	mov	r1, r3
 800363c:	4826      	ldr	r0, [pc, #152]	; (80036d8 <MX_GPIO_Init+0x164>)
 800363e:	f000 fd7b 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : acPuerta_Pin acAlarma_Pin ledRojo_Pin ledVerde_Pin
                           fil2_Pin fil1_Pin */
  GPIO_InitStruct.Pin = acPuerta_Pin|acAlarma_Pin|ledRojo_Pin|ledVerde_Pin
 8003642:	f24f 0318 	movw	r3, #61464	; 0xf018
 8003646:	613b      	str	r3, [r7, #16]
                          |fil2_Pin|fil1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003648:	2301      	movs	r3, #1
 800364a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800364c:	2300      	movs	r3, #0
 800364e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003650:	2302      	movs	r3, #2
 8003652:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	4619      	mov	r1, r3
 800365a:	481f      	ldr	r0, [pc, #124]	; (80036d8 <MX_GPIO_Init+0x164>)
 800365c:	f000 fd6c 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : col4_Pin col3_Pin col2_Pin col1_Pin */
  GPIO_InitStruct.Pin = col4_Pin|col3_Pin|col2_Pin|col1_Pin;
 8003660:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8003664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003666:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <MX_GPIO_Init+0x16c>)
 8003668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800366a:	2301      	movs	r3, #1
 800366c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366e:	f107 0310 	add.w	r3, r7, #16
 8003672:	4619      	mov	r1, r3
 8003674:	4819      	ldr	r0, [pc, #100]	; (80036dc <MX_GPIO_Init+0x168>)
 8003676:	f000 fd5f 	bl	8004138 <HAL_GPIO_Init>

  /*Configure GPIO pins : fil4_Pin fil3_Pin */
  GPIO_InitStruct.Pin = fil4_Pin|fil3_Pin;
 800367a:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 800367e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003680:	2301      	movs	r3, #1
 8003682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003688:	2302      	movs	r3, #2
 800368a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800368c:	f107 0310 	add.w	r3, r7, #16
 8003690:	4619      	mov	r1, r3
 8003692:	4812      	ldr	r0, [pc, #72]	; (80036dc <MX_GPIO_Init+0x168>)
 8003694:	f000 fd50 	bl	8004138 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 8, 0);
 8003698:	2200      	movs	r2, #0
 800369a:	2108      	movs	r1, #8
 800369c:	2007      	movs	r0, #7
 800369e:	f000 fb16 	bl	8003cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80036a2:	2007      	movs	r0, #7
 80036a4:	f000 fb2f 	bl	8003d06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 8, 0);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2108      	movs	r1, #8
 80036ac:	2017      	movs	r0, #23
 80036ae:	f000 fb0e 	bl	8003cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80036b2:	2017      	movs	r0, #23
 80036b4:	f000 fb27 	bl	8003d06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 8, 0);
 80036b8:	2200      	movs	r2, #0
 80036ba:	2108      	movs	r1, #8
 80036bc:	2028      	movs	r0, #40	; 0x28
 80036be:	f000 fb06 	bl	8003cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80036c2:	2028      	movs	r0, #40	; 0x28
 80036c4:	f000 fb1f 	bl	8003d06 <HAL_NVIC_EnableIRQ>

}
 80036c8:	bf00      	nop
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40011000 	.word	0x40011000
 80036d8:	40010c00 	.word	0x40010c00
 80036dc:	40010800 	.word	0x40010800
 80036e0:	10210000 	.word	0x10210000

080036e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
//	actuador_t acc2;
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a04      	ldr	r2, [pc, #16]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80036f6:	f000 f9f5 	bl	8003ae4 <HAL_IncTick>
//	  xQueueSendFromISR(actuador_q, &acc2, &xHigherPriorityTaskWoken);
//	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//  }

  /* USER CODE END Callback 1 */
}
 80036fa:	bf00      	nop
 80036fc:	3708      	adds	r7, #8
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00

08003708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800370c:	b672      	cpsid	i
}
 800370e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003710:	e7fe      	b.n	8003710 <Error_Handler+0x8>
	...

08003714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003714:	b480      	push	{r7}
 8003716:	b085      	sub	sp, #20
 8003718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800371a:	4b15      	ldr	r3, [pc, #84]	; (8003770 <HAL_MspInit+0x5c>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	4a14      	ldr	r2, [pc, #80]	; (8003770 <HAL_MspInit+0x5c>)
 8003720:	f043 0301 	orr.w	r3, r3, #1
 8003724:	6193      	str	r3, [r2, #24]
 8003726:	4b12      	ldr	r3, [pc, #72]	; (8003770 <HAL_MspInit+0x5c>)
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <HAL_MspInit+0x5c>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	4a0e      	ldr	r2, [pc, #56]	; (8003770 <HAL_MspInit+0x5c>)
 8003738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800373c:	61d3      	str	r3, [r2, #28]
 800373e:	4b0c      	ldr	r3, [pc, #48]	; (8003770 <HAL_MspInit+0x5c>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800374a:	4b0a      	ldr	r3, [pc, #40]	; (8003774 <HAL_MspInit+0x60>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003756:	60fb      	str	r3, [r7, #12]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800375e:	60fb      	str	r3, [r7, #12]
 8003760:	4a04      	ldr	r2, [pc, #16]	; (8003774 <HAL_MspInit+0x60>)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003766:	bf00      	nop
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000
 8003774:	40010000 	.word	0x40010000

08003778 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b08c      	sub	sp, #48	; 0x30
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	609a      	str	r2, [r3, #8]
 800378c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a32      	ldr	r2, [pc, #200]	; (800385c <HAL_I2C_MspInit+0xe4>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d133      	bne.n	8003800 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4a30      	ldr	r2, [pc, #192]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 800379e:	f043 0308 	orr.w	r3, r3, #8
 80037a2:	6193      	str	r3, [r2, #24]
 80037a4:	4b2e      	ldr	r3, [pc, #184]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80037b0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80037b6:	2312      	movs	r3, #18
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037be:	f107 031c 	add.w	r3, r7, #28
 80037c2:	4619      	mov	r1, r3
 80037c4:	4827      	ldr	r0, [pc, #156]	; (8003864 <HAL_I2C_MspInit+0xec>)
 80037c6:	f000 fcb7 	bl	8004138 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80037ca:	4b27      	ldr	r3, [pc, #156]	; (8003868 <HAL_I2C_MspInit+0xf0>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80037d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037da:	f043 0302 	orr.w	r3, r3, #2
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e0:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_I2C_MspInit+0xf0>)
 80037e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037e4:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80037e6:	4b1e      	ldr	r3, [pc, #120]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	4a1d      	ldr	r2, [pc, #116]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 80037ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037f0:	61d3      	str	r3, [r2, #28]
 80037f2:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80037fe:	e029      	b.n	8003854 <HAL_I2C_MspInit+0xdc>
  else if(hi2c->Instance==I2C2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <HAL_I2C_MspInit+0xf4>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d124      	bne.n	8003854 <HAL_I2C_MspInit+0xdc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	4a14      	ldr	r2, [pc, #80]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6193      	str	r3, [r2, #24]
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	613b      	str	r3, [r7, #16]
 8003820:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003822:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003828:	2312      	movs	r3, #18
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800382c:	2303      	movs	r3, #3
 800382e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003830:	f107 031c 	add.w	r3, r7, #28
 8003834:	4619      	mov	r1, r3
 8003836:	480b      	ldr	r0, [pc, #44]	; (8003864 <HAL_I2C_MspInit+0xec>)
 8003838:	f000 fc7e 	bl	8004138 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800383c:	4b08      	ldr	r3, [pc, #32]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 800383e:	69db      	ldr	r3, [r3, #28]
 8003840:	4a07      	ldr	r2, [pc, #28]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 8003842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003846:	61d3      	str	r3, [r2, #28]
 8003848:	4b05      	ldr	r3, [pc, #20]	; (8003860 <HAL_I2C_MspInit+0xe8>)
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	bf00      	nop
 8003856:	3730      	adds	r7, #48	; 0x30
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	40005400 	.word	0x40005400
 8003860:	40021000 	.word	0x40021000
 8003864:	40010c00 	.word	0x40010c00
 8003868:	40010000 	.word	0x40010000
 800386c:	40005800 	.word	0x40005800

08003870 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003880:	d113      	bne.n	80038aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <HAL_TIM_Base_MspInit+0x44>)
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	4a0b      	ldr	r2, [pc, #44]	; (80038b4 <HAL_TIM_Base_MspInit+0x44>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	61d3      	str	r3, [r2, #28]
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_TIM_Base_MspInit+0x44>)
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	60fb      	str	r3, [r7, #12]
 8003898:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 8, 0);
 800389a:	2200      	movs	r2, #0
 800389c:	2108      	movs	r1, #8
 800389e:	201c      	movs	r0, #28
 80038a0:	f000 fa15 	bl	8003cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80038a4:	201c      	movs	r0, #28
 80038a6:	f000 fa2e 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000

080038b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08c      	sub	sp, #48	; 0x30
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80038c8:	2200      	movs	r2, #0
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	2019      	movs	r0, #25
 80038ce:	f000 f9fe 	bl	8003cce <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80038d2:	2019      	movs	r0, #25
 80038d4:	f000 fa17 	bl	8003d06 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80038d8:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <HAL_InitTick+0x9c>)
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	4a1d      	ldr	r2, [pc, #116]	; (8003954 <HAL_InitTick+0x9c>)
 80038de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038e2:	6193      	str	r3, [r2, #24]
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_InitTick+0x9c>)
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ec:	60fb      	str	r3, [r7, #12]
 80038ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038f0:	f107 0210 	add.w	r2, r7, #16
 80038f4:	f107 0314 	add.w	r3, r7, #20
 80038f8:	4611      	mov	r1, r2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fe74 	bl	80055e8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003900:	f001 fe5e 	bl	80055c0 <HAL_RCC_GetPCLK2Freq>
 8003904:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	4a13      	ldr	r2, [pc, #76]	; (8003958 <HAL_InitTick+0xa0>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	0c9b      	lsrs	r3, r3, #18
 8003910:	3b01      	subs	r3, #1
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003914:	4b11      	ldr	r3, [pc, #68]	; (800395c <HAL_InitTick+0xa4>)
 8003916:	4a12      	ldr	r2, [pc, #72]	; (8003960 <HAL_InitTick+0xa8>)
 8003918:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_InitTick+0xa4>)
 800391c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003920:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003922:	4a0e      	ldr	r2, [pc, #56]	; (800395c <HAL_InitTick+0xa4>)
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003928:	4b0c      	ldr	r3, [pc, #48]	; (800395c <HAL_InitTick+0xa4>)
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <HAL_InitTick+0xa4>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8003934:	4809      	ldr	r0, [pc, #36]	; (800395c <HAL_InitTick+0xa4>)
 8003936:	f001 fea5 	bl	8005684 <HAL_TIM_Base_Init>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8003940:	4806      	ldr	r0, [pc, #24]	; (800395c <HAL_InitTick+0xa4>)
 8003942:	f001 feef 	bl	8005724 <HAL_TIM_Base_Start_IT>
 8003946:	4603      	mov	r3, r0
 8003948:	e000      	b.n	800394c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
}
 800394c:	4618      	mov	r0, r3
 800394e:	3730      	adds	r7, #48	; 0x30
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	431bde83 	.word	0x431bde83
 800395c:	20000460 	.word	0x20000460
 8003960:	40012c00 	.word	0x40012c00

08003964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <NMI_Handler+0x4>

0800396a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396e:	e7fe      	b.n	800396e <HardFault_Handler+0x4>

08003970 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003974:	e7fe      	b.n	8003974 <MemManage_Handler+0x4>

08003976 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003976:	b480      	push	{r7}
 8003978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800397a:	e7fe      	b.n	800397a <BusFault_Handler+0x4>

0800397c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800397c:	b480      	push	{r7}
 800397e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003980:	e7fe      	b.n	8003980 <UsageFault_Handler+0x4>

08003982 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	bc80      	pop	{r7}
 800398c:	4770      	bx	lr

0800398e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003992:	2002      	movs	r0, #2
 8003994:	f000 fd84 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003998:	bf00      	nop
 800399a:	bd80      	pop	{r7, pc}

0800399c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80039a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80039a4:	f000 fd7c 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80039a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039ac:	f000 fd78 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <TIM1_UP_IRQHandler+0x10>)
 80039ba:	f001 ff05 	bl	80057c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000460 	.word	0x20000460

080039c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <TIM2_IRQHandler+0x10>)
 80039ce:	f001 fefb 	bl	80057c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000404 	.word	0x20000404

080039dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80039e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80039e4:	f000 fd5c 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80039e8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80039ec:	f000 fd58 	bl	80044a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80039f0:	bf00      	nop
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039fc:	4a14      	ldr	r2, [pc, #80]	; (8003a50 <_sbrk+0x5c>)
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <_sbrk+0x60>)
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <_sbrk+0x64>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d102      	bne.n	8003a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <_sbrk+0x64>)
 8003a12:	4a12      	ldr	r2, [pc, #72]	; (8003a5c <_sbrk+0x68>)
 8003a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <_sbrk+0x64>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d207      	bcs.n	8003a34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a24:	f004 fe86 	bl	8008734 <__errno>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	220c      	movs	r2, #12
 8003a2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a32:	e009      	b.n	8003a48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a34:	4b08      	ldr	r3, [pc, #32]	; (8003a58 <_sbrk+0x64>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a3a:	4b07      	ldr	r3, [pc, #28]	; (8003a58 <_sbrk+0x64>)
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	4a05      	ldr	r2, [pc, #20]	; (8003a58 <_sbrk+0x64>)
 8003a44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a46:	68fb      	ldr	r3, [r7, #12]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20005000 	.word	0x20005000
 8003a54:	00000400 	.word	0x00000400
 8003a58:	200000dc 	.word	0x200000dc
 8003a5c:	20000520 	.word	0x20000520

08003a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a64:	bf00      	nop
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003a6c:	f7ff fff8 	bl	8003a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003a70:	480b      	ldr	r0, [pc, #44]	; (8003aa0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8003a72:	490c      	ldr	r1, [pc, #48]	; (8003aa4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003a74:	4a0c      	ldr	r2, [pc, #48]	; (8003aa8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a78:	e002      	b.n	8003a80 <LoopCopyDataInit>

08003a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7e:	3304      	adds	r3, #4

08003a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a84:	d3f9      	bcc.n	8003a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003a88:	4c09      	ldr	r4, [pc, #36]	; (8003ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a8c:	e001      	b.n	8003a92 <LoopFillZerobss>

08003a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a90:	3204      	adds	r2, #4

08003a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a94:	d3fb      	bcc.n	8003a8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003a96:	f004 fe53 	bl	8008740 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003a9a:	f7ff fb43 	bl	8003124 <main>
  bx lr
 8003a9e:	4770      	bx	lr
  ldr r0, =_sdata
 8003aa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003aa8:	0800a278 	.word	0x0800a278
  ldr r2, =_sbss
 8003aac:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8003ab0:	20000520 	.word	0x20000520

08003ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003ab4:	e7fe      	b.n	8003ab4 <ADC1_2_IRQHandler>
	...

08003ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <HAL_Init+0x28>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a07      	ldr	r2, [pc, #28]	; (8003ae0 <HAL_Init+0x28>)
 8003ac2:	f043 0310 	orr.w	r3, r3, #16
 8003ac6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac8:	2003      	movs	r0, #3
 8003aca:	f000 f8f5 	bl	8003cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ace:	2000      	movs	r0, #0
 8003ad0:	f7ff fef2 	bl	80038b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ad4:	f7ff fe1e 	bl	8003714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40022000 	.word	0x40022000

08003ae4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <HAL_IncTick+0x1c>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	461a      	mov	r2, r3
 8003aee:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_IncTick+0x20>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4413      	add	r3, r2
 8003af4:	4a03      	ldr	r2, [pc, #12]	; (8003b04 <HAL_IncTick+0x20>)
 8003af6:	6013      	str	r3, [r2, #0]
}
 8003af8:	bf00      	nop
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr
 8003b00:	20000018 	.word	0x20000018
 8003b04:	200004a8 	.word	0x200004a8

08003b08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b0c:	4b02      	ldr	r3, [pc, #8]	; (8003b18 <HAL_GetTick+0x10>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	200004a8 	.word	0x200004a8

08003b1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b24:	f7ff fff0 	bl	8003b08 <HAL_GetTick>
 8003b28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d005      	beq.n	8003b42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_Delay+0x44>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	4413      	add	r3, r2
 8003b40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b42:	bf00      	nop
 8003b44:	f7ff ffe0 	bl	8003b08 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d8f7      	bhi.n	8003b44 <HAL_Delay+0x28>
  {
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3710      	adds	r7, #16
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	20000018 	.word	0x20000018

08003b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b74:	4b0c      	ldr	r3, [pc, #48]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b80:	4013      	ands	r3, r2
 8003b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b96:	4a04      	ldr	r2, [pc, #16]	; (8003ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	60d3      	str	r3, [r2, #12]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bc80      	pop	{r7}
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	0a1b      	lsrs	r3, r3, #8
 8003bb6:	f003 0307 	and.w	r3, r3, #7
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bc80      	pop	{r7}
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	db0b      	blt.n	8003bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bda:	79fb      	ldrb	r3, [r7, #7]
 8003bdc:	f003 021f 	and.w	r2, r3, #31
 8003be0:	4906      	ldr	r1, [pc, #24]	; (8003bfc <__NVIC_EnableIRQ+0x34>)
 8003be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	2001      	movs	r0, #1
 8003bea:	fa00 f202 	lsl.w	r2, r0, r2
 8003bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bc80      	pop	{r7}
 8003bfa:	4770      	bx	lr
 8003bfc:	e000e100 	.word	0xe000e100

08003c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	6039      	str	r1, [r7, #0]
 8003c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	db0a      	blt.n	8003c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	490c      	ldr	r1, [pc, #48]	; (8003c4c <__NVIC_SetPriority+0x4c>)
 8003c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1e:	0112      	lsls	r2, r2, #4
 8003c20:	b2d2      	uxtb	r2, r2
 8003c22:	440b      	add	r3, r1
 8003c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c28:	e00a      	b.n	8003c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	4908      	ldr	r1, [pc, #32]	; (8003c50 <__NVIC_SetPriority+0x50>)
 8003c30:	79fb      	ldrb	r3, [r7, #7]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3b04      	subs	r3, #4
 8003c38:	0112      	lsls	r2, r2, #4
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	761a      	strb	r2, [r3, #24]
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000e100 	.word	0xe000e100
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b089      	sub	sp, #36	; 0x24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 0307 	and.w	r3, r3, #7
 8003c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f1c3 0307 	rsb	r3, r3, #7
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	bf28      	it	cs
 8003c72:	2304      	movcs	r3, #4
 8003c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	2b06      	cmp	r3, #6
 8003c7c:	d902      	bls.n	8003c84 <NVIC_EncodePriority+0x30>
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	3b03      	subs	r3, #3
 8003c82:	e000      	b.n	8003c86 <NVIC_EncodePriority+0x32>
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c88:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c92:	43da      	mvns	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	401a      	ands	r2, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca6:	43d9      	mvns	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cac:	4313      	orrs	r3, r2
         );
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7ff ff4f 	bl	8003b64 <__NVIC_SetPriorityGrouping>
}
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b086      	sub	sp, #24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
 8003cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce0:	f7ff ff64 	bl	8003bac <__NVIC_GetPriorityGrouping>
 8003ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	6978      	ldr	r0, [r7, #20]
 8003cec:	f7ff ffb2 	bl	8003c54 <NVIC_EncodePriority>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f7ff ff81 	bl	8003c00 <__NVIC_SetPriority>
}
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b082      	sub	sp, #8
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff ff57 	bl	8003bc8 <__NVIC_EnableIRQ>
}
 8003d1a:	bf00      	nop
 8003d1c:	3708      	adds	r7, #8
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
	...

08003d24 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d26:	b087      	sub	sp, #28
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003d3e:	4b2f      	ldr	r3, [pc, #188]	; (8003dfc <HAL_FLASH_Program+0xd8>)
 8003d40:	7e1b      	ldrb	r3, [r3, #24]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_FLASH_Program+0x26>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e054      	b.n	8003df4 <HAL_FLASH_Program+0xd0>
 8003d4a:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <HAL_FLASH_Program+0xd8>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003d50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003d54:	f000 f8b2 	bl	8003ebc <FLASH_WaitForLastOperation>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d144      	bne.n	8003dec <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d102      	bne.n	8003d6e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	757b      	strb	r3, [r7, #21]
 8003d6c:	e007      	b.n	8003d7e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d102      	bne.n	8003d7a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003d74:	2302      	movs	r3, #2
 8003d76:	757b      	strb	r3, [r7, #21]
 8003d78:	e001      	b.n	8003d7e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8003d7a:	2304      	movs	r3, #4
 8003d7c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8003d7e:	2300      	movs	r3, #0
 8003d80:	75bb      	strb	r3, [r7, #22]
 8003d82:	e02d      	b.n	8003de0 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8003d84:	7dbb      	ldrb	r3, [r7, #22]
 8003d86:	005a      	lsls	r2, r3, #1
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	eb02 0c03 	add.w	ip, r2, r3
 8003d8e:	7dbb      	ldrb	r3, [r7, #22]
 8003d90:	0119      	lsls	r1, r3, #4
 8003d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d96:	f1c1 0620 	rsb	r6, r1, #32
 8003d9a:	f1a1 0020 	sub.w	r0, r1, #32
 8003d9e:	fa22 f401 	lsr.w	r4, r2, r1
 8003da2:	fa03 f606 	lsl.w	r6, r3, r6
 8003da6:	4334      	orrs	r4, r6
 8003da8:	fa23 f000 	lsr.w	r0, r3, r0
 8003dac:	4304      	orrs	r4, r0
 8003dae:	fa23 f501 	lsr.w	r5, r3, r1
 8003db2:	b2a3      	uxth	r3, r4
 8003db4:	4619      	mov	r1, r3
 8003db6:	4660      	mov	r0, ip
 8003db8:	f000 f864 	bl	8003e84 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003dbc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003dc0:	f000 f87c 	bl	8003ebc <FLASH_WaitForLastOperation>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8003dc8:	4b0d      	ldr	r3, [pc, #52]	; (8003e00 <HAL_FLASH_Program+0xdc>)
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	4a0c      	ldr	r2, [pc, #48]	; (8003e00 <HAL_FLASH_Program+0xdc>)
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d107      	bne.n	8003dea <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8003dda:	7dbb      	ldrb	r3, [r7, #22]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	75bb      	strb	r3, [r7, #22]
 8003de0:	7dba      	ldrb	r2, [r7, #22]
 8003de2:	7d7b      	ldrb	r3, [r7, #21]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d3cd      	bcc.n	8003d84 <HAL_FLASH_Program+0x60>
 8003de8:	e000      	b.n	8003dec <HAL_FLASH_Program+0xc8>
      {
        break;
 8003dea:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_FLASH_Program+0xd8>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	761a      	strb	r2, [r3, #24]

  return status;
 8003df2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	371c      	adds	r7, #28
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dfc:	200004b0 	.word	0x200004b0
 8003e00:	40022000 	.word	0x40022000

08003e04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <HAL_FLASH_Unlock+0x40>)
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_FLASH_Unlock+0x40>)
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	; (8003e48 <HAL_FLASH_Unlock+0x44>)
 8003e1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003e20:	4b08      	ldr	r3, [pc, #32]	; (8003e44 <HAL_FLASH_Unlock+0x40>)
 8003e22:	4a0a      	ldr	r2, [pc, #40]	; (8003e4c <HAL_FLASH_Unlock+0x48>)
 8003e24:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003e26:	4b07      	ldr	r3, [pc, #28]	; (8003e44 <HAL_FLASH_Unlock+0x40>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d001      	beq.n	8003e36 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8003e36:	79fb      	ldrb	r3, [r7, #7]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	40022000 	.word	0x40022000
 8003e48:	45670123 	.word	0x45670123
 8003e4c:	cdef89ab 	.word	0xcdef89ab

08003e50 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_FLASH_Lock+0x1c>)
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	4a04      	ldr	r2, [pc, #16]	; (8003e6c <HAL_FLASH_Lock+0x1c>)
 8003e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e5e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bc80      	pop	{r7}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40022000 	.word	0x40022000

08003e70 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003e74:	4b02      	ldr	r3, [pc, #8]	; (8003e80 <HAL_FLASH_GetError+0x10>)
 8003e76:	69db      	ldr	r3, [r3, #28]
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bc80      	pop	{r7}
 8003e7e:	4770      	bx	lr
 8003e80:	200004b0 	.word	0x200004b0

08003e84 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003e90:	4b08      	ldr	r3, [pc, #32]	; (8003eb4 <FLASH_Program_HalfWord+0x30>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8003e96:	4b08      	ldr	r3, [pc, #32]	; (8003eb8 <FLASH_Program_HalfWord+0x34>)
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	4a07      	ldr	r2, [pc, #28]	; (8003eb8 <FLASH_Program_HalfWord+0x34>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	801a      	strh	r2, [r3, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bc80      	pop	{r7}
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	200004b0 	.word	0x200004b0
 8003eb8:	40022000 	.word	0x40022000

08003ebc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b084      	sub	sp, #16
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003ec4:	f7ff fe20 	bl	8003b08 <HAL_GetTick>
 8003ec8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003eca:	e010      	b.n	8003eee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed2:	d00c      	beq.n	8003eee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <FLASH_WaitForLastOperation+0x2e>
 8003eda:	f7ff fe15 	bl	8003b08 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d201      	bcs.n	8003eee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e025      	b.n	8003f3a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003eee:	4b15      	ldr	r3, [pc, #84]	; (8003f44 <FLASH_WaitForLastOperation+0x88>)
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f003 0301 	and.w	r3, r3, #1
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1e8      	bne.n	8003ecc <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <FLASH_WaitForLastOperation+0x88>)
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003f06:	4b0f      	ldr	r3, [pc, #60]	; (8003f44 <FLASH_WaitForLastOperation+0x88>)
 8003f08:	2220      	movs	r2, #32
 8003f0a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f0c:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <FLASH_WaitForLastOperation+0x88>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10b      	bne.n	8003f30 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <FLASH_WaitForLastOperation+0x88>)
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d105      	bne.n	8003f30 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f24:	4b07      	ldr	r3, [pc, #28]	; (8003f44 <FLASH_WaitForLastOperation+0x88>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003f30:	f000 f80a 	bl	8003f48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e000      	b.n	8003f3a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40022000 	.word	0x40022000

08003f48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8003f52:	4b23      	ldr	r3, [pc, #140]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d009      	beq.n	8003f72 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003f5e:	4b21      	ldr	r3, [pc, #132]	; (8003fe4 <FLASH_SetErrorCode+0x9c>)
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	4a1f      	ldr	r2, [pc, #124]	; (8003fe4 <FLASH_SetErrorCode+0x9c>)
 8003f68:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f043 0310 	orr.w	r3, r3, #16
 8003f70:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003f72:	4b1b      	ldr	r3, [pc, #108]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003f7e:	4b19      	ldr	r3, [pc, #100]	; (8003fe4 <FLASH_SetErrorCode+0x9c>)
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	4a17      	ldr	r2, [pc, #92]	; (8003fe4 <FLASH_SetErrorCode+0x9c>)
 8003f88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f043 0304 	orr.w	r3, r3, #4
 8003f90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8003f92:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003f94:	69db      	ldr	r3, [r3, #28]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8003f9e:	4b11      	ldr	r3, [pc, #68]	; (8003fe4 <FLASH_SetErrorCode+0x9c>)
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	4a0f      	ldr	r2, [pc, #60]	; (8003fe4 <FLASH_SetErrorCode+0x9c>)
 8003fa8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003faa:	4b0d      	ldr	r3, [pc, #52]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4a0c      	ldr	r2, [pc, #48]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003fb0:	f023 0301 	bic.w	r3, r3, #1
 8003fb4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f240 1201 	movw	r2, #257	; 0x101
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d106      	bne.n	8003fce <FLASH_SetErrorCode+0x86>
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	4a06      	ldr	r2, [pc, #24]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003fc6:	f023 0301 	bic.w	r3, r3, #1
 8003fca:	61d3      	str	r3, [r2, #28]
}  
 8003fcc:	e002      	b.n	8003fd4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8003fce:	4a04      	ldr	r2, [pc, #16]	; (8003fe0 <FLASH_SetErrorCode+0x98>)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	60d3      	str	r3, [r2, #12]
}  
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bc80      	pop	{r7}
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	40022000 	.word	0x40022000
 8003fe4:	200004b0 	.word	0x200004b0

08003fe8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	; (80040b8 <HAL_FLASHEx_Erase+0xd0>)
 8003ffc:	7e1b      	ldrb	r3, [r3, #24]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_FLASHEx_Erase+0x1e>
 8004002:	2302      	movs	r3, #2
 8004004:	e053      	b.n	80040ae <HAL_FLASHEx_Erase+0xc6>
 8004006:	4b2c      	ldr	r3, [pc, #176]	; (80040b8 <HAL_FLASHEx_Erase+0xd0>)
 8004008:	2201      	movs	r2, #1
 800400a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b02      	cmp	r3, #2
 8004012:	d116      	bne.n	8004042 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004014:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004018:	f7ff ff50 	bl	8003ebc <FLASH_WaitForLastOperation>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d141      	bne.n	80040a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8004022:	2001      	movs	r0, #1
 8004024:	f000 f84c 	bl	80040c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004028:	f24c 3050 	movw	r0, #50000	; 0xc350
 800402c:	f7ff ff46 	bl	8003ebc <FLASH_WaitForLastOperation>
 8004030:	4603      	mov	r3, r0
 8004032:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8004034:	4b21      	ldr	r3, [pc, #132]	; (80040bc <HAL_FLASHEx_Erase+0xd4>)
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	4a20      	ldr	r2, [pc, #128]	; (80040bc <HAL_FLASHEx_Erase+0xd4>)
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6113      	str	r3, [r2, #16]
 8004040:	e031      	b.n	80040a6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8004042:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004046:	f7ff ff39 	bl	8003ebc <FLASH_WaitForLastOperation>
 800404a:	4603      	mov	r3, r0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d12a      	bne.n	80040a6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	e019      	b.n	8004094 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8004060:	68b8      	ldr	r0, [r7, #8]
 8004062:	f000 f849 	bl	80040f8 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004066:	f24c 3050 	movw	r0, #50000	; 0xc350
 800406a:	f7ff ff27 	bl	8003ebc <FLASH_WaitForLastOperation>
 800406e:	4603      	mov	r3, r0
 8004070:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004072:	4b12      	ldr	r3, [pc, #72]	; (80040bc <HAL_FLASHEx_Erase+0xd4>)
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	4a11      	ldr	r2, [pc, #68]	; (80040bc <HAL_FLASHEx_Erase+0xd4>)
 8004078:	f023 0302 	bic.w	r3, r3, #2
 800407c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	601a      	str	r2, [r3, #0]
            break;
 800408a:	e00c      	b.n	80040a6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004092:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	029a      	lsls	r2, r3, #10
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d3dc      	bcc.n	8004060 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80040a6:	4b04      	ldr	r3, [pc, #16]	; (80040b8 <HAL_FLASHEx_Erase+0xd0>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	761a      	strb	r2, [r3, #24]

  return status;
 80040ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200004b0 	.word	0x200004b0
 80040bc:	40022000 	.word	0x40022000

080040c0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80040c8:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <FLASH_MassErase+0x30>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80040ce:	4b09      	ldr	r3, [pc, #36]	; (80040f4 <FLASH_MassErase+0x34>)
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	4a08      	ldr	r2, [pc, #32]	; (80040f4 <FLASH_MassErase+0x34>)
 80040d4:	f043 0304 	orr.w	r3, r3, #4
 80040d8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <FLASH_MassErase+0x34>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	4a05      	ldr	r2, [pc, #20]	; (80040f4 <FLASH_MassErase+0x34>)
 80040e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e4:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	200004b0 	.word	0x200004b0
 80040f4:	40022000 	.word	0x40022000

080040f8 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004100:	4b0b      	ldr	r3, [pc, #44]	; (8004130 <FLASH_PageErase+0x38>)
 8004102:	2200      	movs	r2, #0
 8004104:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8004106:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <FLASH_PageErase+0x3c>)
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	4a0a      	ldr	r2, [pc, #40]	; (8004134 <FLASH_PageErase+0x3c>)
 800410c:	f043 0302 	orr.w	r3, r3, #2
 8004110:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8004112:	4a08      	ldr	r2, [pc, #32]	; (8004134 <FLASH_PageErase+0x3c>)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8004118:	4b06      	ldr	r3, [pc, #24]	; (8004134 <FLASH_PageErase+0x3c>)
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	4a05      	ldr	r2, [pc, #20]	; (8004134 <FLASH_PageErase+0x3c>)
 800411e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004122:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	200004b0 	.word	0x200004b0
 8004134:	40022000 	.word	0x40022000

08004138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004138:	b480      	push	{r7}
 800413a:	b08b      	sub	sp, #44	; 0x2c
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004142:	2300      	movs	r3, #0
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004146:	2300      	movs	r3, #0
 8004148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800414a:	e169      	b.n	8004420 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800414c:	2201      	movs	r2, #1
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4013      	ands	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	429a      	cmp	r2, r3
 8004166:	f040 8158 	bne.w	800441a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	4a9a      	ldr	r2, [pc, #616]	; (80043d8 <HAL_GPIO_Init+0x2a0>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d05e      	beq.n	8004232 <HAL_GPIO_Init+0xfa>
 8004174:	4a98      	ldr	r2, [pc, #608]	; (80043d8 <HAL_GPIO_Init+0x2a0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d875      	bhi.n	8004266 <HAL_GPIO_Init+0x12e>
 800417a:	4a98      	ldr	r2, [pc, #608]	; (80043dc <HAL_GPIO_Init+0x2a4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d058      	beq.n	8004232 <HAL_GPIO_Init+0xfa>
 8004180:	4a96      	ldr	r2, [pc, #600]	; (80043dc <HAL_GPIO_Init+0x2a4>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d86f      	bhi.n	8004266 <HAL_GPIO_Init+0x12e>
 8004186:	4a96      	ldr	r2, [pc, #600]	; (80043e0 <HAL_GPIO_Init+0x2a8>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d052      	beq.n	8004232 <HAL_GPIO_Init+0xfa>
 800418c:	4a94      	ldr	r2, [pc, #592]	; (80043e0 <HAL_GPIO_Init+0x2a8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d869      	bhi.n	8004266 <HAL_GPIO_Init+0x12e>
 8004192:	4a94      	ldr	r2, [pc, #592]	; (80043e4 <HAL_GPIO_Init+0x2ac>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d04c      	beq.n	8004232 <HAL_GPIO_Init+0xfa>
 8004198:	4a92      	ldr	r2, [pc, #584]	; (80043e4 <HAL_GPIO_Init+0x2ac>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d863      	bhi.n	8004266 <HAL_GPIO_Init+0x12e>
 800419e:	4a92      	ldr	r2, [pc, #584]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d046      	beq.n	8004232 <HAL_GPIO_Init+0xfa>
 80041a4:	4a90      	ldr	r2, [pc, #576]	; (80043e8 <HAL_GPIO_Init+0x2b0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d85d      	bhi.n	8004266 <HAL_GPIO_Init+0x12e>
 80041aa:	2b12      	cmp	r3, #18
 80041ac:	d82a      	bhi.n	8004204 <HAL_GPIO_Init+0xcc>
 80041ae:	2b12      	cmp	r3, #18
 80041b0:	d859      	bhi.n	8004266 <HAL_GPIO_Init+0x12e>
 80041b2:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <HAL_GPIO_Init+0x80>)
 80041b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b8:	08004233 	.word	0x08004233
 80041bc:	0800420d 	.word	0x0800420d
 80041c0:	0800421f 	.word	0x0800421f
 80041c4:	08004261 	.word	0x08004261
 80041c8:	08004267 	.word	0x08004267
 80041cc:	08004267 	.word	0x08004267
 80041d0:	08004267 	.word	0x08004267
 80041d4:	08004267 	.word	0x08004267
 80041d8:	08004267 	.word	0x08004267
 80041dc:	08004267 	.word	0x08004267
 80041e0:	08004267 	.word	0x08004267
 80041e4:	08004267 	.word	0x08004267
 80041e8:	08004267 	.word	0x08004267
 80041ec:	08004267 	.word	0x08004267
 80041f0:	08004267 	.word	0x08004267
 80041f4:	08004267 	.word	0x08004267
 80041f8:	08004267 	.word	0x08004267
 80041fc:	08004215 	.word	0x08004215
 8004200:	08004229 	.word	0x08004229
 8004204:	4a79      	ldr	r2, [pc, #484]	; (80043ec <HAL_GPIO_Init+0x2b4>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800420a:	e02c      	b.n	8004266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	623b      	str	r3, [r7, #32]
          break;
 8004212:	e029      	b.n	8004268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	3304      	adds	r3, #4
 800421a:	623b      	str	r3, [r7, #32]
          break;
 800421c:	e024      	b.n	8004268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	3308      	adds	r3, #8
 8004224:	623b      	str	r3, [r7, #32]
          break;
 8004226:	e01f      	b.n	8004268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	330c      	adds	r3, #12
 800422e:	623b      	str	r3, [r7, #32]
          break;
 8004230:	e01a      	b.n	8004268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800423a:	2304      	movs	r3, #4
 800423c:	623b      	str	r3, [r7, #32]
          break;
 800423e:	e013      	b.n	8004268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d105      	bne.n	8004254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004248:	2308      	movs	r3, #8
 800424a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69fa      	ldr	r2, [r7, #28]
 8004250:	611a      	str	r2, [r3, #16]
          break;
 8004252:	e009      	b.n	8004268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004254:	2308      	movs	r3, #8
 8004256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	615a      	str	r2, [r3, #20]
          break;
 800425e:	e003      	b.n	8004268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004260:	2300      	movs	r3, #0
 8004262:	623b      	str	r3, [r7, #32]
          break;
 8004264:	e000      	b.n	8004268 <HAL_GPIO_Init+0x130>
          break;
 8004266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	2bff      	cmp	r3, #255	; 0xff
 800426c:	d801      	bhi.n	8004272 <HAL_GPIO_Init+0x13a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	e001      	b.n	8004276 <HAL_GPIO_Init+0x13e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	3304      	adds	r3, #4
 8004276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2bff      	cmp	r3, #255	; 0xff
 800427c:	d802      	bhi.n	8004284 <HAL_GPIO_Init+0x14c>
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	e002      	b.n	800428a <HAL_GPIO_Init+0x152>
 8004284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004286:	3b08      	subs	r3, #8
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	210f      	movs	r1, #15
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	401a      	ands	r2, r3
 800429c:	6a39      	ldr	r1, [r7, #32]
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	431a      	orrs	r2, r3
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80b1 	beq.w	800441a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042b8:	4b4d      	ldr	r3, [pc, #308]	; (80043f0 <HAL_GPIO_Init+0x2b8>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4a4c      	ldr	r2, [pc, #304]	; (80043f0 <HAL_GPIO_Init+0x2b8>)
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	6193      	str	r3, [r2, #24]
 80042c4:	4b4a      	ldr	r3, [pc, #296]	; (80043f0 <HAL_GPIO_Init+0x2b8>)
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80042d0:	4a48      	ldr	r2, [pc, #288]	; (80043f4 <HAL_GPIO_Init+0x2bc>)
 80042d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	3302      	adds	r3, #2
 80042d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e0:	f003 0303 	and.w	r3, r3, #3
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	220f      	movs	r2, #15
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	43db      	mvns	r3, r3
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4013      	ands	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a40      	ldr	r2, [pc, #256]	; (80043f8 <HAL_GPIO_Init+0x2c0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d013      	beq.n	8004324 <HAL_GPIO_Init+0x1ec>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a3f      	ldr	r2, [pc, #252]	; (80043fc <HAL_GPIO_Init+0x2c4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d00d      	beq.n	8004320 <HAL_GPIO_Init+0x1e8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a3e      	ldr	r2, [pc, #248]	; (8004400 <HAL_GPIO_Init+0x2c8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d007      	beq.n	800431c <HAL_GPIO_Init+0x1e4>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3d      	ldr	r2, [pc, #244]	; (8004404 <HAL_GPIO_Init+0x2cc>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d101      	bne.n	8004318 <HAL_GPIO_Init+0x1e0>
 8004314:	2303      	movs	r3, #3
 8004316:	e006      	b.n	8004326 <HAL_GPIO_Init+0x1ee>
 8004318:	2304      	movs	r3, #4
 800431a:	e004      	b.n	8004326 <HAL_GPIO_Init+0x1ee>
 800431c:	2302      	movs	r3, #2
 800431e:	e002      	b.n	8004326 <HAL_GPIO_Init+0x1ee>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_GPIO_Init+0x1ee>
 8004324:	2300      	movs	r3, #0
 8004326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004328:	f002 0203 	and.w	r2, r2, #3
 800432c:	0092      	lsls	r2, r2, #2
 800432e:	4093      	lsls	r3, r2
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004336:	492f      	ldr	r1, [pc, #188]	; (80043f4 <HAL_GPIO_Init+0x2bc>)
 8004338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	3302      	adds	r3, #2
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d006      	beq.n	800435e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 8004352:	689a      	ldr	r2, [r3, #8]
 8004354:	492c      	ldr	r1, [pc, #176]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	608b      	str	r3, [r1, #8]
 800435c:	e006      	b.n	800436c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800435e:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	43db      	mvns	r3, r3
 8004366:	4928      	ldr	r1, [pc, #160]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 8004368:	4013      	ands	r3, r2
 800436a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d006      	beq.n	8004386 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004378:	4b23      	ldr	r3, [pc, #140]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 800437a:	68da      	ldr	r2, [r3, #12]
 800437c:	4922      	ldr	r1, [pc, #136]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	4313      	orrs	r3, r2
 8004382:	60cb      	str	r3, [r1, #12]
 8004384:	e006      	b.n	8004394 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004386:	4b20      	ldr	r3, [pc, #128]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	43db      	mvns	r3, r3
 800438e:	491e      	ldr	r1, [pc, #120]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 8004390:	4013      	ands	r3, r2
 8004392:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d006      	beq.n	80043ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043a0:	4b19      	ldr	r3, [pc, #100]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4918      	ldr	r1, [pc, #96]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	604b      	str	r3, [r1, #4]
 80043ac:	e006      	b.n	80043bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043ae:	4b16      	ldr	r3, [pc, #88]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	43db      	mvns	r3, r3
 80043b6:	4914      	ldr	r1, [pc, #80]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d021      	beq.n	800440c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80043c8:	4b0f      	ldr	r3, [pc, #60]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	490e      	ldr	r1, [pc, #56]	; (8004408 <HAL_GPIO_Init+0x2d0>)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
 80043d4:	e021      	b.n	800441a <HAL_GPIO_Init+0x2e2>
 80043d6:	bf00      	nop
 80043d8:	10320000 	.word	0x10320000
 80043dc:	10310000 	.word	0x10310000
 80043e0:	10220000 	.word	0x10220000
 80043e4:	10210000 	.word	0x10210000
 80043e8:	10120000 	.word	0x10120000
 80043ec:	10110000 	.word	0x10110000
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40010800 	.word	0x40010800
 80043fc:	40010c00 	.word	0x40010c00
 8004400:	40011000 	.word	0x40011000
 8004404:	40011400 	.word	0x40011400
 8004408:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_GPIO_Init+0x304>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	43db      	mvns	r3, r3
 8004414:	4909      	ldr	r1, [pc, #36]	; (800443c <HAL_GPIO_Init+0x304>)
 8004416:	4013      	ands	r3, r2
 8004418:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	3301      	adds	r3, #1
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	2b00      	cmp	r3, #0
 800442c:	f47f ae8e 	bne.w	800414c <HAL_GPIO_Init+0x14>
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	372c      	adds	r7, #44	; 0x2c
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr
 800443c:	40010400 	.word	0x40010400

08004440 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689a      	ldr	r2, [r3, #8]
 8004450:	887b      	ldrh	r3, [r7, #2]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004458:	2301      	movs	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	e001      	b.n	8004462 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	807b      	strh	r3, [r7, #2]
 800447a:	4613      	mov	r3, r2
 800447c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800447e:	787b      	ldrb	r3, [r7, #1]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004484:	887a      	ldrh	r2, [r7, #2]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800448a:	e003      	b.n	8004494 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800448c:	887b      	ldrh	r3, [r7, #2]
 800448e:	041a      	lsls	r2, r3, #16
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr
	...

080044a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80044aa:	4b08      	ldr	r3, [pc, #32]	; (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ac:	695a      	ldr	r2, [r3, #20]
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d006      	beq.n	80044c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044b8:	88fb      	ldrh	r3, [r7, #6]
 80044ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fdda 	bl	8003078 <HAL_GPIO_EXTI_Callback>
  }
}
 80044c4:	bf00      	nop
 80044c6:	3708      	adds	r7, #8
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40010400 	.word	0x40010400

080044d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d101      	bne.n	80044e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e12b      	b.n	800473a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d106      	bne.n	80044fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7ff f93e 	bl	8003778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2224      	movs	r2, #36	; 0x24
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 0201 	bic.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004522:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004532:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004534:	f001 f830 	bl	8005598 <HAL_RCC_GetPCLK1Freq>
 8004538:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	4a81      	ldr	r2, [pc, #516]	; (8004744 <HAL_I2C_Init+0x274>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d807      	bhi.n	8004554 <HAL_I2C_Init+0x84>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	4a80      	ldr	r2, [pc, #512]	; (8004748 <HAL_I2C_Init+0x278>)
 8004548:	4293      	cmp	r3, r2
 800454a:	bf94      	ite	ls
 800454c:	2301      	movls	r3, #1
 800454e:	2300      	movhi	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e006      	b.n	8004562 <HAL_I2C_Init+0x92>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	4a7d      	ldr	r2, [pc, #500]	; (800474c <HAL_I2C_Init+0x27c>)
 8004558:	4293      	cmp	r3, r2
 800455a:	bf94      	ite	ls
 800455c:	2301      	movls	r3, #1
 800455e:	2300      	movhi	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d001      	beq.n	800456a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e0e7      	b.n	800473a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a78      	ldr	r2, [pc, #480]	; (8004750 <HAL_I2C_Init+0x280>)
 800456e:	fba2 2303 	umull	r2, r3, r2, r3
 8004572:	0c9b      	lsrs	r3, r3, #18
 8004574:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	4a6a      	ldr	r2, [pc, #424]	; (8004744 <HAL_I2C_Init+0x274>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d802      	bhi.n	80045a4 <HAL_I2C_Init+0xd4>
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	3301      	adds	r3, #1
 80045a2:	e009      	b.n	80045b8 <HAL_I2C_Init+0xe8>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045aa:	fb02 f303 	mul.w	r3, r2, r3
 80045ae:	4a69      	ldr	r2, [pc, #420]	; (8004754 <HAL_I2C_Init+0x284>)
 80045b0:	fba2 2303 	umull	r2, r3, r2, r3
 80045b4:	099b      	lsrs	r3, r3, #6
 80045b6:	3301      	adds	r3, #1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	6812      	ldr	r2, [r2, #0]
 80045bc:	430b      	orrs	r3, r1
 80045be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	495c      	ldr	r1, [pc, #368]	; (8004744 <HAL_I2C_Init+0x274>)
 80045d4:	428b      	cmp	r3, r1
 80045d6:	d819      	bhi.n	800460c <HAL_I2C_Init+0x13c>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	1e59      	subs	r1, r3, #1
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045ec:	400b      	ands	r3, r1
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00a      	beq.n	8004608 <HAL_I2C_Init+0x138>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e59      	subs	r1, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	005b      	lsls	r3, r3, #1
 80045fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8004600:	3301      	adds	r3, #1
 8004602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004606:	e051      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004608:	2304      	movs	r3, #4
 800460a:	e04f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d111      	bne.n	8004638 <HAL_I2C_Init+0x168>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	1e58      	subs	r0, r3, #1
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6859      	ldr	r1, [r3, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	005b      	lsls	r3, r3, #1
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	e012      	b.n	800465e <HAL_I2C_Init+0x18e>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e58      	subs	r0, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6859      	ldr	r1, [r3, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	0099      	lsls	r1, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	fbb0 f3f3 	udiv	r3, r0, r3
 800464e:	3301      	adds	r3, #1
 8004650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <HAL_I2C_Init+0x196>
 8004662:	2301      	movs	r3, #1
 8004664:	e022      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10e      	bne.n	800468c <HAL_I2C_Init+0x1bc>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1e58      	subs	r0, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	460b      	mov	r3, r1
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	440b      	add	r3, r1
 800467c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004680:	3301      	adds	r3, #1
 8004682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004686:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800468a:	e00f      	b.n	80046ac <HAL_I2C_Init+0x1dc>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	1e58      	subs	r0, r3, #1
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	460b      	mov	r3, r1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	0099      	lsls	r1, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	fbb0 f3f3 	udiv	r3, r0, r3
 80046a2:	3301      	adds	r3, #1
 80046a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6a1b      	ldr	r3, [r3, #32]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6911      	ldr	r1, [r2, #16]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68d2      	ldr	r2, [r2, #12]
 80046e6:	4311      	orrs	r1, r2
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	6812      	ldr	r2, [r2, #0]
 80046ec:	430b      	orrs	r3, r1
 80046ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68db      	ldr	r3, [r3, #12]
 80046f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695a      	ldr	r2, [r3, #20]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	431a      	orrs	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	430a      	orrs	r2, r1
 800470a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2200      	movs	r2, #0
 800472e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004738:	2300      	movs	r3, #0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	000186a0 	.word	0x000186a0
 8004748:	001e847f 	.word	0x001e847f
 800474c:	003d08ff 	.word	0x003d08ff
 8004750:	431bde83 	.word	0x431bde83
 8004754:	10624dd3 	.word	0x10624dd3

08004758 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607a      	str	r2, [r7, #4]
 8004762:	461a      	mov	r2, r3
 8004764:	460b      	mov	r3, r1
 8004766:	817b      	strh	r3, [r7, #10]
 8004768:	4613      	mov	r3, r2
 800476a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800476c:	f7ff f9cc 	bl	8003b08 <HAL_GetTick>
 8004770:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 80e0 	bne.w	8004940 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	9300      	str	r3, [sp, #0]
 8004784:	2319      	movs	r3, #25
 8004786:	2201      	movs	r2, #1
 8004788:	4970      	ldr	r1, [pc, #448]	; (800494c <HAL_I2C_Master_Transmit+0x1f4>)
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f000 f964 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004796:	2302      	movs	r3, #2
 8004798:	e0d3      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	d101      	bne.n	80047a8 <HAL_I2C_Master_Transmit+0x50>
 80047a4:	2302      	movs	r3, #2
 80047a6:	e0cc      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d007      	beq.n	80047ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2210      	movs	r2, #16
 80047ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2200      	movs	r2, #0
 80047f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	893a      	ldrh	r2, [r7, #8]
 80047fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004804:	b29a      	uxth	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a50      	ldr	r2, [pc, #320]	; (8004950 <HAL_I2C_Master_Transmit+0x1f8>)
 800480e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004810:	8979      	ldrh	r1, [r7, #10]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	68f8      	ldr	r0, [r7, #12]
 8004818:	f000 f89c 	bl	8004954 <I2C_MasterRequestWrite>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e08d      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004826:	2300      	movs	r3, #0
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	613b      	str	r3, [r7, #16]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699b      	ldr	r3, [r3, #24]
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800483c:	e066      	b.n	800490c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	6a39      	ldr	r1, [r7, #32]
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f000 fa22 	bl	8004c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00d      	beq.n	800486a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	2b04      	cmp	r3, #4
 8004854:	d107      	bne.n	8004866 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e06b      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	781a      	ldrb	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	1c5a      	adds	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b29a      	uxth	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b04      	cmp	r3, #4
 80048a6:	d11b      	bne.n	80048e0 <HAL_I2C_Master_Transmit+0x188>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d017      	beq.n	80048e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	781a      	ldrb	r2, [r3, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	6a39      	ldr	r1, [r7, #32]
 80048e4:	68f8      	ldr	r0, [r7, #12]
 80048e6:	f000 fa19 	bl	8004d1c <I2C_WaitOnBTFFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f4:	2b04      	cmp	r3, #4
 80048f6:	d107      	bne.n	8004908 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004906:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e01a      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004910:	2b00      	cmp	r3, #0
 8004912:	d194      	bne.n	800483e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800493c:	2300      	movs	r3, #0
 800493e:	e000      	b.n	8004942 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004940:	2302      	movs	r3, #2
  }
}
 8004942:	4618      	mov	r0, r3
 8004944:	3718      	adds	r7, #24
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	00100002 	.word	0x00100002
 8004950:	ffff0000 	.word	0xffff0000

08004954 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af02      	add	r7, sp, #8
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
 8004960:	460b      	mov	r3, r1
 8004962:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2b08      	cmp	r3, #8
 800496e:	d006      	beq.n	800497e <I2C_MasterRequestWrite+0x2a>
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d003      	beq.n	800497e <I2C_MasterRequestWrite+0x2a>
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800497c:	d108      	bne.n	8004990 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e00b      	b.n	80049a8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	2b12      	cmp	r3, #18
 8004996:	d107      	bne.n	80049a8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f000 f84f 	bl	8004a58 <I2C_WaitOnFlagUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00d      	beq.n	80049dc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ce:	d103      	bne.n	80049d8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e035      	b.n	8004a48 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049e4:	d108      	bne.n	80049f8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80049e6:	897b      	ldrh	r3, [r7, #10]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	461a      	mov	r2, r3
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80049f4:	611a      	str	r2, [r3, #16]
 80049f6:	e01b      	b.n	8004a30 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049f8:	897b      	ldrh	r3, [r7, #10]
 80049fa:	11db      	asrs	r3, r3, #7
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	f003 0306 	and.w	r3, r3, #6
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f063 030f 	orn	r3, r3, #15
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	490e      	ldr	r1, [pc, #56]	; (8004a50 <I2C_MasterRequestWrite+0xfc>)
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f898 	bl	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d001      	beq.n	8004a26 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e010      	b.n	8004a48 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004a26:	897b      	ldrh	r3, [r7, #10]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4907      	ldr	r1, [pc, #28]	; (8004a54 <I2C_MasterRequestWrite+0x100>)
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 f888 	bl	8004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	00010008 	.word	0x00010008
 8004a54:	00010002 	.word	0x00010002

08004a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	603b      	str	r3, [r7, #0]
 8004a64:	4613      	mov	r3, r2
 8004a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	e048      	b.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a70:	d044      	beq.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a72:	f7ff f849 	bl	8003b08 <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	683a      	ldr	r2, [r7, #0]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d302      	bcc.n	8004a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d139      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	0c1b      	lsrs	r3, r3, #16
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d10d      	bne.n	8004aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	43da      	mvns	r2, r3
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	b29b      	uxth	r3, r3
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	bf0c      	ite	eq
 8004aa4:	2301      	moveq	r3, #1
 8004aa6:	2300      	movne	r3, #0
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	461a      	mov	r2, r3
 8004aac:	e00c      	b.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	43da      	mvns	r2, r3
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	bf0c      	ite	eq
 8004ac0:	2301      	moveq	r3, #1
 8004ac2:	2300      	movne	r3, #0
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d116      	bne.n	8004afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	f043 0220 	orr.w	r2, r3, #32
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e023      	b.n	8004b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	0c1b      	lsrs	r3, r3, #16
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d10d      	bne.n	8004b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	43da      	mvns	r2, r3
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	e00c      	b.n	8004b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	43da      	mvns	r2, r3
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	bf0c      	ite	eq
 8004b34:	2301      	moveq	r3, #1
 8004b36:	2300      	movne	r3, #0
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	d093      	beq.n	8004a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5a:	e071      	b.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b6a:	d123      	bne.n	8004bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba0:	f043 0204 	orr.w	r2, r3, #4
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e067      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d041      	beq.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbc:	f7fe ffa4 	bl	8003b08 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d136      	bne.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	0c1b      	lsrs	r3, r3, #16
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d10c      	bne.n	8004bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	43da      	mvns	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	4013      	ands	r3, r2
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	bf14      	ite	ne
 8004bee:	2301      	movne	r3, #1
 8004bf0:	2300      	moveq	r3, #0
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	e00b      	b.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d016      	beq.n	8004c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c2c:	f043 0220 	orr.w	r2, r3, #32
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e021      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	0c1b      	lsrs	r3, r3, #16
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d10c      	bne.n	8004c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	695b      	ldr	r3, [r3, #20]
 8004c50:	43da      	mvns	r2, r3
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4013      	ands	r3, r2
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	bf14      	ite	ne
 8004c5c:	2301      	movne	r3, #1
 8004c5e:	2300      	moveq	r3, #0
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	e00b      	b.n	8004c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	43da      	mvns	r2, r3
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	4013      	ands	r3, r2
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bf14      	ite	ne
 8004c76:	2301      	movne	r3, #1
 8004c78:	2300      	moveq	r3, #0
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f47f af6d 	bne.w	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c98:	e034      	b.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f886 	bl	8004dac <I2C_IsAcknowledgeFailed>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e034      	b.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb0:	d028      	beq.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cb2:	f7fe ff29 	bl	8003b08 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d302      	bcc.n	8004cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d11d      	bne.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd2:	2b80      	cmp	r3, #128	; 0x80
 8004cd4:	d016      	beq.n	8004d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	f043 0220 	orr.w	r2, r3, #32
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e007      	b.n	8004d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d0e:	2b80      	cmp	r3, #128	; 0x80
 8004d10:	d1c3      	bne.n	8004c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3710      	adds	r7, #16
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}

08004d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b084      	sub	sp, #16
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d28:	e034      	b.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f000 f83e 	bl	8004dac <I2C_IsAcknowledgeFailed>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e034      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d028      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d42:	f7fe fee1 	bl	8003b08 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d302      	bcc.n	8004d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11d      	bne.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0304 	and.w	r3, r3, #4
 8004d62:	2b04      	cmp	r3, #4
 8004d64:	d016      	beq.n	8004d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d80:	f043 0220 	orr.w	r2, r3, #32
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e007      	b.n	8004da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f003 0304 	and.w	r3, r3, #4
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d1c3      	bne.n	8004d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3710      	adds	r7, #16
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc2:	d11b      	bne.n	8004dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2220      	movs	r2, #32
 8004dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	f043 0204 	orr.w	r2, r3, #4
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	e000      	b.n	8004dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dfc:	2300      	movs	r3, #0
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr

08004e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e26c      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 8087 	beq.w	8004f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e28:	4b92      	ldr	r3, [pc, #584]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d00c      	beq.n	8004e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e34:	4b8f      	ldr	r3, [pc, #572]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	f003 030c 	and.w	r3, r3, #12
 8004e3c:	2b08      	cmp	r3, #8
 8004e3e:	d112      	bne.n	8004e66 <HAL_RCC_OscConfig+0x5e>
 8004e40:	4b8c      	ldr	r3, [pc, #560]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4c:	d10b      	bne.n	8004e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e4e:	4b89      	ldr	r3, [pc, #548]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d06c      	beq.n	8004f34 <HAL_RCC_OscConfig+0x12c>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d168      	bne.n	8004f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e246      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e6e:	d106      	bne.n	8004e7e <HAL_RCC_OscConfig+0x76>
 8004e70:	4b80      	ldr	r3, [pc, #512]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a7f      	ldr	r2, [pc, #508]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e7a:	6013      	str	r3, [r2, #0]
 8004e7c:	e02e      	b.n	8004edc <HAL_RCC_OscConfig+0xd4>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d10c      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x98>
 8004e86:	4b7b      	ldr	r3, [pc, #492]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a7a      	ldr	r2, [pc, #488]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	4b78      	ldr	r3, [pc, #480]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a77      	ldr	r2, [pc, #476]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9c:	6013      	str	r3, [r2, #0]
 8004e9e:	e01d      	b.n	8004edc <HAL_RCC_OscConfig+0xd4>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ea8:	d10c      	bne.n	8004ec4 <HAL_RCC_OscConfig+0xbc>
 8004eaa:	4b72      	ldr	r3, [pc, #456]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a71      	ldr	r2, [pc, #452]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	4b6f      	ldr	r3, [pc, #444]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a6e      	ldr	r2, [pc, #440]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec0:	6013      	str	r3, [r2, #0]
 8004ec2:	e00b      	b.n	8004edc <HAL_RCC_OscConfig+0xd4>
 8004ec4:	4b6b      	ldr	r3, [pc, #428]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a6a      	ldr	r2, [pc, #424]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	4b68      	ldr	r3, [pc, #416]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a67      	ldr	r2, [pc, #412]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d013      	beq.n	8004f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee4:	f7fe fe10 	bl	8003b08 <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fe fe0c 	bl	8003b08 <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e1fa      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efe:	4b5d      	ldr	r3, [pc, #372]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d0f0      	beq.n	8004eec <HAL_RCC_OscConfig+0xe4>
 8004f0a:	e014      	b.n	8004f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fe fdfc 	bl	8003b08 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fe fdf8 	bl	8003b08 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e1e6      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f26:	4b53      	ldr	r3, [pc, #332]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1f0      	bne.n	8004f14 <HAL_RCC_OscConfig+0x10c>
 8004f32:	e000      	b.n	8004f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d063      	beq.n	800500a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f42:	4b4c      	ldr	r3, [pc, #304]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00b      	beq.n	8004f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f4e:	4b49      	ldr	r3, [pc, #292]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 030c 	and.w	r3, r3, #12
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d11c      	bne.n	8004f94 <HAL_RCC_OscConfig+0x18c>
 8004f5a:	4b46      	ldr	r3, [pc, #280]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d116      	bne.n	8004f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f66:	4b43      	ldr	r3, [pc, #268]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d005      	beq.n	8004f7e <HAL_RCC_OscConfig+0x176>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d001      	beq.n	8004f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e1ba      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f7e:	4b3d      	ldr	r3, [pc, #244]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4939      	ldr	r1, [pc, #228]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f92:	e03a      	b.n	800500a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d020      	beq.n	8004fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f9c:	4b36      	ldr	r3, [pc, #216]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa2:	f7fe fdb1 	bl	8003b08 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004faa:	f7fe fdad 	bl	8003b08 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e19b      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fbc:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	4927      	ldr	r1, [pc, #156]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	600b      	str	r3, [r1, #0]
 8004fdc:	e015      	b.n	800500a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fde:	4b26      	ldr	r3, [pc, #152]	; (8005078 <HAL_RCC_OscConfig+0x270>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fe4:	f7fe fd90 	bl	8003b08 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fec:	f7fe fd8c 	bl	8003b08 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e17a      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0302 	and.w	r3, r3, #2
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d03a      	beq.n	800508c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d019      	beq.n	8005052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501e:	4b17      	ldr	r3, [pc, #92]	; (800507c <HAL_RCC_OscConfig+0x274>)
 8005020:	2201      	movs	r2, #1
 8005022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005024:	f7fe fd70 	bl	8003b08 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800502c:	f7fe fd6c 	bl	8003b08 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e15a      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503e:	4b0d      	ldr	r3, [pc, #52]	; (8005074 <HAL_RCC_OscConfig+0x26c>)
 8005040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0f0      	beq.n	800502c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800504a:	2001      	movs	r0, #1
 800504c:	f000 fafc 	bl	8005648 <RCC_Delay>
 8005050:	e01c      	b.n	800508c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005052:	4b0a      	ldr	r3, [pc, #40]	; (800507c <HAL_RCC_OscConfig+0x274>)
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005058:	f7fe fd56 	bl	8003b08 <HAL_GetTick>
 800505c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800505e:	e00f      	b.n	8005080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005060:	f7fe fd52 	bl	8003b08 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d908      	bls.n	8005080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e140      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
 8005072:	bf00      	nop
 8005074:	40021000 	.word	0x40021000
 8005078:	42420000 	.word	0x42420000
 800507c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005080:	4b9e      	ldr	r3, [pc, #632]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1e9      	bne.n	8005060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 80a6 	beq.w	80051e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509a:	2300      	movs	r3, #0
 800509c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800509e:	4b97      	ldr	r3, [pc, #604]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80050a0:	69db      	ldr	r3, [r3, #28]
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10d      	bne.n	80050c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	4b94      	ldr	r3, [pc, #592]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80050ac:	69db      	ldr	r3, [r3, #28]
 80050ae:	4a93      	ldr	r2, [pc, #588]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	61d3      	str	r3, [r2, #28]
 80050b6:	4b91      	ldr	r3, [pc, #580]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c2:	2301      	movs	r3, #1
 80050c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	4b8e      	ldr	r3, [pc, #568]	; (8005300 <HAL_RCC_OscConfig+0x4f8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d118      	bne.n	8005104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050d2:	4b8b      	ldr	r3, [pc, #556]	; (8005300 <HAL_RCC_OscConfig+0x4f8>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a8a      	ldr	r2, [pc, #552]	; (8005300 <HAL_RCC_OscConfig+0x4f8>)
 80050d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050de:	f7fe fd13 	bl	8003b08 <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050e4:	e008      	b.n	80050f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e6:	f7fe fd0f 	bl	8003b08 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b64      	cmp	r3, #100	; 0x64
 80050f2:	d901      	bls.n	80050f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e0fd      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f8:	4b81      	ldr	r3, [pc, #516]	; (8005300 <HAL_RCC_OscConfig+0x4f8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005100:	2b00      	cmp	r3, #0
 8005102:	d0f0      	beq.n	80050e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x312>
 800510c:	4b7b      	ldr	r3, [pc, #492]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	4a7a      	ldr	r2, [pc, #488]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6213      	str	r3, [r2, #32]
 8005118:	e02d      	b.n	8005176 <HAL_RCC_OscConfig+0x36e>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10c      	bne.n	800513c <HAL_RCC_OscConfig+0x334>
 8005122:	4b76      	ldr	r3, [pc, #472]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	4a75      	ldr	r2, [pc, #468]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005128:	f023 0301 	bic.w	r3, r3, #1
 800512c:	6213      	str	r3, [r2, #32]
 800512e:	4b73      	ldr	r3, [pc, #460]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005130:	6a1b      	ldr	r3, [r3, #32]
 8005132:	4a72      	ldr	r2, [pc, #456]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	6213      	str	r3, [r2, #32]
 800513a:	e01c      	b.n	8005176 <HAL_RCC_OscConfig+0x36e>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	2b05      	cmp	r3, #5
 8005142:	d10c      	bne.n	800515e <HAL_RCC_OscConfig+0x356>
 8005144:	4b6d      	ldr	r3, [pc, #436]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	4a6c      	ldr	r2, [pc, #432]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 800514a:	f043 0304 	orr.w	r3, r3, #4
 800514e:	6213      	str	r3, [r2, #32]
 8005150:	4b6a      	ldr	r3, [pc, #424]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	4a69      	ldr	r2, [pc, #420]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	6213      	str	r3, [r2, #32]
 800515c:	e00b      	b.n	8005176 <HAL_RCC_OscConfig+0x36e>
 800515e:	4b67      	ldr	r3, [pc, #412]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	4a66      	ldr	r2, [pc, #408]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005164:	f023 0301 	bic.w	r3, r3, #1
 8005168:	6213      	str	r3, [r2, #32]
 800516a:	4b64      	ldr	r3, [pc, #400]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	4a63      	ldr	r2, [pc, #396]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005170:	f023 0304 	bic.w	r3, r3, #4
 8005174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d015      	beq.n	80051aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800517e:	f7fe fcc3 	bl	8003b08 <HAL_GetTick>
 8005182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005184:	e00a      	b.n	800519c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005186:	f7fe fcbf 	bl	8003b08 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	4293      	cmp	r3, r2
 8005196:	d901      	bls.n	800519c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e0ab      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800519c:	4b57      	ldr	r3, [pc, #348]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ee      	beq.n	8005186 <HAL_RCC_OscConfig+0x37e>
 80051a8:	e014      	b.n	80051d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051aa:	f7fe fcad 	bl	8003b08 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fe fca9 	bl	8003b08 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e095      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051c8:	4b4c      	ldr	r3, [pc, #304]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ee      	bne.n	80051b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051d4:	7dfb      	ldrb	r3, [r7, #23]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d105      	bne.n	80051e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051da:	4b48      	ldr	r3, [pc, #288]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	4a47      	ldr	r2, [pc, #284]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80051e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	69db      	ldr	r3, [r3, #28]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 8081 	beq.w	80052f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f003 030c 	and.w	r3, r3, #12
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d061      	beq.n	80052c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	69db      	ldr	r3, [r3, #28]
 8005200:	2b02      	cmp	r3, #2
 8005202:	d146      	bne.n	8005292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b3f      	ldr	r3, [pc, #252]	; (8005304 <HAL_RCC_OscConfig+0x4fc>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fe fc7d 	bl	8003b08 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005212:	f7fe fc79 	bl	8003b08 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e067      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005224:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d108      	bne.n	800524c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800523a:	4b30      	ldr	r3, [pc, #192]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	492d      	ldr	r1, [pc, #180]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800524c:	4b2b      	ldr	r3, [pc, #172]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a19      	ldr	r1, [r3, #32]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525c:	430b      	orrs	r3, r1
 800525e:	4927      	ldr	r1, [pc, #156]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005260:	4313      	orrs	r3, r2
 8005262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005264:	4b27      	ldr	r3, [pc, #156]	; (8005304 <HAL_RCC_OscConfig+0x4fc>)
 8005266:	2201      	movs	r2, #1
 8005268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800526a:	f7fe fc4d 	bl	8003b08 <HAL_GetTick>
 800526e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005270:	e008      	b.n	8005284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005272:	f7fe fc49 	bl	8003b08 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	2b02      	cmp	r3, #2
 800527e:	d901      	bls.n	8005284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e037      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0f0      	beq.n	8005272 <HAL_RCC_OscConfig+0x46a>
 8005290:	e02f      	b.n	80052f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <HAL_RCC_OscConfig+0x4fc>)
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005298:	f7fe fc36 	bl	8003b08 <HAL_GetTick>
 800529c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800529e:	e008      	b.n	80052b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a0:	f7fe fc32 	bl	8003b08 <HAL_GetTick>
 80052a4:	4602      	mov	r2, r0
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	2b02      	cmp	r3, #2
 80052ac:	d901      	bls.n	80052b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e020      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052b2:	4b12      	ldr	r3, [pc, #72]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1f0      	bne.n	80052a0 <HAL_RCC_OscConfig+0x498>
 80052be:	e018      	b.n	80052f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d101      	bne.n	80052cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e013      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052cc:	4b0b      	ldr	r3, [pc, #44]	; (80052fc <HAL_RCC_OscConfig+0x4f4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d106      	bne.n	80052ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d001      	beq.n	80052f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	e000      	b.n	80052f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	40021000 	.word	0x40021000
 8005300:	40007000 	.word	0x40007000
 8005304:	42420060 	.word	0x42420060

08005308 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e0d0      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800531c:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	683a      	ldr	r2, [r7, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d910      	bls.n	800534c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532a:	4b67      	ldr	r3, [pc, #412]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 0207 	bic.w	r2, r3, #7
 8005332:	4965      	ldr	r1, [pc, #404]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	4313      	orrs	r3, r2
 8005338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800533a:	4b63      	ldr	r3, [pc, #396]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	683a      	ldr	r2, [r7, #0]
 8005344:	429a      	cmp	r2, r3
 8005346:	d001      	beq.n	800534c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0b8      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d020      	beq.n	800539a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0304 	and.w	r3, r3, #4
 8005360:	2b00      	cmp	r3, #0
 8005362:	d005      	beq.n	8005370 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005364:	4b59      	ldr	r3, [pc, #356]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a58      	ldr	r2, [pc, #352]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 800536a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800536e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0308 	and.w	r3, r3, #8
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800537c:	4b53      	ldr	r3, [pc, #332]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	4a52      	ldr	r2, [pc, #328]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005382:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005386:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005388:	4b50      	ldr	r3, [pc, #320]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	494d      	ldr	r1, [pc, #308]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	4313      	orrs	r3, r2
 8005398:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d040      	beq.n	8005428 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d107      	bne.n	80053be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ae:	4b47      	ldr	r3, [pc, #284]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d115      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e07f      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b02      	cmp	r3, #2
 80053c4:	d107      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c6:	4b41      	ldr	r3, [pc, #260]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d109      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e073      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d6:	4b3d      	ldr	r3, [pc, #244]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e06b      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053e6:	4b39      	ldr	r3, [pc, #228]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f023 0203 	bic.w	r2, r3, #3
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4936      	ldr	r1, [pc, #216]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053f8:	f7fe fb86 	bl	8003b08 <HAL_GetTick>
 80053fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053fe:	e00a      	b.n	8005416 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005400:	f7fe fb82 	bl	8003b08 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	f241 3288 	movw	r2, #5000	; 0x1388
 800540e:	4293      	cmp	r3, r2
 8005410:	d901      	bls.n	8005416 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e053      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005416:	4b2d      	ldr	r3, [pc, #180]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 020c 	and.w	r2, r3, #12
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	429a      	cmp	r2, r3
 8005426:	d1eb      	bne.n	8005400 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005428:	4b27      	ldr	r3, [pc, #156]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0307 	and.w	r3, r3, #7
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	429a      	cmp	r2, r3
 8005434:	d210      	bcs.n	8005458 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005436:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f023 0207 	bic.w	r2, r3, #7
 800543e:	4922      	ldr	r1, [pc, #136]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	4313      	orrs	r3, r2
 8005444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005446:	4b20      	ldr	r3, [pc, #128]	; (80054c8 <HAL_RCC_ClockConfig+0x1c0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	683a      	ldr	r2, [r7, #0]
 8005450:	429a      	cmp	r2, r3
 8005452:	d001      	beq.n	8005458 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e032      	b.n	80054be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d008      	beq.n	8005476 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005464:	4b19      	ldr	r3, [pc, #100]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	4916      	ldr	r1, [pc, #88]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005472:	4313      	orrs	r3, r2
 8005474:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d009      	beq.n	8005496 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005482:	4b12      	ldr	r3, [pc, #72]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	00db      	lsls	r3, r3, #3
 8005490:	490e      	ldr	r1, [pc, #56]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	4313      	orrs	r3, r2
 8005494:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005496:	f000 f821 	bl	80054dc <HAL_RCC_GetSysClockFreq>
 800549a:	4602      	mov	r2, r0
 800549c:	4b0b      	ldr	r3, [pc, #44]	; (80054cc <HAL_RCC_ClockConfig+0x1c4>)
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	091b      	lsrs	r3, r3, #4
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	490a      	ldr	r1, [pc, #40]	; (80054d0 <HAL_RCC_ClockConfig+0x1c8>)
 80054a8:	5ccb      	ldrb	r3, [r1, r3]
 80054aa:	fa22 f303 	lsr.w	r3, r2, r3
 80054ae:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <HAL_RCC_ClockConfig+0x1cc>)
 80054b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054b2:	4b09      	ldr	r3, [pc, #36]	; (80054d8 <HAL_RCC_ClockConfig+0x1d0>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4618      	mov	r0, r3
 80054b8:	f7fe f9fe 	bl	80038b8 <HAL_InitTick>

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	40022000 	.word	0x40022000
 80054cc:	40021000 	.word	0x40021000
 80054d0:	0800a1cc 	.word	0x0800a1cc
 80054d4:	20000010 	.word	0x20000010
 80054d8:	20000014 	.word	0x20000014

080054dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80054e2:	2300      	movs	r3, #0
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	2300      	movs	r3, #0
 80054e8:	60bb      	str	r3, [r7, #8]
 80054ea:	2300      	movs	r3, #0
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80054f6:	4b1e      	ldr	r3, [pc, #120]	; (8005570 <HAL_RCC_GetSysClockFreq+0x94>)
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f003 030c 	and.w	r3, r3, #12
 8005502:	2b04      	cmp	r3, #4
 8005504:	d002      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x30>
 8005506:	2b08      	cmp	r3, #8
 8005508:	d003      	beq.n	8005512 <HAL_RCC_GetSysClockFreq+0x36>
 800550a:	e027      	b.n	800555c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800550c:	4b19      	ldr	r3, [pc, #100]	; (8005574 <HAL_RCC_GetSysClockFreq+0x98>)
 800550e:	613b      	str	r3, [r7, #16]
      break;
 8005510:	e027      	b.n	8005562 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	0c9b      	lsrs	r3, r3, #18
 8005516:	f003 030f 	and.w	r3, r3, #15
 800551a:	4a17      	ldr	r2, [pc, #92]	; (8005578 <HAL_RCC_GetSysClockFreq+0x9c>)
 800551c:	5cd3      	ldrb	r3, [r2, r3]
 800551e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d010      	beq.n	800554c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800552a:	4b11      	ldr	r3, [pc, #68]	; (8005570 <HAL_RCC_GetSysClockFreq+0x94>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	0c5b      	lsrs	r3, r3, #17
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	4a11      	ldr	r2, [pc, #68]	; (800557c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a0d      	ldr	r2, [pc, #52]	; (8005574 <HAL_RCC_GetSysClockFreq+0x98>)
 800553e:	fb02 f203 	mul.w	r2, r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	fbb2 f3f3 	udiv	r3, r2, r3
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	e004      	b.n	8005556 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005550:	fb02 f303 	mul.w	r3, r2, r3
 8005554:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	613b      	str	r3, [r7, #16]
      break;
 800555a:	e002      	b.n	8005562 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800555c:	4b05      	ldr	r3, [pc, #20]	; (8005574 <HAL_RCC_GetSysClockFreq+0x98>)
 800555e:	613b      	str	r3, [r7, #16]
      break;
 8005560:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005562:	693b      	ldr	r3, [r7, #16]
}
 8005564:	4618      	mov	r0, r3
 8005566:	371c      	adds	r7, #28
 8005568:	46bd      	mov	sp, r7
 800556a:	bc80      	pop	{r7}
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	40021000 	.word	0x40021000
 8005574:	007a1200 	.word	0x007a1200
 8005578:	0800a1e4 	.word	0x0800a1e4
 800557c:	0800a1f4 	.word	0x0800a1f4
 8005580:	003d0900 	.word	0x003d0900

08005584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005588:	4b02      	ldr	r3, [pc, #8]	; (8005594 <HAL_RCC_GetHCLKFreq+0x10>)
 800558a:	681b      	ldr	r3, [r3, #0]
}
 800558c:	4618      	mov	r0, r3
 800558e:	46bd      	mov	sp, r7
 8005590:	bc80      	pop	{r7}
 8005592:	4770      	bx	lr
 8005594:	20000010 	.word	0x20000010

08005598 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800559c:	f7ff fff2 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055a0:	4602      	mov	r2, r0
 80055a2:	4b05      	ldr	r3, [pc, #20]	; (80055b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	0a1b      	lsrs	r3, r3, #8
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	4903      	ldr	r1, [pc, #12]	; (80055bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ae:	5ccb      	ldrb	r3, [r1, r3]
 80055b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	0800a1dc 	.word	0x0800a1dc

080055c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055c4:	f7ff ffde 	bl	8005584 <HAL_RCC_GetHCLKFreq>
 80055c8:	4602      	mov	r2, r0
 80055ca:	4b05      	ldr	r3, [pc, #20]	; (80055e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	0adb      	lsrs	r3, r3, #11
 80055d0:	f003 0307 	and.w	r3, r3, #7
 80055d4:	4903      	ldr	r1, [pc, #12]	; (80055e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055d6:	5ccb      	ldrb	r3, [r1, r3]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055dc:	4618      	mov	r0, r3
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40021000 	.word	0x40021000
 80055e4:	0800a1dc 	.word	0x0800a1dc

080055e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	220f      	movs	r2, #15
 80055f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <HAL_RCC_GetClockConfig+0x58>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f003 0203 	and.w	r2, r3, #3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <HAL_RCC_GetClockConfig+0x58>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005610:	4b0b      	ldr	r3, [pc, #44]	; (8005640 <HAL_RCC_GetClockConfig+0x58>)
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800561c:	4b08      	ldr	r3, [pc, #32]	; (8005640 <HAL_RCC_GetClockConfig+0x58>)
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	08db      	lsrs	r3, r3, #3
 8005622:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <HAL_RCC_GetClockConfig+0x5c>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0207 	and.w	r2, r3, #7
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	bc80      	pop	{r7}
 800563e:	4770      	bx	lr
 8005640:	40021000 	.word	0x40021000
 8005644:	40022000 	.word	0x40022000

08005648 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <RCC_Delay+0x34>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a0a      	ldr	r2, [pc, #40]	; (8005680 <RCC_Delay+0x38>)
 8005656:	fba2 2303 	umull	r2, r3, r2, r3
 800565a:	0a5b      	lsrs	r3, r3, #9
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005664:	bf00      	nop
  }
  while (Delay --);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1e5a      	subs	r2, r3, #1
 800566a:	60fa      	str	r2, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1f9      	bne.n	8005664 <RCC_Delay+0x1c>
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	3714      	adds	r7, #20
 8005676:	46bd      	mov	sp, r7
 8005678:	bc80      	pop	{r7}
 800567a:	4770      	bx	lr
 800567c:	20000010 	.word	0x20000010
 8005680:	10624dd3 	.word	0x10624dd3

08005684 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b082      	sub	sp, #8
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e041      	b.n	800571a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800569c:	b2db      	uxtb	r3, r3
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d106      	bne.n	80056b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7fe f8e0 	bl	8003870 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	3304      	adds	r3, #4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f000 fa74 	bl	8005bb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2201      	movs	r2, #1
 80056d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2201      	movs	r2, #1
 80056f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
	...

08005724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	d001      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e03a      	b.n	80057b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2202      	movs	r2, #2
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f042 0201 	orr.w	r2, r2, #1
 8005752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a18      	ldr	r2, [pc, #96]	; (80057bc <HAL_TIM_Base_Start_IT+0x98>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00e      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x58>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005766:	d009      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x58>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a14      	ldr	r2, [pc, #80]	; (80057c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d004      	beq.n	800577c <HAL_TIM_Base_Start_IT+0x58>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d111      	bne.n	80057a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b06      	cmp	r3, #6
 800578c:	d010      	beq.n	80057b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f042 0201 	orr.w	r2, r2, #1
 800579c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800579e:	e007      	b.n	80057b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f042 0201 	orr.w	r2, r2, #1
 80057ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bc80      	pop	{r7}
 80057ba:	4770      	bx	lr
 80057bc:	40012c00 	.word	0x40012c00
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800

080057c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b02      	cmp	r3, #2
 80057dc:	d122      	bne.n	8005824 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b02      	cmp	r3, #2
 80057ea:	d11b      	bne.n	8005824 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f06f 0202 	mvn.w	r2, #2
 80057f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f003 0303 	and.w	r3, r3, #3
 8005806:	2b00      	cmp	r3, #0
 8005808:	d003      	beq.n	8005812 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 f9b4 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 8005810:	e005      	b.n	800581e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f9a7 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 f9b6 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	f003 0304 	and.w	r3, r3, #4
 800582e:	2b04      	cmp	r3, #4
 8005830:	d122      	bne.n	8005878 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d11b      	bne.n	8005878 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f06f 0204 	mvn.w	r2, #4
 8005848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2202      	movs	r2, #2
 800584e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f98a 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 8005864:	e005      	b.n	8005872 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 f97d 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800586c:	6878      	ldr	r0, [r7, #4]
 800586e:	f000 f98c 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b08      	cmp	r3, #8
 8005884:	d122      	bne.n	80058cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f003 0308 	and.w	r3, r3, #8
 8005890:	2b08      	cmp	r3, #8
 8005892:	d11b      	bne.n	80058cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f06f 0208 	mvn.w	r2, #8
 800589c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2204      	movs	r2, #4
 80058a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f003 0303 	and.w	r3, r3, #3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 f960 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 80058b8:	e005      	b.n	80058c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f953 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f962 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	f003 0310 	and.w	r3, r3, #16
 80058d6:	2b10      	cmp	r3, #16
 80058d8:	d122      	bne.n	8005920 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	f003 0310 	and.w	r3, r3, #16
 80058e4:	2b10      	cmp	r3, #16
 80058e6:	d11b      	bne.n	8005920 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f06f 0210 	mvn.w	r2, #16
 80058f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2208      	movs	r2, #8
 80058f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	69db      	ldr	r3, [r3, #28]
 80058fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f936 	bl	8005b78 <HAL_TIM_IC_CaptureCallback>
 800590c:	e005      	b.n	800591a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f929 	bl	8005b66 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f938 	bl	8005b8a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b01      	cmp	r3, #1
 800592c:	d10e      	bne.n	800594c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b01      	cmp	r3, #1
 800593a:	d107      	bne.n	800594c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0201 	mvn.w	r2, #1
 8005944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f7fd fecc 	bl	80036e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005956:	2b80      	cmp	r3, #128	; 0x80
 8005958:	d10e      	bne.n	8005978 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d107      	bne.n	8005978 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 fa7b 	bl	8005e6e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d10e      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d107      	bne.n	80059a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800599c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8fc 	bl	8005b9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	f003 0320 	and.w	r3, r3, #32
 80059ae:	2b20      	cmp	r3, #32
 80059b0:	d10e      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68db      	ldr	r3, [r3, #12]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b20      	cmp	r3, #32
 80059be:	d107      	bne.n	80059d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0220 	mvn.w	r2, #32
 80059c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fa46 	bl	8005e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059d0:	bf00      	nop
 80059d2:	3708      	adds	r7, #8
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d101      	bne.n	80059f4 <HAL_TIM_ConfigClockSource+0x1c>
 80059f0:	2302      	movs	r3, #2
 80059f2:	e0b4      	b.n	8005b5e <HAL_TIM_ConfigClockSource+0x186>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a2c:	d03e      	beq.n	8005aac <HAL_TIM_ConfigClockSource+0xd4>
 8005a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a32:	f200 8087 	bhi.w	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3a:	f000 8086 	beq.w	8005b4a <HAL_TIM_ConfigClockSource+0x172>
 8005a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a42:	d87f      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a44:	2b70      	cmp	r3, #112	; 0x70
 8005a46:	d01a      	beq.n	8005a7e <HAL_TIM_ConfigClockSource+0xa6>
 8005a48:	2b70      	cmp	r3, #112	; 0x70
 8005a4a:	d87b      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4c:	2b60      	cmp	r3, #96	; 0x60
 8005a4e:	d050      	beq.n	8005af2 <HAL_TIM_ConfigClockSource+0x11a>
 8005a50:	2b60      	cmp	r3, #96	; 0x60
 8005a52:	d877      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a54:	2b50      	cmp	r3, #80	; 0x50
 8005a56:	d03c      	beq.n	8005ad2 <HAL_TIM_ConfigClockSource+0xfa>
 8005a58:	2b50      	cmp	r3, #80	; 0x50
 8005a5a:	d873      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a5c:	2b40      	cmp	r3, #64	; 0x40
 8005a5e:	d058      	beq.n	8005b12 <HAL_TIM_ConfigClockSource+0x13a>
 8005a60:	2b40      	cmp	r3, #64	; 0x40
 8005a62:	d86f      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a64:	2b30      	cmp	r3, #48	; 0x30
 8005a66:	d064      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x15a>
 8005a68:	2b30      	cmp	r3, #48	; 0x30
 8005a6a:	d86b      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a6c:	2b20      	cmp	r3, #32
 8005a6e:	d060      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x15a>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d867      	bhi.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d05c      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x15a>
 8005a78:	2b10      	cmp	r3, #16
 8005a7a:	d05a      	beq.n	8005b32 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	e062      	b.n	8005b44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6818      	ldr	r0, [r3, #0]
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	6899      	ldr	r1, [r3, #8]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	685a      	ldr	r2, [r3, #4]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f000 f968 	bl	8005d62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005aa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	609a      	str	r2, [r3, #8]
      break;
 8005aaa:	e04f      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	6899      	ldr	r1, [r3, #8]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f000 f951 	bl	8005d62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	689a      	ldr	r2, [r3, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ace:	609a      	str	r2, [r3, #8]
      break;
 8005ad0:	e03c      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6818      	ldr	r0, [r3, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	6859      	ldr	r1, [r3, #4]
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f000 f8c8 	bl	8005c74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2150      	movs	r1, #80	; 0x50
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f91f 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005af0:	e02c      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6818      	ldr	r0, [r3, #0]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	6859      	ldr	r1, [r3, #4]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	461a      	mov	r2, r3
 8005b00:	f000 f8e6 	bl	8005cd0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2160      	movs	r1, #96	; 0x60
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f000 f90f 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005b10:	e01c      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6859      	ldr	r1, [r3, #4]
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	f000 f8a8 	bl	8005c74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2140      	movs	r1, #64	; 0x40
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f000 f8ff 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005b30:	e00c      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4619      	mov	r1, r3
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	f000 f8f6 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 8005b42:	e003      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	73fb      	strb	r3, [r7, #15]
      break;
 8005b48:	e000      	b.n	8005b4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2201      	movs	r2, #1
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b66:	b480      	push	{r7}
 8005b68:	b083      	sub	sp, #12
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b6e:	bf00      	nop
 8005b70:	370c      	adds	r7, #12
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr

08005b78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bc80      	pop	{r7}
 8005b88:	4770      	bx	lr

08005b8a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b92:	bf00      	nop
 8005b94:	370c      	adds	r7, #12
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bc80      	pop	{r7}
 8005b9a:	4770      	bx	lr

08005b9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b083      	sub	sp, #12
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bc80      	pop	{r7}
 8005bac:	4770      	bx	lr
	...

08005bb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b085      	sub	sp, #20
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4a29      	ldr	r2, [pc, #164]	; (8005c68 <TIM_Base_SetConfig+0xb8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d00b      	beq.n	8005be0 <TIM_Base_SetConfig+0x30>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bce:	d007      	beq.n	8005be0 <TIM_Base_SetConfig+0x30>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a26      	ldr	r2, [pc, #152]	; (8005c6c <TIM_Base_SetConfig+0xbc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_Base_SetConfig+0x30>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a25      	ldr	r2, [pc, #148]	; (8005c70 <TIM_Base_SetConfig+0xc0>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d108      	bne.n	8005bf2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a1c      	ldr	r2, [pc, #112]	; (8005c68 <TIM_Base_SetConfig+0xb8>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d00b      	beq.n	8005c12 <TIM_Base_SetConfig+0x62>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c00:	d007      	beq.n	8005c12 <TIM_Base_SetConfig+0x62>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a19      	ldr	r2, [pc, #100]	; (8005c6c <TIM_Base_SetConfig+0xbc>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d003      	beq.n	8005c12 <TIM_Base_SetConfig+0x62>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a18      	ldr	r2, [pc, #96]	; (8005c70 <TIM_Base_SetConfig+0xc0>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d108      	bne.n	8005c24 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	68fa      	ldr	r2, [r7, #12]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	4a07      	ldr	r2, [pc, #28]	; (8005c68 <TIM_Base_SetConfig+0xb8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d103      	bne.n	8005c58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	615a      	str	r2, [r3, #20]
}
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bc80      	pop	{r7}
 8005c66:	4770      	bx	lr
 8005c68:	40012c00 	.word	0x40012c00
 8005c6c:	40000400 	.word	0x40000400
 8005c70:	40000800 	.word	0x40000800

08005c74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b087      	sub	sp, #28
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	60f8      	str	r0, [r7, #12]
 8005c7c:	60b9      	str	r1, [r7, #8]
 8005c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	011b      	lsls	r3, r3, #4
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f023 030a 	bic.w	r3, r3, #10
 8005cb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	697a      	ldr	r2, [r7, #20]
 8005cc4:	621a      	str	r2, [r3, #32]
}
 8005cc6:	bf00      	nop
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b087      	sub	sp, #28
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6a1b      	ldr	r3, [r3, #32]
 8005ce6:	f023 0210 	bic.w	r2, r3, #16
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	031b      	lsls	r3, r3, #12
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	621a      	str	r2, [r3, #32]
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bc80      	pop	{r7}
 8005d2c:	4770      	bx	lr

08005d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f043 0307 	orr.w	r3, r3, #7
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr

08005d62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b087      	sub	sp, #28
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]
 8005d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	021a      	lsls	r2, r3, #8
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	431a      	orrs	r2, r3
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	609a      	str	r2, [r3, #8]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bc80      	pop	{r7}
 8005d9e:	4770      	bx	lr

08005da0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d101      	bne.n	8005db8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005db4:	2302      	movs	r3, #2
 8005db6:	e046      	b.n	8005e46 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00e      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e04:	d009      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a12      	ldr	r2, [pc, #72]	; (8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d004      	beq.n	8005e1a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d10c      	bne.n	8005e34 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68ba      	ldr	r2, [r7, #8]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bc80      	pop	{r7}
 8005e4e:	4770      	bx	lr
 8005e50:	40012c00 	.word	0x40012c00
 8005e54:	40000400 	.word	0x40000400
 8005e58:	40000800 	.word	0x40000800

08005e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr

08005e6e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e76:	bf00      	nop
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d10a      	bne.n	8005eae <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8005e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9c:	f383 8811 	msr	BASEPRI, r3
 8005ea0:	f3bf 8f6f 	isb	sy
 8005ea4:	f3bf 8f4f 	dsb	sy
 8005ea8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8005eaa:	bf00      	nop
 8005eac:	e7fe      	b.n	8005eac <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d05d      	beq.n	8005f70 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d059      	beq.n	8005f70 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ec4:	2100      	movs	r1, #0
 8005ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d000      	beq.n	8005ed0 <xQueueGenericReset+0x50>
 8005ece:	2101      	movs	r1, #1
 8005ed0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d14c      	bne.n	8005f70 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8005ed6:	f002 fa4b 	bl	8008370 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ee2:	6939      	ldr	r1, [r7, #16]
 8005ee4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ee6:	fb01 f303 	mul.w	r3, r1, r3
 8005eea:	441a      	add	r2, r3
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f06:	3b01      	subs	r3, #1
 8005f08:	6939      	ldr	r1, [r7, #16]
 8005f0a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	441a      	add	r2, r3
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	22ff      	movs	r2, #255	; 0xff
 8005f1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	22ff      	movs	r2, #255	; 0xff
 8005f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d114      	bne.n	8005f56 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d01a      	beq.n	8005f6a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	3310      	adds	r3, #16
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 fa65 	bl	8007408 <xTaskRemoveFromEventList>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d012      	beq.n	8005f6a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005f44:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <xQueueGenericReset+0x11c>)
 8005f46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	f3bf 8f4f 	dsb	sy
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	e009      	b.n	8005f6a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	3310      	adds	r3, #16
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f002 f88a 	bl	8008074 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	3324      	adds	r3, #36	; 0x24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f002 f885 	bl	8008074 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8005f6a:	f002 fa31 	bl	80083d0 <vPortExitCritical>
 8005f6e:	e001      	b.n	8005f74 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <xQueueGenericReset+0x110>
        __asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	60bb      	str	r3, [r7, #8]
    }
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8005f90:	697b      	ldr	r3, [r7, #20]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08a      	sub	sp, #40	; 0x28
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	4613      	mov	r3, r2
 8005fac:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d02e      	beq.n	8006016 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005fb8:	2100      	movs	r1, #0
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d000      	beq.n	8005fc8 <xQueueGenericCreate+0x28>
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d123      	bne.n	8006016 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	68ba      	ldr	r2, [r7, #8]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005fd6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8005fda:	d81c      	bhi.n	8006016 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	fb02 f303 	mul.w	r3, r2, r3
 8005fe4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	3350      	adds	r3, #80	; 0x50
 8005fea:	4618      	mov	r0, r3
 8005fec:	f002 f81e 	bl	800802c <pvPortMalloc>
 8005ff0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d01c      	beq.n	8006032 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	3350      	adds	r3, #80	; 0x50
 8006000:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006002:	79fa      	ldrb	r2, [r7, #7]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f814 	bl	800603c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8006014:	e00d      	b.n	8006032 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueGenericCreate+0x92>
        __asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	613b      	str	r3, [r7, #16]
    }
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006032:	69fb      	ldr	r3, [r7, #28]
    }
 8006034:	4618      	mov	r0, r3
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d103      	bne.n	8006058 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e002      	b.n	800605e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800606a:	2101      	movs	r1, #1
 800606c:	69b8      	ldr	r0, [r7, #24]
 800606e:	f7ff ff07 	bl	8005e80 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8006072:	69bb      	ldr	r3, [r7, #24]
 8006074:	78fa      	ldrb	r2, [r7, #3]
 8006076:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800607a:	bf00      	nop
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
	...

08006084 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b08e      	sub	sp, #56	; 0x38
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
 8006090:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006092:	2300      	movs	r3, #0
 8006094:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 800609a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609c:	2b00      	cmp	r3, #0
 800609e:	d10a      	bne.n	80060b6 <xQueueGenericSend+0x32>
        __asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d103      	bne.n	80060c4 <xQueueGenericSend+0x40>
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <xQueueGenericSend+0x44>
 80060c4:	2301      	movs	r3, #1
 80060c6:	e000      	b.n	80060ca <xQueueGenericSend+0x46>
 80060c8:	2300      	movs	r3, #0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <xQueueGenericSend+0x60>
        __asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
    }
 80060e0:	bf00      	nop
 80060e2:	e7fe      	b.n	80060e2 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d103      	bne.n	80060f2 <xQueueGenericSend+0x6e>
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <xQueueGenericSend+0x72>
 80060f2:	2301      	movs	r3, #1
 80060f4:	e000      	b.n	80060f8 <xQueueGenericSend+0x74>
 80060f6:	2300      	movs	r3, #0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <xQueueGenericSend+0x8e>
        __asm volatile
 80060fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006100:	f383 8811 	msr	BASEPRI, r3
 8006104:	f3bf 8f6f 	isb	sy
 8006108:	f3bf 8f4f 	dsb	sy
 800610c:	623b      	str	r3, [r7, #32]
    }
 800610e:	bf00      	nop
 8006110:	e7fe      	b.n	8006110 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006112:	f001 fbe7 	bl	80078e4 <xTaskGetSchedulerState>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d102      	bne.n	8006122 <xQueueGenericSend+0x9e>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <xQueueGenericSend+0xa2>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <xQueueGenericSend+0xa4>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueGenericSend+0xbe>
        __asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	61fb      	str	r3, [r7, #28]
    }
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006142:	f002 f915 	bl	8008370 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	429a      	cmp	r2, r3
 8006150:	d302      	bcc.n	8006158 <xQueueGenericSend+0xd4>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b02      	cmp	r3, #2
 8006156:	d129      	bne.n	80061ac <xQueueGenericSend+0x128>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800615e:	f000 fa3f 	bl	80065e0 <prvCopyDataToQueue>
 8006162:	62f8      	str	r0, [r7, #44]	; 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d010      	beq.n	800618e <xQueueGenericSend+0x10a>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616e:	3324      	adds	r3, #36	; 0x24
 8006170:	4618      	mov	r0, r3
 8006172:	f001 f949 	bl	8007408 <xTaskRemoveFromEventList>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d013      	beq.n	80061a4 <xQueueGenericSend+0x120>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 800617c:	4b3f      	ldr	r3, [pc, #252]	; (800627c <xQueueGenericSend+0x1f8>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	f3bf 8f6f 	isb	sy
 800618c:	e00a      	b.n	80061a4 <xQueueGenericSend+0x120>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <xQueueGenericSend+0x120>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8006194:	4b39      	ldr	r3, [pc, #228]	; (800627c <xQueueGenericSend+0x1f8>)
 8006196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800619a:	601a      	str	r2, [r3, #0]
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80061a4:	f002 f914 	bl	80083d0 <vPortExitCritical>
                return pdPASS;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e063      	b.n	8006274 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d103      	bne.n	80061ba <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80061b2:	f002 f90d 	bl	80083d0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e05c      	b.n	8006274 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80061ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d106      	bne.n	80061ce <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80061c0:	f107 0314 	add.w	r3, r7, #20
 80061c4:	4618      	mov	r0, r3
 80061c6:	f001 f9f7 	bl	80075b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80061ca:	2301      	movs	r3, #1
 80061cc:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80061ce:	f002 f8ff 	bl	80083d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80061d2:	f000 fd89 	bl	8006ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80061d6:	f002 f8cb 	bl	8008370 <vPortEnterCritical>
 80061da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e0:	b25b      	sxtb	r3, r3
 80061e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e6:	d103      	bne.n	80061f0 <xQueueGenericSend+0x16c>
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	2200      	movs	r2, #0
 80061ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSend+0x182>
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006206:	f002 f8e3 	bl	80083d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800620a:	1d3a      	adds	r2, r7, #4
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4611      	mov	r1, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f001 f9e6 	bl	80075e4 <xTaskCheckForTimeOut>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d124      	bne.n	8006268 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800621e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006220:	f000 fad6 	bl	80067d0 <prvIsQueueFull>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d018      	beq.n	800625c <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	3310      	adds	r3, #16
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	4611      	mov	r1, r2
 8006232:	4618      	mov	r0, r3
 8006234:	f001 f87e 	bl	8007334 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006238:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800623a:	f000 fa61 	bl	8006700 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800623e:	f000 fd97 	bl	8006d70 <xTaskResumeAll>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	f47f af7c 	bne.w	8006142 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 800624a:	4b0c      	ldr	r3, [pc, #48]	; (800627c <xQueueGenericSend+0x1f8>)
 800624c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006250:	601a      	str	r2, [r3, #0]
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	e772      	b.n	8006142 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800625c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800625e:	f000 fa4f 	bl	8006700 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006262:	f000 fd85 	bl	8006d70 <xTaskResumeAll>
 8006266:	e76c      	b.n	8006142 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800626a:	f000 fa49 	bl	8006700 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800626e:	f000 fd7f 	bl	8006d70 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006272:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006274:	4618      	mov	r0, r3
 8006276:	3738      	adds	r7, #56	; 0x38
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b092      	sub	sp, #72	; 0x48
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	607a      	str	r2, [r7, #4]
 800628c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	643b      	str	r3, [r7, #64]	; 0x40

    configASSERT( pxQueue );
 8006292:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006294:	2b00      	cmp	r3, #0
 8006296:	d10a      	bne.n	80062ae <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8006298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800629c:	f383 8811 	msr	BASEPRI, r3
 80062a0:	f3bf 8f6f 	isb	sy
 80062a4:	f3bf 8f4f 	dsb	sy
 80062a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
 80062aa:	bf00      	nop
 80062ac:	e7fe      	b.n	80062ac <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d103      	bne.n	80062bc <xQueueGenericSendFromISR+0x3c>
 80062b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <xQueueGenericSendFromISR+0x40>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <xQueueGenericSendFromISR+0x42>
 80062c0:	2300      	movs	r3, #0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b02      	cmp	r3, #2
 80062e0:	d103      	bne.n	80062ea <xQueueGenericSendFromISR+0x6a>
 80062e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <xQueueGenericSendFromISR+0x6e>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <xQueueGenericSendFromISR+0x70>
 80062ee:	2300      	movs	r3, #0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d10a      	bne.n	800630a <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8006306:	bf00      	nop
 8006308:	e7fe      	b.n	8006308 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800630a:	f002 f9d5 	bl	80086b8 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800630e:	f3ef 8211 	mrs	r2, BASEPRI
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	623a      	str	r2, [r7, #32]
 8006324:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006326:	6a3b      	ldr	r3, [r7, #32]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006328:	63fb      	str	r3, [r7, #60]	; 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800632e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	429a      	cmp	r2, r3
 8006334:	d302      	bcc.n	800633c <xQueueGenericSendFromISR+0xbc>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d146      	bne.n	80063ca <xQueueGenericSendFromISR+0x14a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800633c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006342:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	637b      	str	r3, [r7, #52]	; 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006352:	f000 f945 	bl	80065e0 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006356:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800635e:	d112      	bne.n	8006386 <xQueueGenericSendFromISR+0x106>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2b00      	cmp	r3, #0
 8006366:	d02d      	beq.n	80063c4 <xQueueGenericSendFromISR+0x144>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f84b 	bl	8007408 <xTaskRemoveFromEventList>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d025      	beq.n	80063c4 <xQueueGenericSendFromISR+0x144>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d022      	beq.n	80063c4 <xQueueGenericSendFromISR+0x144>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	601a      	str	r2, [r3, #0]
 8006384:	e01e      	b.n	80063c4 <xQueueGenericSendFromISR+0x144>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8006386:	f000 fdfd 	bl	8006f84 <uxTaskGetNumberOfTasks>
 800638a:	6338      	str	r0, [r7, #48]	; 0x30
 800638c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006392:	429a      	cmp	r2, r3
 8006394:	d916      	bls.n	80063c4 <xQueueGenericSendFromISR+0x144>
 8006396:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800639a:	2b7f      	cmp	r3, #127	; 0x7f
 800639c:	d10a      	bne.n	80063b4 <xQueueGenericSendFromISR+0x134>
        __asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	61bb      	str	r3, [r7, #24]
    }
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xQueueGenericSendFromISR+0x132>
 80063b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80063b8:	3301      	adds	r3, #1
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	b25a      	sxtb	r2, r3
 80063be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80063c4:	2301      	movs	r3, #1
 80063c6:	647b      	str	r3, [r7, #68]	; 0x44
        {
 80063c8:	e001      	b.n	80063ce <xQueueGenericSendFromISR+0x14e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80063ca:	2300      	movs	r3, #0
 80063cc:	647b      	str	r3, [r7, #68]	; 0x44
 80063ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063d0:	617b      	str	r3, [r7, #20]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80063d8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80063da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3748      	adds	r7, #72	; 0x48
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08c      	sub	sp, #48	; 0x30
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80063f0:	2300      	movs	r3, #0
 80063f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d10a      	bne.n	8006414 <xQueueReceive+0x30>
        __asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	623b      	str	r3, [r7, #32]
    }
 8006410:	bf00      	nop
 8006412:	e7fe      	b.n	8006412 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d103      	bne.n	8006422 <xQueueReceive+0x3e>
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueReceive+0x42>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueReceive+0x44>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <xQueueReceive+0x5e>
        __asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	61fb      	str	r3, [r7, #28]
    }
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006442:	f001 fa4f 	bl	80078e4 <xTaskGetSchedulerState>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <xQueueReceive+0x6e>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <xQueueReceive+0x72>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <xQueueReceive+0x74>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10a      	bne.n	8006472 <xQueueReceive+0x8e>
        __asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	f383 8811 	msr	BASEPRI, r3
 8006464:	f3bf 8f6f 	isb	sy
 8006468:	f3bf 8f4f 	dsb	sy
 800646c:	61bb      	str	r3, [r7, #24]
    }
 800646e:	bf00      	nop
 8006470:	e7fe      	b.n	8006470 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006472:	f001 ff7d 	bl	8008370 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800647c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01f      	beq.n	80064c2 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006482:	68b9      	ldr	r1, [r7, #8]
 8006484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006486:	f000 f915 	bl	80066b4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	1e5a      	subs	r2, r3, #1
 800648e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006490:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d00f      	beq.n	80064ba <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800649a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649c:	3310      	adds	r3, #16
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 ffb2 	bl	8007408 <xTaskRemoveFromEventList>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d007      	beq.n	80064ba <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80064aa:	4b3d      	ldr	r3, [pc, #244]	; (80065a0 <xQueueReceive+0x1bc>)
 80064ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b0:	601a      	str	r2, [r3, #0]
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80064ba:	f001 ff89 	bl	80083d0 <vPortExitCritical>
                return pdPASS;
 80064be:	2301      	movs	r3, #1
 80064c0:	e069      	b.n	8006596 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d103      	bne.n	80064d0 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80064c8:	f001 ff82 	bl	80083d0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e062      	b.n	8006596 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80064d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80064d6:	f107 0310 	add.w	r3, r7, #16
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 f86c 	bl	80075b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80064e0:	2301      	movs	r3, #1
 80064e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80064e4:	f001 ff74 	bl	80083d0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80064e8:	f000 fbfe 	bl	8006ce8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80064ec:	f001 ff40 	bl	8008370 <vPortEnterCritical>
 80064f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064f6:	b25b      	sxtb	r3, r3
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d103      	bne.n	8006506 <xQueueReceive+0x122>
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800650c:	b25b      	sxtb	r3, r3
 800650e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006512:	d103      	bne.n	800651c <xQueueReceive+0x138>
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800651c:	f001 ff58 	bl	80083d0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006520:	1d3a      	adds	r2, r7, #4
 8006522:	f107 0310 	add.w	r3, r7, #16
 8006526:	4611      	mov	r1, r2
 8006528:	4618      	mov	r0, r3
 800652a:	f001 f85b 	bl	80075e4 <xTaskCheckForTimeOut>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d123      	bne.n	800657c <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006534:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006536:	f000 f935 	bl	80067a4 <prvIsQueueEmpty>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d017      	beq.n	8006570 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006542:	3324      	adds	r3, #36	; 0x24
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f000 fef3 	bl	8007334 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800654e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006550:	f000 f8d6 	bl	8006700 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8006554:	f000 fc0c 	bl	8006d70 <xTaskResumeAll>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d189      	bne.n	8006472 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800655e:	4b10      	ldr	r3, [pc, #64]	; (80065a0 <xQueueReceive+0x1bc>)
 8006560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006564:	601a      	str	r2, [r3, #0]
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	e780      	b.n	8006472 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8006570:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006572:	f000 f8c5 	bl	8006700 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006576:	f000 fbfb 	bl	8006d70 <xTaskResumeAll>
 800657a:	e77a      	b.n	8006472 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800657c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657e:	f000 f8bf 	bl	8006700 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006582:	f000 fbf5 	bl	8006d70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006588:	f000 f90c 	bl	80067a4 <prvIsQueueEmpty>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	f43f af6f 	beq.w	8006472 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8006594:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8006596:	4618      	mov	r0, r3
 8006598:	3730      	adds	r7, #48	; 0x30
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	e000ed04 	.word	0xe000ed04

080065a4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10a      	bne.n	80065c8 <uxQueueMessagesWaiting+0x24>
        __asm volatile
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	60bb      	str	r3, [r7, #8]
    }
 80065c4:	bf00      	nop
 80065c6:	e7fe      	b.n	80065c6 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80065c8:	f001 fed2 	bl	8008370 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065d0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80065d2:	f001 fefd 	bl	80083d0 <vPortExitCritical>

    return uxReturn;
 80065d6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80065ec:	2300      	movs	r3, #0
 80065ee:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f4:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10d      	bne.n	800661a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d14d      	bne.n	80066a2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f988 	bl	8007920 <xTaskPriorityDisinherit>
 8006610:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2200      	movs	r2, #0
 8006616:	609a      	str	r2, [r3, #8]
 8006618:	e043      	b.n	80066a2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d119      	bne.n	8006654 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6858      	ldr	r0, [r3, #4]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006628:	461a      	mov	r2, r3
 800662a:	68b9      	ldr	r1, [r7, #8]
 800662c:	f002 f8bc 	bl	80087a8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	441a      	add	r2, r3
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	429a      	cmp	r2, r3
 8006648:	d32b      	bcc.n	80066a2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	605a      	str	r2, [r3, #4]
 8006652:	e026      	b.n	80066a2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	68d8      	ldr	r0, [r3, #12]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	461a      	mov	r2, r3
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	f002 f8a2 	bl	80087a8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	425b      	negs	r3, r3
 800666e:	441a      	add	r2, r3
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68da      	ldr	r2, [r3, #12]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d207      	bcs.n	8006690 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006688:	425b      	negs	r3, r3
 800668a:	441a      	add	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b02      	cmp	r3, #2
 8006694:	d105      	bne.n	80066a2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3b01      	subs	r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1c5a      	adds	r2, r3, #1
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80066aa:	697b      	ldr	r3, [r7, #20]
}
 80066ac:	4618      	mov	r0, r3
 80066ae:	3718      	adds	r7, #24
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d018      	beq.n	80066f8 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	441a      	add	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68da      	ldr	r2, [r3, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d303      	bcc.n	80066e8 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68d9      	ldr	r1, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f0:	461a      	mov	r2, r3
 80066f2:	6838      	ldr	r0, [r7, #0]
 80066f4:	f002 f858 	bl	80087a8 <memcpy>
    }
}
 80066f8:	bf00      	nop
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8006708:	f001 fe32 	bl	8008370 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006712:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006714:	e011      	b.n	800673a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	d012      	beq.n	8006744 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	3324      	adds	r3, #36	; 0x24
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fe70 	bl	8007408 <xTaskRemoveFromEventList>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800672e:	f000 ffbf 	bl	80076b0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
 8006734:	3b01      	subs	r3, #1
 8006736:	b2db      	uxtb	r3, r3
 8006738:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800673a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800673e:	2b00      	cmp	r3, #0
 8006740:	dce9      	bgt.n	8006716 <prvUnlockQueue+0x16>
 8006742:	e000      	b.n	8006746 <prvUnlockQueue+0x46>
                    break;
 8006744:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	22ff      	movs	r2, #255	; 0xff
 800674a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800674e:	f001 fe3f 	bl	80083d0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006752:	f001 fe0d 	bl	8008370 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800675c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800675e:	e011      	b.n	8006784 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d012      	beq.n	800678e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	3310      	adds	r3, #16
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fe4b 	bl	8007408 <xTaskRemoveFromEventList>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d001      	beq.n	800677c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006778:	f000 ff9a 	bl	80076b0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800677c:	7bbb      	ldrb	r3, [r7, #14]
 800677e:	3b01      	subs	r3, #1
 8006780:	b2db      	uxtb	r3, r3
 8006782:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006784:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006788:	2b00      	cmp	r3, #0
 800678a:	dce9      	bgt.n	8006760 <prvUnlockQueue+0x60>
 800678c:	e000      	b.n	8006790 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800678e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	22ff      	movs	r2, #255	; 0xff
 8006794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8006798:	f001 fe1a 	bl	80083d0 <vPortExitCritical>
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b084      	sub	sp, #16
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80067ac:	f001 fde0 	bl	8008370 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d102      	bne.n	80067be <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80067b8:	2301      	movs	r3, #1
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	e001      	b.n	80067c2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80067c2:	f001 fe05 	bl	80083d0 <vPortExitCritical>

    return xReturn;
 80067c6:	68fb      	ldr	r3, [r7, #12]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80067d8:	f001 fdca 	bl	8008370 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d102      	bne.n	80067ee <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80067e8:	2301      	movs	r3, #1
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e001      	b.n	80067f2 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80067ee:	2300      	movs	r3, #0
 80067f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80067f2:	f001 fded 	bl	80083d0 <vPortExitCritical>

    return xReturn;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800680a:	2300      	movs	r3, #0
 800680c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8006814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006818:	f383 8811 	msr	BASEPRI, r3
 800681c:	f3bf 8f6f 	isb	sy
 8006820:	f3bf 8f4f 	dsb	sy
 8006824:	60fb      	str	r3, [r7, #12]
    }
 8006826:	bf00      	nop
 8006828:	e7fe      	b.n	8006828 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d024      	beq.n	800687a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	e01e      	b.n	8006874 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8006836:	4a18      	ldr	r2, [pc, #96]	; (8006898 <vQueueAddToRegistry+0x98>)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	00db      	lsls	r3, r3, #3
 800683c:	4413      	add	r3, r2
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d105      	bne.n	8006852 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	4a13      	ldr	r2, [pc, #76]	; (8006898 <vQueueAddToRegistry+0x98>)
 800684c:	4413      	add	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
                    break;
 8006850:	e013      	b.n	800687a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10a      	bne.n	800686e <vQueueAddToRegistry+0x6e>
 8006858:	4a0f      	ldr	r2, [pc, #60]	; (8006898 <vQueueAddToRegistry+0x98>)
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	4a0b      	ldr	r2, [pc, #44]	; (8006898 <vQueueAddToRegistry+0x98>)
 800686a:	4413      	add	r3, r2
 800686c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	3301      	adds	r3, #1
 8006872:	617b      	str	r3, [r7, #20]
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b07      	cmp	r3, #7
 8006878:	d9dd      	bls.n	8006836 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d005      	beq.n	800688c <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	683a      	ldr	r2, [r7, #0]
 8006884:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 800688c:	bf00      	nop
 800688e:	371c      	adds	r7, #28
 8006890:	46bd      	mov	sp, r7
 8006892:	bc80      	pop	{r7}
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	200004d0 	.word	0x200004d0

0800689c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800689c:	b580      	push	{r7, lr}
 800689e:	b086      	sub	sp, #24
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80068ac:	f001 fd60 	bl	8008370 <vPortEnterCritical>
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80068b6:	b25b      	sxtb	r3, r3
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d103      	bne.n	80068c6 <vQueueWaitForMessageRestricted+0x2a>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068cc:	b25b      	sxtb	r3, r3
 80068ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d2:	d103      	bne.n	80068dc <vQueueWaitForMessageRestricted+0x40>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068dc:	f001 fd78 	bl	80083d0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d106      	bne.n	80068f6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3324      	adds	r3, #36	; 0x24
 80068ec:	687a      	ldr	r2, [r7, #4]
 80068ee:	68b9      	ldr	r1, [r7, #8]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 fd43 	bl	800737c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80068f6:	6978      	ldr	r0, [r7, #20]
 80068f8:	f7ff ff02 	bl	8006700 <prvUnlockQueue>
    }
 80068fc:	bf00      	nop
 80068fe:	3718      	adds	r7, #24
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006904:	b580      	push	{r7, lr}
 8006906:	b08c      	sub	sp, #48	; 0x30
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4618      	mov	r0, r3
 8006918:	f001 fb88 	bl	800802c <pvPortMalloc>
 800691c:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d013      	beq.n	800694c <xTaskCreate+0x48>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006924:	207c      	movs	r0, #124	; 0x7c
 8006926:	f001 fb81 	bl	800802c <pvPortMalloc>
 800692a:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d008      	beq.n	8006944 <xTaskCreate+0x40>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8006932:	227c      	movs	r2, #124	; 0x7c
 8006934:	2100      	movs	r1, #0
 8006936:	69f8      	ldr	r0, [r7, #28]
 8006938:	f001 ff44 	bl	80087c4 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	631a      	str	r2, [r3, #48]	; 0x30
 8006942:	e005      	b.n	8006950 <xTaskCreate+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8006944:	6978      	ldr	r0, [r7, #20]
 8006946:	f001 fb83 	bl	8008050 <vPortFree>
 800694a:	e001      	b.n	8006950 <xTaskCreate+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800694c:	2300      	movs	r3, #0
 800694e:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d013      	beq.n	800697e <xTaskCreate+0x7a>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006956:	2300      	movs	r3, #0
 8006958:	9303      	str	r3, [sp, #12]
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	9302      	str	r3, [sp, #8]
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006964:	9300      	str	r3, [sp, #0]
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f80e 	bl	800698e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006972:	69f8      	ldr	r0, [r7, #28]
 8006974:	f000 f89a 	bl	8006aac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006978:	2301      	movs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e002      	b.n	8006984 <xTaskCreate+0x80>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006984:	69bb      	ldr	r3, [r7, #24]
    }
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b088      	sub	sp, #32
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800699c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	461a      	mov	r2, r3
 80069a6:	21a5      	movs	r1, #165	; 0xa5
 80069a8:	f001 ff0c 	bl	80087c4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80069b6:	3b01      	subs	r3, #1
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <prvInitialiseNewTask+0x58>
        __asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	617b      	str	r3, [r7, #20]
    }
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01e      	beq.n	8006a2a <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	e012      	b.n	8006a18 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	4413      	add	r3, r2
 80069f8:	7819      	ldrb	r1, [r3, #0]
 80069fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	3334      	adds	r3, #52	; 0x34
 8006a02:	460a      	mov	r2, r1
 8006a04:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d006      	beq.n	8006a20 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	3301      	adds	r3, #1
 8006a16:	61fb      	str	r3, [r7, #28]
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	2b13      	cmp	r3, #19
 8006a1c:	d9e9      	bls.n	80069f2 <prvInitialiseNewTask+0x64>
 8006a1e:	e000      	b.n	8006a22 <prvInitialiseNewTask+0x94>
            {
                break;
 8006a20:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8006a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d90a      	bls.n	8006a46 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8006a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a34:	f383 8811 	msr	BASEPRI, r3
 8006a38:	f3bf 8f6f 	isb	sy
 8006a3c:	f3bf 8f4f 	dsb	sy
 8006a40:	613b      	str	r3, [r7, #16]
    }
 8006a42:	bf00      	nop
 8006a44:	e7fe      	b.n	8006a44 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d901      	bls.n	8006a50 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a54:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a5a:	651a      	str	r2, [r3, #80]	; 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 fb26 	bl	80080b2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	3318      	adds	r3, #24
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f001 fb21 	bl	80080b2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a74:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a78:	f1c3 0205 	rsb	r2, r3, #5
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a84:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	68f9      	ldr	r1, [r7, #12]
 8006a8a:	69b8      	ldr	r0, [r7, #24]
 8006a8c:	f001 fb7e 	bl	800818c <pxPortInitialiseStack>
 8006a90:	4602      	mov	r2, r0
 8006a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a94:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d002      	beq.n	8006aa2 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006aa0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006aa2:	bf00      	nop
 8006aa4:	3720      	adds	r7, #32
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006ab4:	f001 fc5c 	bl	8008370 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006ab8:	4b41      	ldr	r3, [pc, #260]	; (8006bc0 <prvAddNewTaskToReadyList+0x114>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	4a40      	ldr	r2, [pc, #256]	; (8006bc0 <prvAddNewTaskToReadyList+0x114>)
 8006ac0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8006ac2:	4b40      	ldr	r3, [pc, #256]	; (8006bc4 <prvAddNewTaskToReadyList+0x118>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d109      	bne.n	8006ade <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006aca:	4a3e      	ldr	r2, [pc, #248]	; (8006bc4 <prvAddNewTaskToReadyList+0x118>)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ad0:	4b3b      	ldr	r3, [pc, #236]	; (8006bc0 <prvAddNewTaskToReadyList+0x114>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d110      	bne.n	8006afa <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006ad8:	f000 fe6c 	bl	80077b4 <prvInitialiseTaskLists>
 8006adc:	e00d      	b.n	8006afa <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006ade:	4b3a      	ldr	r3, [pc, #232]	; (8006bc8 <prvAddNewTaskToReadyList+0x11c>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ae6:	4b37      	ldr	r3, [pc, #220]	; (8006bc4 <prvAddNewTaskToReadyList+0x118>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d802      	bhi.n	8006afa <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006af4:	4a33      	ldr	r2, [pc, #204]	; (8006bc4 <prvAddNewTaskToReadyList+0x118>)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8006afa:	4b34      	ldr	r3, [pc, #208]	; (8006bcc <prvAddNewTaskToReadyList+0x120>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	3301      	adds	r3, #1
 8006b00:	4a32      	ldr	r2, [pc, #200]	; (8006bcc <prvAddNewTaskToReadyList+0x120>)
 8006b02:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b04:	4b31      	ldr	r3, [pc, #196]	; (8006bcc <prvAddNewTaskToReadyList+0x120>)
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	649a      	str	r2, [r3, #72]	; 0x48
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	4b2f      	ldr	r3, [pc, #188]	; (8006bd0 <prvAddNewTaskToReadyList+0x124>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d903      	bls.n	8006b20 <prvAddNewTaskToReadyList+0x74>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b1c:	4a2c      	ldr	r2, [pc, #176]	; (8006bd0 <prvAddNewTaskToReadyList+0x124>)
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b24:	492b      	ldr	r1, [pc, #172]	; (8006bd4 <prvAddNewTaskToReadyList+0x128>)
 8006b26:	4613      	mov	r3, r2
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	4413      	add	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	440b      	add	r3, r1
 8006b30:	3304      	adds	r3, #4
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	60da      	str	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	3204      	adds	r2, #4
 8006b4c:	605a      	str	r2, [r3, #4]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	1d1a      	adds	r2, r3, #4
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	609a      	str	r2, [r3, #8]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4a1c      	ldr	r2, [pc, #112]	; (8006bd4 <prvAddNewTaskToReadyList+0x128>)
 8006b64:	441a      	add	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	615a      	str	r2, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6e:	4919      	ldr	r1, [pc, #100]	; (8006bd4 <prvAddNewTaskToReadyList+0x128>)
 8006b70:	4613      	mov	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	4413      	add	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	440b      	add	r3, r1
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	4815      	ldr	r0, [pc, #84]	; (8006bd4 <prvAddNewTaskToReadyList+0x128>)
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4403      	add	r3, r0
 8006b8a:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8006b8c:	f001 fc20 	bl	80083d0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006b90:	4b0d      	ldr	r3, [pc, #52]	; (8006bc8 <prvAddNewTaskToReadyList+0x11c>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00e      	beq.n	8006bb6 <prvAddNewTaskToReadyList+0x10a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b98:	4b0a      	ldr	r3, [pc, #40]	; (8006bc4 <prvAddNewTaskToReadyList+0x118>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d207      	bcs.n	8006bb6 <prvAddNewTaskToReadyList+0x10a>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <prvAddNewTaskToReadyList+0x12c>)
 8006ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	f3bf 8f4f 	dsb	sy
 8006bb2:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006bb6:	bf00      	nop
 8006bb8:	3710      	adds	r7, #16
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	200001b8 	.word	0x200001b8
 8006bc4:	200000e0 	.word	0x200000e0
 8006bc8:	200001c4 	.word	0x200001c4
 8006bcc:	200001d4 	.word	0x200001d4
 8006bd0:	200001c0 	.word	0x200001c0
 8006bd4:	200000e4 	.word	0x200000e4
 8006bd8:	e000ed04 	.word	0xe000ed04

08006bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d017      	beq.n	8006c1e <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8006bee:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <vTaskDelay+0x60>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d00a      	beq.n	8006c0c <vTaskDelay+0x30>
        __asm volatile
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	60bb      	str	r3, [r7, #8]
    }
 8006c08:	bf00      	nop
 8006c0a:	e7fe      	b.n	8006c0a <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8006c0c:	f000 f86c 	bl	8006ce8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c10:	2100      	movs	r1, #0
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 ff1a 	bl	8007a4c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8006c18:	f000 f8aa 	bl	8006d70 <xTaskResumeAll>
 8006c1c:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d107      	bne.n	8006c34 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8006c24:	4b06      	ldr	r3, [pc, #24]	; (8006c40 <vTaskDelay+0x64>)
 8006c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	f3bf 8f4f 	dsb	sy
 8006c30:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006c34:	bf00      	nop
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	200001e0 	.word	0x200001e0
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8006c4a:	4b20      	ldr	r3, [pc, #128]	; (8006ccc <vTaskStartScheduler+0x88>)
 8006c4c:	9301      	str	r3, [sp, #4]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	2300      	movs	r3, #0
 8006c54:	2280      	movs	r2, #128	; 0x80
 8006c56:	491e      	ldr	r1, [pc, #120]	; (8006cd0 <vTaskStartScheduler+0x8c>)
 8006c58:	481e      	ldr	r0, [pc, #120]	; (8006cd4 <vTaskStartScheduler+0x90>)
 8006c5a:	f7ff fe53 	bl	8006904 <xTaskCreate>
 8006c5e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d102      	bne.n	8006c6c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8006c66:	f000 ff5f 	bl	8007b28 <xTimerCreateTimerTask>
 8006c6a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d116      	bne.n	8006ca0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	60bb      	str	r3, [r7, #8]
    }
 8006c84:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <vTaskStartScheduler+0x94>)
 8006c88:	f04f 32ff 	mov.w	r2, #4294967295
 8006c8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <vTaskStartScheduler+0x98>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c94:	4b12      	ldr	r3, [pc, #72]	; (8006ce0 <vTaskStartScheduler+0x9c>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8006c9a:	f001 faf7 	bl	800828c <xPortStartScheduler>
 8006c9e:	e00e      	b.n	8006cbe <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ca6:	d10a      	bne.n	8006cbe <vTaskStartScheduler+0x7a>
        __asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	607b      	str	r3, [r7, #4]
    }
 8006cba:	bf00      	nop
 8006cbc:	e7fe      	b.n	8006cbc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006cbe:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <vTaskStartScheduler+0xa0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
}
 8006cc2:	bf00      	nop
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	200001dc 	.word	0x200001dc
 8006cd0:	0800a1b4 	.word	0x0800a1b4
 8006cd4:	080076c9 	.word	0x080076c9
 8006cd8:	200001d8 	.word	0x200001d8
 8006cdc:	200001c4 	.word	0x200001c4
 8006ce0:	200001bc 	.word	0x200001bc
 8006ce4:	2000001c 	.word	0x2000001c

08006ce8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006cec:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <vTaskSuspendAll+0x18>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	4a03      	ldr	r2, [pc, #12]	; (8006d00 <vTaskSuspendAll+0x18>)
 8006cf4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8006cf6:	bf00      	nop
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bc80      	pop	{r7}
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	200001e0 	.word	0x200001e0

08006d04 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    static TickType_t prvGetExpectedIdleTime( void )
    {
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
        TickType_t xReturn;
        UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	603b      	str	r3, [r7, #0]
         * configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
         * task that are in the Ready state, even though the idle task is
         * running. */
        #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
        {
            if( uxTopReadyPriority > tskIDLE_PRIORITY )
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <prvGetExpectedIdleTime+0x58>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <prvGetExpectedIdleTime+0x16>
            {
                uxHigherPriorityReadyTasks = pdTRUE;
 8006d16:	2301      	movs	r3, #1
 8006d18:	603b      	str	r3, [r7, #0]
                uxHigherPriorityReadyTasks = pdTRUE;
            }
        }
        #endif /* if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 ) */

        if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 8006d1a:	4b11      	ldr	r3, [pc, #68]	; (8006d60 <prvGetExpectedIdleTime+0x5c>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <prvGetExpectedIdleTime+0x26>
        {
            xReturn = 0;
 8006d24:	2300      	movs	r3, #0
 8006d26:	607b      	str	r3, [r7, #4]
 8006d28:	e012      	b.n	8006d50 <prvGetExpectedIdleTime+0x4c>
        }
        else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 8006d2a:	4b0e      	ldr	r3, [pc, #56]	; (8006d64 <prvGetExpectedIdleTime+0x60>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d902      	bls.n	8006d38 <prvGetExpectedIdleTime+0x34>
        {
            /* There are other idle priority tasks in the ready state.  If
             * time slicing is used then the very next tick interrupt must be
             * processed. */
            xReturn = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	607b      	str	r3, [r7, #4]
 8006d36:	e00b      	b.n	8006d50 <prvGetExpectedIdleTime+0x4c>
        }
        else if( uxHigherPriorityReadyTasks != pdFALSE )
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d002      	beq.n	8006d44 <prvGetExpectedIdleTime+0x40>
        {
            /* There are tasks in the Ready state that have a priority above the
             * idle priority.  This path can only be reached if
             * configUSE_PREEMPTION is 0. */
            xReturn = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	607b      	str	r3, [r7, #4]
 8006d42:	e005      	b.n	8006d50 <prvGetExpectedIdleTime+0x4c>
        }
        else
        {
            xReturn = xNextTaskUnblockTime - xTickCount;
 8006d44:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <prvGetExpectedIdleTime+0x64>)
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <prvGetExpectedIdleTime+0x68>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	607b      	str	r3, [r7, #4]
        }

        return xReturn;
 8006d50:	687b      	ldr	r3, [r7, #4]
    }
 8006d52:	4618      	mov	r0, r3
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bc80      	pop	{r7}
 8006d5a:	4770      	bx	lr
 8006d5c:	200001c0 	.word	0x200001c0
 8006d60:	200000e0 	.word	0x200000e0
 8006d64:	200000e4 	.word	0x200000e4
 8006d68:	200001d8 	.word	0x200001d8
 8006d6c:	200001bc 	.word	0x200001bc

08006d70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006d76:	2300      	movs	r3, #0
 8006d78:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006d7e:	4b71      	ldr	r3, [pc, #452]	; (8006f44 <xTaskResumeAll+0x1d4>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d10a      	bne.n	8006d9c <xTaskResumeAll+0x2c>
        __asm volatile
 8006d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d8a:	f383 8811 	msr	BASEPRI, r3
 8006d8e:	f3bf 8f6f 	isb	sy
 8006d92:	f3bf 8f4f 	dsb	sy
 8006d96:	607b      	str	r3, [r7, #4]
    }
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006d9c:	f001 fae8 	bl	8008370 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006da0:	4b68      	ldr	r3, [pc, #416]	; (8006f44 <xTaskResumeAll+0x1d4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3b01      	subs	r3, #1
 8006da6:	4a67      	ldr	r2, [pc, #412]	; (8006f44 <xTaskResumeAll+0x1d4>)
 8006da8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006daa:	4b66      	ldr	r3, [pc, #408]	; (8006f44 <xTaskResumeAll+0x1d4>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	f040 80c1 	bne.w	8006f36 <xTaskResumeAll+0x1c6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006db4:	4b64      	ldr	r3, [pc, #400]	; (8006f48 <xTaskResumeAll+0x1d8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 80bc 	beq.w	8006f36 <xTaskResumeAll+0x1c6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006dbe:	e08b      	b.n	8006ed8 <xTaskResumeAll+0x168>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dc0:	4b62      	ldr	r3, [pc, #392]	; (8006f4c <xTaskResumeAll+0x1dc>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	69db      	ldr	r3, [r3, #28]
 8006dd2:	69fa      	ldr	r2, [r7, #28]
 8006dd4:	6a12      	ldr	r2, [r2, #32]
 8006dd6:	609a      	str	r2, [r3, #8]
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	69d2      	ldr	r2, [r2, #28]
 8006de0:	605a      	str	r2, [r3, #4]
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	685a      	ldr	r2, [r3, #4]
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3318      	adds	r3, #24
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d103      	bne.n	8006df6 <xTaskResumeAll+0x86>
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	6a1a      	ldr	r2, [r3, #32]
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	605a      	str	r2, [r3, #4]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	629a      	str	r2, [r3, #40]	; 0x28
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	695b      	ldr	r3, [r3, #20]
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	68d2      	ldr	r2, [r2, #12]
 8006e14:	609a      	str	r2, [r3, #8]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	68db      	ldr	r3, [r3, #12]
 8006e1a:	69fa      	ldr	r2, [r7, #28]
 8006e1c:	6892      	ldr	r2, [r2, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	3304      	adds	r3, #4
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	d103      	bne.n	8006e34 <xTaskResumeAll+0xc4>
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	68da      	ldr	r2, [r3, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	605a      	str	r2, [r3, #4]
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	2200      	movs	r2, #0
 8006e38:	615a      	str	r2, [r3, #20]
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	1e5a      	subs	r2, r3, #1
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e48:	4b41      	ldr	r3, [pc, #260]	; (8006f50 <xTaskResumeAll+0x1e0>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d903      	bls.n	8006e58 <xTaskResumeAll+0xe8>
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	4a3e      	ldr	r2, [pc, #248]	; (8006f50 <xTaskResumeAll+0x1e0>)
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e5c:	493d      	ldr	r1, [pc, #244]	; (8006f54 <xTaskResumeAll+0x1e4>)
 8006e5e:	4613      	mov	r3, r2
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	4413      	add	r3, r2
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	440b      	add	r3, r1
 8006e68:	3304      	adds	r3, #4
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	609a      	str	r2, [r3, #8]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	689a      	ldr	r2, [r3, #8]
 8006e78:	69fb      	ldr	r3, [r7, #28]
 8006e7a:	60da      	str	r2, [r3, #12]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	3204      	adds	r2, #4
 8006e84:	605a      	str	r2, [r3, #4]
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	1d1a      	adds	r2, r3, #4
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	609a      	str	r2, [r3, #8]
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e92:	4613      	mov	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4413      	add	r3, r2
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	4a2e      	ldr	r2, [pc, #184]	; (8006f54 <xTaskResumeAll+0x1e4>)
 8006e9c:	441a      	add	r2, r3
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	615a      	str	r2, [r3, #20]
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea6:	492b      	ldr	r1, [pc, #172]	; (8006f54 <xTaskResumeAll+0x1e4>)
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	440b      	add	r3, r1
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1c59      	adds	r1, r3, #1
 8006eb6:	4827      	ldr	r0, [pc, #156]	; (8006f54 <xTaskResumeAll+0x1e4>)
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	009b      	lsls	r3, r3, #2
 8006ec0:	4403      	add	r3, r0
 8006ec2:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ec8:	4b23      	ldr	r3, [pc, #140]	; (8006f58 <xTaskResumeAll+0x1e8>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d302      	bcc.n	8006ed8 <xTaskResumeAll+0x168>
                    {
                        xYieldPending = pdTRUE;
 8006ed2:	4b22      	ldr	r3, [pc, #136]	; (8006f5c <xTaskResumeAll+0x1ec>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ed8:	4b1c      	ldr	r3, [pc, #112]	; (8006f4c <xTaskResumeAll+0x1dc>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f47f af6f 	bne.w	8006dc0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <xTaskResumeAll+0x17c>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006ee8:	f000 fce2 	bl	80078b0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006eec:	4b1c      	ldr	r3, [pc, #112]	; (8006f60 <xTaskResumeAll+0x1f0>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d010      	beq.n	8006f1a <xTaskResumeAll+0x1aa>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006ef8:	f000 f8a8 	bl	800704c <xTaskIncrementTick>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <xTaskResumeAll+0x198>
                            {
                                xYieldPending = pdTRUE;
 8006f02:	4b16      	ldr	r3, [pc, #88]	; (8006f5c <xTaskResumeAll+0x1ec>)
 8006f04:	2201      	movs	r2, #1
 8006f06:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1f1      	bne.n	8006ef8 <xTaskResumeAll+0x188>

                        xPendedTicks = 0;
 8006f14:	4b12      	ldr	r3, [pc, #72]	; (8006f60 <xTaskResumeAll+0x1f0>)
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <xTaskResumeAll+0x1ec>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <xTaskResumeAll+0x1c6>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8006f22:	2301      	movs	r3, #1
 8006f24:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006f26:	4b0f      	ldr	r3, [pc, #60]	; (8006f64 <xTaskResumeAll+0x1f4>)
 8006f28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f2c:	601a      	str	r2, [r3, #0]
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006f36:	f001 fa4b 	bl	80083d0 <vPortExitCritical>

    return xAlreadyYielded;
 8006f3a:	69bb      	ldr	r3, [r7, #24]
}
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	3720      	adds	r7, #32
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	200001e0 	.word	0x200001e0
 8006f48:	200001b8 	.word	0x200001b8
 8006f4c:	20000178 	.word	0x20000178
 8006f50:	200001c0 	.word	0x200001c0
 8006f54:	200000e4 	.word	0x200000e4
 8006f58:	200000e0 	.word	0x200000e0
 8006f5c:	200001cc 	.word	0x200001cc
 8006f60:	200001c8 	.word	0x200001c8
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006f6e:	4b04      	ldr	r3, [pc, #16]	; (8006f80 <xTaskGetTickCount+0x18>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006f74:	687b      	ldr	r3, [r7, #4]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	370c      	adds	r7, #12
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bc80      	pop	{r7}
 8006f7e:	4770      	bx	lr
 8006f80:	200001bc 	.word	0x200001bc

08006f84 <uxTaskGetNumberOfTasks>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006f84:	b480      	push	{r7}
 8006f86:	af00      	add	r7, sp, #0
    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    return uxCurrentNumberOfTasks;
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <uxTaskGetNumberOfTasks+0x10>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr
 8006f94:	200001b8 	.word	0x200001b8

08006f98 <vTaskStepTick>:
 * implementations require configUSE_TICKLESS_IDLE to be set to a value other than
 * 1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

    void vTaskStepTick( TickType_t xTicksToJump )
    {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
        /* Correct the tick count value after a period during which the tick
         * was suppressed.  Note this does *not* call the tick hook function for
         * each stepped tick. */
        configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8006fa0:	4b26      	ldr	r3, [pc, #152]	; (800703c <vTaskStepTick+0xa4>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	441a      	add	r2, r3
 8006fa8:	4b25      	ldr	r3, [pc, #148]	; (8007040 <vTaskStepTick+0xa8>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d90a      	bls.n	8006fc6 <vTaskStepTick+0x2e>
        __asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	617b      	str	r3, [r7, #20]
    }
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <vTaskStepTick+0x2c>

        if( ( xTickCount + xTicksToJump ) == xNextTaskUnblockTime )
 8006fc6:	4b1d      	ldr	r3, [pc, #116]	; (800703c <vTaskStepTick+0xa4>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	441a      	add	r2, r3
 8006fce:	4b1c      	ldr	r3, [pc, #112]	; (8007040 <vTaskStepTick+0xa8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d128      	bne.n	8007028 <vTaskStepTick+0x90>
        {
            /* Arrange for xTickCount to reach xNextTaskUnblockTime in
             * xTaskIncrementTick() when the scheduler resumes.  This ensures
             * that any delayed tasks are resumed at the correct time. */
            configASSERT( uxSchedulerSuspended );
 8006fd6:	4b1b      	ldr	r3, [pc, #108]	; (8007044 <vTaskStepTick+0xac>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d10a      	bne.n	8006ff4 <vTaskStepTick+0x5c>
        __asm volatile
 8006fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe2:	f383 8811 	msr	BASEPRI, r3
 8006fe6:	f3bf 8f6f 	isb	sy
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	613b      	str	r3, [r7, #16]
    }
 8006ff0:	bf00      	nop
 8006ff2:	e7fe      	b.n	8006ff2 <vTaskStepTick+0x5a>
            configASSERT( xTicksToJump != ( TickType_t ) 0 );
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <vTaskStepTick+0x78>
        __asm volatile
 8006ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ffe:	f383 8811 	msr	BASEPRI, r3
 8007002:	f3bf 8f6f 	isb	sy
 8007006:	f3bf 8f4f 	dsb	sy
 800700a:	60fb      	str	r3, [r7, #12]
    }
 800700c:	bf00      	nop
 800700e:	e7fe      	b.n	800700e <vTaskStepTick+0x76>

            /* Prevent the tick interrupt modifying xPendedTicks simultaneously. */
            taskENTER_CRITICAL();
 8007010:	f001 f9ae 	bl	8008370 <vPortEnterCritical>
            {
                xPendedTicks++;
 8007014:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <vTaskStepTick+0xb0>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	4a0b      	ldr	r2, [pc, #44]	; (8007048 <vTaskStepTick+0xb0>)
 800701c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800701e:	f001 f9d7 	bl	80083d0 <vPortExitCritical>
            xTicksToJump--;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	3b01      	subs	r3, #1
 8007026:	607b      	str	r3, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        xTickCount += xTicksToJump;
 8007028:	4b04      	ldr	r3, [pc, #16]	; (800703c <vTaskStepTick+0xa4>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	4413      	add	r3, r2
 8007030:	4a02      	ldr	r2, [pc, #8]	; (800703c <vTaskStepTick+0xa4>)
 8007032:	6013      	str	r3, [r2, #0]
        traceINCREASE_TICK_COUNT( xTicksToJump );
    }
 8007034:	bf00      	nop
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	200001bc 	.word	0x200001bc
 8007040:	200001d8 	.word	0x200001d8
 8007044:	200001e0 	.word	0x200001e0
 8007048:	200001c8 	.word	0x200001c8

0800704c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08a      	sub	sp, #40	; 0x28
 8007050:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8007052:	2300      	movs	r3, #0
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007056:	4b7e      	ldr	r3, [pc, #504]	; (8007250 <xTaskIncrementTick+0x204>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	f040 80ed 	bne.w	800723a <xTaskIncrementTick+0x1ee>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007060:	4b7c      	ldr	r3, [pc, #496]	; (8007254 <xTaskIncrementTick+0x208>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	3301      	adds	r3, #1
 8007066:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8007068:	4a7a      	ldr	r2, [pc, #488]	; (8007254 <xTaskIncrementTick+0x208>)
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800706e:	6a3b      	ldr	r3, [r7, #32]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d120      	bne.n	80070b6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8007074:	4b78      	ldr	r3, [pc, #480]	; (8007258 <xTaskIncrementTick+0x20c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <xTaskIncrementTick+0x48>
        __asm volatile
 800707e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007082:	f383 8811 	msr	BASEPRI, r3
 8007086:	f3bf 8f6f 	isb	sy
 800708a:	f3bf 8f4f 	dsb	sy
 800708e:	607b      	str	r3, [r7, #4]
    }
 8007090:	bf00      	nop
 8007092:	e7fe      	b.n	8007092 <xTaskIncrementTick+0x46>
 8007094:	4b70      	ldr	r3, [pc, #448]	; (8007258 <xTaskIncrementTick+0x20c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	61fb      	str	r3, [r7, #28]
 800709a:	4b70      	ldr	r3, [pc, #448]	; (800725c <xTaskIncrementTick+0x210>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a6e      	ldr	r2, [pc, #440]	; (8007258 <xTaskIncrementTick+0x20c>)
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	4a6e      	ldr	r2, [pc, #440]	; (800725c <xTaskIncrementTick+0x210>)
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	6013      	str	r3, [r2, #0]
 80070a8:	4b6d      	ldr	r3, [pc, #436]	; (8007260 <xTaskIncrementTick+0x214>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3301      	adds	r3, #1
 80070ae:	4a6c      	ldr	r2, [pc, #432]	; (8007260 <xTaskIncrementTick+0x214>)
 80070b0:	6013      	str	r3, [r2, #0]
 80070b2:	f000 fbfd 	bl	80078b0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80070b6:	4b6b      	ldr	r3, [pc, #428]	; (8007264 <xTaskIncrementTick+0x218>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	6a3a      	ldr	r2, [r7, #32]
 80070bc:	429a      	cmp	r2, r3
 80070be:	f0c0 80a7 	bcc.w	8007210 <xTaskIncrementTick+0x1c4>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c2:	4b65      	ldr	r3, [pc, #404]	; (8007258 <xTaskIncrementTick+0x20c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070cc:	4b65      	ldr	r3, [pc, #404]	; (8007264 <xTaskIncrementTick+0x218>)
 80070ce:	f04f 32ff 	mov.w	r2, #4294967295
 80070d2:	601a      	str	r2, [r3, #0]
                    break;
 80070d4:	e09c      	b.n	8007210 <xTaskIncrementTick+0x1c4>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d6:	4b60      	ldr	r3, [pc, #384]	; (8007258 <xTaskIncrementTick+0x20c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d203      	bcs.n	80070f6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80070ee:	4a5d      	ldr	r2, [pc, #372]	; (8007264 <xTaskIncrementTick+0x218>)
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80070f4:	e08c      	b.n	8007210 <xTaskIncrementTick+0x1c4>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80070f6:	69bb      	ldr	r3, [r7, #24]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	68d2      	ldr	r2, [r2, #12]
 8007104:	609a      	str	r2, [r3, #8]
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	69ba      	ldr	r2, [r7, #24]
 800710c:	6892      	ldr	r2, [r2, #8]
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	685a      	ldr	r2, [r3, #4]
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	3304      	adds	r3, #4
 8007118:	429a      	cmp	r2, r3
 800711a:	d103      	bne.n	8007124 <xTaskIncrementTick+0xd8>
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	2200      	movs	r2, #0
 8007128:	615a      	str	r2, [r3, #20]
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	1e5a      	subs	r2, r3, #1
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01e      	beq.n	800717a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007140:	60fb      	str	r3, [r7, #12]
 8007142:	69bb      	ldr	r3, [r7, #24]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	6a12      	ldr	r2, [r2, #32]
 800714a:	609a      	str	r2, [r3, #8]
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	6a1b      	ldr	r3, [r3, #32]
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	69d2      	ldr	r2, [r2, #28]
 8007154:	605a      	str	r2, [r3, #4]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	685a      	ldr	r2, [r3, #4]
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	3318      	adds	r3, #24
 800715e:	429a      	cmp	r2, r3
 8007160:	d103      	bne.n	800716a <xTaskIncrementTick+0x11e>
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	6a1a      	ldr	r2, [r3, #32]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	605a      	str	r2, [r3, #4]
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	2200      	movs	r2, #0
 800716e:	629a      	str	r2, [r3, #40]	; 0x28
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	1e5a      	subs	r2, r3, #1
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717e:	4b3a      	ldr	r3, [pc, #232]	; (8007268 <xTaskIncrementTick+0x21c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	429a      	cmp	r2, r3
 8007184:	d903      	bls.n	800718e <xTaskIncrementTick+0x142>
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718a:	4a37      	ldr	r2, [pc, #220]	; (8007268 <xTaskIncrementTick+0x21c>)
 800718c:	6013      	str	r3, [r2, #0]
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	4936      	ldr	r1, [pc, #216]	; (800726c <xTaskIncrementTick+0x220>)
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	3304      	adds	r3, #4
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60bb      	str	r3, [r7, #8]
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	609a      	str	r2, [r3, #8]
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	689a      	ldr	r2, [r3, #8]
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	60da      	str	r2, [r3, #12]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	3204      	adds	r2, #4
 80071ba:	605a      	str	r2, [r3, #4]
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	1d1a      	adds	r2, r3, #4
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	69bb      	ldr	r3, [r7, #24]
 80071c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4a26      	ldr	r2, [pc, #152]	; (800726c <xTaskIncrementTick+0x220>)
 80071d2:	441a      	add	r2, r3
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	615a      	str	r2, [r3, #20]
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071dc:	4923      	ldr	r1, [pc, #140]	; (800726c <xTaskIncrementTick+0x220>)
 80071de:	4613      	mov	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	440b      	add	r3, r1
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	481f      	ldr	r0, [pc, #124]	; (800726c <xTaskIncrementTick+0x220>)
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4403      	add	r3, r0
 80071f8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <xTaskIncrementTick+0x224>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007204:	429a      	cmp	r2, r3
 8007206:	f67f af5c 	bls.w	80070c2 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800720a:	2301      	movs	r3, #1
 800720c:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800720e:	e758      	b.n	80070c2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007210:	4b17      	ldr	r3, [pc, #92]	; (8007270 <xTaskIncrementTick+0x224>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	4915      	ldr	r1, [pc, #84]	; (800726c <xTaskIncrementTick+0x220>)
 8007218:	4613      	mov	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	440b      	add	r3, r1
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2b01      	cmp	r3, #1
 8007226:	d901      	bls.n	800722c <xTaskIncrementTick+0x1e0>
            {
                xSwitchRequired = pdTRUE;
 8007228:	2301      	movs	r3, #1
 800722a:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800722c:	4b11      	ldr	r3, [pc, #68]	; (8007274 <xTaskIncrementTick+0x228>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d007      	beq.n	8007244 <xTaskIncrementTick+0x1f8>
            {
                xSwitchRequired = pdTRUE;
 8007234:	2301      	movs	r3, #1
 8007236:	627b      	str	r3, [r7, #36]	; 0x24
 8007238:	e004      	b.n	8007244 <xTaskIncrementTick+0x1f8>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <xTaskIncrementTick+0x22c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	3301      	adds	r3, #1
 8007240:	4a0d      	ldr	r2, [pc, #52]	; (8007278 <xTaskIncrementTick+0x22c>)
 8007242:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007246:	4618      	mov	r0, r3
 8007248:	3728      	adds	r7, #40	; 0x28
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	200001e0 	.word	0x200001e0
 8007254:	200001bc 	.word	0x200001bc
 8007258:	20000170 	.word	0x20000170
 800725c:	20000174 	.word	0x20000174
 8007260:	200001d0 	.word	0x200001d0
 8007264:	200001d8 	.word	0x200001d8
 8007268:	200001c0 	.word	0x200001c0
 800726c:	200000e4 	.word	0x200000e4
 8007270:	200000e0 	.word	0x200000e0
 8007274:	200001cc 	.word	0x200001cc
 8007278:	200001c8 	.word	0x200001c8

0800727c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007282:	4b27      	ldr	r3, [pc, #156]	; (8007320 <vTaskSwitchContext+0xa4>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d003      	beq.n	8007292 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800728a:	4b26      	ldr	r3, [pc, #152]	; (8007324 <vTaskSwitchContext+0xa8>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8007290:	e041      	b.n	8007316 <vTaskSwitchContext+0x9a>
        xYieldPending = pdFALSE;
 8007292:	4b24      	ldr	r3, [pc, #144]	; (8007324 <vTaskSwitchContext+0xa8>)
 8007294:	2200      	movs	r2, #0
 8007296:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007298:	4b23      	ldr	r3, [pc, #140]	; (8007328 <vTaskSwitchContext+0xac>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e010      	b.n	80072c2 <vTaskSwitchContext+0x46>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d10a      	bne.n	80072bc <vTaskSwitchContext+0x40>
        __asm volatile
 80072a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072aa:	f383 8811 	msr	BASEPRI, r3
 80072ae:	f3bf 8f6f 	isb	sy
 80072b2:	f3bf 8f4f 	dsb	sy
 80072b6:	607b      	str	r3, [r7, #4]
    }
 80072b8:	bf00      	nop
 80072ba:	e7fe      	b.n	80072ba <vTaskSwitchContext+0x3e>
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	3b01      	subs	r3, #1
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	491a      	ldr	r1, [pc, #104]	; (800732c <vTaskSwitchContext+0xb0>)
 80072c4:	68fa      	ldr	r2, [r7, #12]
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	440b      	add	r3, r1
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d0e4      	beq.n	80072a0 <vTaskSwitchContext+0x24>
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4613      	mov	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4413      	add	r3, r2
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4a12      	ldr	r2, [pc, #72]	; (800732c <vTaskSwitchContext+0xb0>)
 80072e2:	4413      	add	r3, r2
 80072e4:	60bb      	str	r3, [r7, #8]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	605a      	str	r2, [r3, #4]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	685a      	ldr	r2, [r3, #4]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	3308      	adds	r3, #8
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d104      	bne.n	8007306 <vTaskSwitchContext+0x8a>
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	685a      	ldr	r2, [r3, #4]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	605a      	str	r2, [r3, #4]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	68db      	ldr	r3, [r3, #12]
 800730c:	4a08      	ldr	r2, [pc, #32]	; (8007330 <vTaskSwitchContext+0xb4>)
 800730e:	6013      	str	r3, [r2, #0]
 8007310:	4a05      	ldr	r2, [pc, #20]	; (8007328 <vTaskSwitchContext+0xac>)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6013      	str	r3, [r2, #0]
}
 8007316:	bf00      	nop
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	bc80      	pop	{r7}
 800731e:	4770      	bx	lr
 8007320:	200001e0 	.word	0x200001e0
 8007324:	200001cc 	.word	0x200001cc
 8007328:	200001c0 	.word	0x200001c0
 800732c:	200000e4 	.word	0x200000e4
 8007330:	200000e0 	.word	0x200000e0

08007334 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10a      	bne.n	800735a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8007344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007348:	f383 8811 	msr	BASEPRI, r3
 800734c:	f3bf 8f6f 	isb	sy
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	60fb      	str	r3, [r7, #12]
    }
 8007356:	bf00      	nop
 8007358:	e7fe      	b.n	8007358 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <vTaskPlaceOnEventList+0x44>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	3318      	adds	r3, #24
 8007360:	4619      	mov	r1, r3
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 feb1 	bl	80080ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007368:	2101      	movs	r1, #1
 800736a:	6838      	ldr	r0, [r7, #0]
 800736c:	f000 fb6e 	bl	8007a4c <prvAddCurrentTaskToDelayedList>
}
 8007370:	bf00      	nop
 8007372:	3710      	adds	r7, #16
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	200000e0 	.word	0x200000e0

0800737c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10a      	bne.n	80073a4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	613b      	str	r3, [r7, #16]
    }
 80073a0:	bf00      	nop
 80073a2:	e7fe      	b.n	80073a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	617b      	str	r3, [r7, #20]
 80073aa:	4b16      	ldr	r3, [pc, #88]	; (8007404 <vTaskPlaceOnEventListRestricted+0x88>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	61da      	str	r2, [r3, #28]
 80073b2:	4b14      	ldr	r3, [pc, #80]	; (8007404 <vTaskPlaceOnEventListRestricted+0x88>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	697a      	ldr	r2, [r7, #20]
 80073b8:	6892      	ldr	r2, [r2, #8]
 80073ba:	621a      	str	r2, [r3, #32]
 80073bc:	4b11      	ldr	r3, [pc, #68]	; (8007404 <vTaskPlaceOnEventListRestricted+0x88>)
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	3218      	adds	r2, #24
 80073c6:	605a      	str	r2, [r3, #4]
 80073c8:	4b0e      	ldr	r3, [pc, #56]	; (8007404 <vTaskPlaceOnEventListRestricted+0x88>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f103 0218 	add.w	r2, r3, #24
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <vTaskPlaceOnEventListRestricted+0x88>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68fa      	ldr	r2, [r7, #12]
 80073da:	629a      	str	r2, [r3, #40]	; 0x28
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	1c5a      	adds	r2, r3, #1
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80073ec:	f04f 33ff 	mov.w	r3, #4294967295
 80073f0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	68b8      	ldr	r0, [r7, #8]
 80073f6:	f000 fb29 	bl	8007a4c <prvAddCurrentTaskToDelayedList>
    }
 80073fa:	bf00      	nop
 80073fc:	3718      	adds	r7, #24
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
 8007402:	bf00      	nop
 8007404:	200000e0 	.word	0x200000e0

08007408 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b08a      	sub	sp, #40	; 0x28
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8007418:	6a3b      	ldr	r3, [r7, #32]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d10a      	bne.n	8007434 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	60fb      	str	r3, [r7, #12]
    }
 8007430:	bf00      	nop
 8007432:	e7fe      	b.n	8007432 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	6a3b      	ldr	r3, [r7, #32]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	6a3a      	ldr	r2, [r7, #32]
 8007440:	6a12      	ldr	r2, [r2, #32]
 8007442:	609a      	str	r2, [r3, #8]
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	6a3a      	ldr	r2, [r7, #32]
 800744a:	69d2      	ldr	r2, [r2, #28]
 800744c:	605a      	str	r2, [r3, #4]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	6a3b      	ldr	r3, [r7, #32]
 8007454:	3318      	adds	r3, #24
 8007456:	429a      	cmp	r2, r3
 8007458:	d103      	bne.n	8007462 <xTaskRemoveFromEventList+0x5a>
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	6a1a      	ldr	r2, [r3, #32]
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	605a      	str	r2, [r3, #4]
 8007462:	6a3b      	ldr	r3, [r7, #32]
 8007464:	2200      	movs	r2, #0
 8007466:	629a      	str	r2, [r3, #40]	; 0x28
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	1e5a      	subs	r2, r3, #1
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007472:	4b4b      	ldr	r3, [pc, #300]	; (80075a0 <xTaskRemoveFromEventList+0x198>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d161      	bne.n	800753e <xTaskRemoveFromEventList+0x136>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	695b      	ldr	r3, [r3, #20]
 800747e:	617b      	str	r3, [r7, #20]
 8007480:	6a3b      	ldr	r3, [r7, #32]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	6a3a      	ldr	r2, [r7, #32]
 8007486:	68d2      	ldr	r2, [r2, #12]
 8007488:	609a      	str	r2, [r3, #8]
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	6a3a      	ldr	r2, [r7, #32]
 8007490:	6892      	ldr	r2, [r2, #8]
 8007492:	605a      	str	r2, [r3, #4]
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	6a3b      	ldr	r3, [r7, #32]
 800749a:	3304      	adds	r3, #4
 800749c:	429a      	cmp	r2, r3
 800749e:	d103      	bne.n	80074a8 <xTaskRemoveFromEventList+0xa0>
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	68da      	ldr	r2, [r3, #12]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	605a      	str	r2, [r3, #4]
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	2200      	movs	r2, #0
 80074ac:	615a      	str	r2, [r3, #20]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	1e5a      	subs	r2, r3, #1
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074bc:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <xTaskRemoveFromEventList+0x19c>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d903      	bls.n	80074cc <xTaskRemoveFromEventList+0xc4>
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c8:	4a36      	ldr	r2, [pc, #216]	; (80075a4 <xTaskRemoveFromEventList+0x19c>)
 80074ca:	6013      	str	r3, [r2, #0]
 80074cc:	6a3b      	ldr	r3, [r7, #32]
 80074ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d0:	4935      	ldr	r1, [pc, #212]	; (80075a8 <xTaskRemoveFromEventList+0x1a0>)
 80074d2:	4613      	mov	r3, r2
 80074d4:	009b      	lsls	r3, r3, #2
 80074d6:	4413      	add	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	440b      	add	r3, r1
 80074dc:	3304      	adds	r3, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	613b      	str	r3, [r7, #16]
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	609a      	str	r2, [r3, #8]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	60da      	str	r2, [r3, #12]
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	6a3a      	ldr	r2, [r7, #32]
 80074f6:	3204      	adds	r2, #4
 80074f8:	605a      	str	r2, [r3, #4]
 80074fa:	6a3b      	ldr	r3, [r7, #32]
 80074fc:	1d1a      	adds	r2, r3, #4
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	609a      	str	r2, [r3, #8]
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007506:	4613      	mov	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4a26      	ldr	r2, [pc, #152]	; (80075a8 <xTaskRemoveFromEventList+0x1a0>)
 8007510:	441a      	add	r2, r3
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	615a      	str	r2, [r3, #20]
 8007516:	6a3b      	ldr	r3, [r7, #32]
 8007518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800751a:	4923      	ldr	r1, [pc, #140]	; (80075a8 <xTaskRemoveFromEventList+0x1a0>)
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	440b      	add	r3, r1
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	1c59      	adds	r1, r3, #1
 800752a:	481f      	ldr	r0, [pc, #124]	; (80075a8 <xTaskRemoveFromEventList+0x1a0>)
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	009b      	lsls	r3, r3, #2
 8007534:	4403      	add	r3, r0
 8007536:	6019      	str	r1, [r3, #0]
             * normally left unchanged, because it is automatically reset to a new
             * value when the tick count equals xNextTaskUnblockTime.  However if
             * tickless idling is used it might be more important to enter sleep mode
             * at the earliest possible time - so reset xNextTaskUnblockTime here to
             * ensure it is updated at the earliest possible time. */
            prvResetNextTaskUnblockTime();
 8007538:	f000 f9ba 	bl	80078b0 <prvResetNextTaskUnblockTime>
 800753c:	e01b      	b.n	8007576 <xTaskRemoveFromEventList+0x16e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800753e:	4b1b      	ldr	r3, [pc, #108]	; (80075ac <xTaskRemoveFromEventList+0x1a4>)
 8007540:	685b      	ldr	r3, [r3, #4]
 8007542:	61bb      	str	r3, [r7, #24]
 8007544:	6a3b      	ldr	r3, [r7, #32]
 8007546:	69ba      	ldr	r2, [r7, #24]
 8007548:	61da      	str	r2, [r3, #28]
 800754a:	69bb      	ldr	r3, [r7, #24]
 800754c:	689a      	ldr	r2, [r3, #8]
 800754e:	6a3b      	ldr	r3, [r7, #32]
 8007550:	621a      	str	r2, [r3, #32]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	6a3a      	ldr	r2, [r7, #32]
 8007558:	3218      	adds	r2, #24
 800755a:	605a      	str	r2, [r3, #4]
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	f103 0218 	add.w	r2, r3, #24
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	609a      	str	r2, [r3, #8]
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	4a10      	ldr	r2, [pc, #64]	; (80075ac <xTaskRemoveFromEventList+0x1a4>)
 800756a:	629a      	str	r2, [r3, #40]	; 0x28
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <xTaskRemoveFromEventList+0x1a4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	4a0e      	ldr	r2, [pc, #56]	; (80075ac <xTaskRemoveFromEventList+0x1a4>)
 8007574:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007576:	6a3b      	ldr	r3, [r7, #32]
 8007578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800757a:	4b0d      	ldr	r3, [pc, #52]	; (80075b0 <xTaskRemoveFromEventList+0x1a8>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	429a      	cmp	r2, r3
 8007582:	d905      	bls.n	8007590 <xTaskRemoveFromEventList+0x188>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007584:	2301      	movs	r3, #1
 8007586:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007588:	4b0a      	ldr	r3, [pc, #40]	; (80075b4 <xTaskRemoveFromEventList+0x1ac>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	e001      	b.n	8007594 <xTaskRemoveFromEventList+0x18c>
    }
    else
    {
        xReturn = pdFALSE;
 8007590:	2300      	movs	r3, #0
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007596:	4618      	mov	r0, r3
 8007598:	3728      	adds	r7, #40	; 0x28
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	bf00      	nop
 80075a0:	200001e0 	.word	0x200001e0
 80075a4:	200001c0 	.word	0x200001c0
 80075a8:	200000e4 	.word	0x200000e4
 80075ac:	20000178 	.word	0x20000178
 80075b0:	200000e0 	.word	0x200000e0
 80075b4:	200001cc 	.word	0x200001cc

080075b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075b8:	b480      	push	{r7}
 80075ba:	b083      	sub	sp, #12
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075c0:	4b06      	ldr	r3, [pc, #24]	; (80075dc <vTaskInternalSetTimeOutState+0x24>)
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80075c8:	4b05      	ldr	r3, [pc, #20]	; (80075e0 <vTaskInternalSetTimeOutState+0x28>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	605a      	str	r2, [r3, #4]
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bc80      	pop	{r7}
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	200001d0 	.word	0x200001d0
 80075e0:	200001bc 	.word	0x200001bc

080075e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b088      	sub	sp, #32
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10a      	bne.n	800760a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80075f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f8:	f383 8811 	msr	BASEPRI, r3
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f3bf 8f4f 	dsb	sy
 8007604:	613b      	str	r3, [r7, #16]
    }
 8007606:	bf00      	nop
 8007608:	e7fe      	b.n	8007608 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10a      	bne.n	8007626 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8007610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007614:	f383 8811 	msr	BASEPRI, r3
 8007618:	f3bf 8f6f 	isb	sy
 800761c:	f3bf 8f4f 	dsb	sy
 8007620:	60fb      	str	r3, [r7, #12]
    }
 8007622:	bf00      	nop
 8007624:	e7fe      	b.n	8007624 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8007626:	f000 fea3 	bl	8008370 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800762a:	4b1f      	ldr	r3, [pc, #124]	; (80076a8 <xTaskCheckForTimeOut+0xc4>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	69ba      	ldr	r2, [r7, #24]
 8007636:	1ad3      	subs	r3, r2, r3
 8007638:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007642:	d102      	bne.n	800764a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007644:	2300      	movs	r3, #0
 8007646:	61fb      	str	r3, [r7, #28]
 8007648:	e026      	b.n	8007698 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b17      	ldr	r3, [pc, #92]	; (80076ac <xTaskCheckForTimeOut+0xc8>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d00a      	beq.n	800766c <xTaskCheckForTimeOut+0x88>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	d305      	bcc.n	800766c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	e015      	b.n	8007698 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	429a      	cmp	r2, r3
 8007674:	d20b      	bcs.n	800768e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	1ad2      	subs	r2, r2, r3
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7ff ff98 	bl	80075b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007688:	2300      	movs	r3, #0
 800768a:	61fb      	str	r3, [r7, #28]
 800768c:	e004      	b.n	8007698 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007694:	2301      	movs	r3, #1
 8007696:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007698:	f000 fe9a 	bl	80083d0 <vPortExitCritical>

    return xReturn;
 800769c:	69fb      	ldr	r3, [r7, #28]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3720      	adds	r7, #32
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	200001bc 	.word	0x200001bc
 80076ac:	200001d0 	.word	0x200001d0

080076b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <vTaskMissedYield+0x14>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	601a      	str	r2, [r3, #0]
}
 80076ba:	bf00      	nop
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc80      	pop	{r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	200001cc 	.word	0x200001cc

080076c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b084      	sub	sp, #16
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80076d0:	f000 f8b0 	bl	8007834 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076d4:	4b18      	ldr	r3, [pc, #96]	; (8007738 <prvIdleTask+0x70>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d907      	bls.n	80076ec <prvIdleTask+0x24>
            {
                taskYIELD();
 80076dc:	4b17      	ldr	r3, [pc, #92]	; (800773c <prvIdleTask+0x74>)
 80076de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	f3bf 8f4f 	dsb	sy
 80076e8:	f3bf 8f6f 	isb	sy
            /* It is not desirable to suspend then resume the scheduler on
             * each iteration of the idle task.  Therefore, a preliminary
             * test of the expected idle time is performed without the
             * scheduler suspended.  The result here is not necessarily
             * valid. */
            xExpectedIdleTime = prvGetExpectedIdleTime();
 80076ec:	f7ff fb0a 	bl	8006d04 <prvGetExpectedIdleTime>
 80076f0:	60f8      	str	r0, [r7, #12]

            if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d9eb      	bls.n	80076d0 <prvIdleTask+0x8>
            {
                vTaskSuspendAll();
 80076f8:	f7ff faf6 	bl	8006ce8 <vTaskSuspendAll>
                {
                    /* Now the scheduler is suspended, the expected idle
                     * time can be sampled again, and this time its value can
                     * be used. */
                    configASSERT( xNextTaskUnblockTime >= xTickCount );
 80076fc:	4b10      	ldr	r3, [pc, #64]	; (8007740 <prvIdleTask+0x78>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	4b10      	ldr	r3, [pc, #64]	; (8007744 <prvIdleTask+0x7c>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d20a      	bcs.n	800771e <prvIdleTask+0x56>
        __asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	f383 8811 	msr	BASEPRI, r3
 8007710:	f3bf 8f6f 	isb	sy
 8007714:	f3bf 8f4f 	dsb	sy
 8007718:	60bb      	str	r3, [r7, #8]
    }
 800771a:	bf00      	nop
 800771c:	e7fe      	b.n	800771c <prvIdleTask+0x54>
                    xExpectedIdleTime = prvGetExpectedIdleTime();
 800771e:	f7ff faf1 	bl	8006d04 <prvGetExpectedIdleTime>
 8007722:	60f8      	str	r0, [r7, #12]
                    /* Define the following macro to set xExpectedIdleTime to 0
                     * if the application does not want
                     * portSUPPRESS_TICKS_AND_SLEEP() to be called. */
                    configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

                    if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d902      	bls.n	8007730 <prvIdleTask+0x68>
                    {
                        traceLOW_POWER_IDLE_BEGIN();
                        portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 febe 	bl	80084ac <vPortSuppressTicksAndSleep>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                ( void ) xTaskResumeAll();
 8007730:	f7ff fb1e 	bl	8006d70 <xTaskResumeAll>
        prvCheckTasksWaitingTermination();
 8007734:	e7cc      	b.n	80076d0 <prvIdleTask+0x8>
 8007736:	bf00      	nop
 8007738:	200000e4 	.word	0x200000e4
 800773c:	e000ed04 	.word	0xe000ed04
 8007740:	200001d8 	.word	0x200001d8
 8007744:	200001bc 	.word	0x200001bc

08007748 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

    eSleepModeStatus eTaskConfirmSleepModeStatus( void )
    {
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
        #if ( INCLUDE_vTaskSuspend == 1 )
            /* The idle task exists in addition to the application tasks. */
            const UBaseType_t uxNonApplicationTasks = 1;
 800774e:	2301      	movs	r3, #1
 8007750:	603b      	str	r3, [r7, #0]
        #endif /* INCLUDE_vTaskSuspend */

        eSleepModeStatus eReturn = eStandardSleep;
 8007752:	2301      	movs	r3, #1
 8007754:	71fb      	strb	r3, [r7, #7]

        /* This function must be called from a critical section. */

        if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8007756:	4b12      	ldr	r3, [pc, #72]	; (80077a0 <eTaskConfirmSleepModeStatus+0x58>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d002      	beq.n	8007764 <eTaskConfirmSleepModeStatus+0x1c>
        {
            /* A task was made ready while the scheduler was suspended. */
            eReturn = eAbortSleep;
 800775e:	2300      	movs	r3, #0
 8007760:	71fb      	strb	r3, [r7, #7]
 8007762:	e017      	b.n	8007794 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xYieldPending != pdFALSE )
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <eTaskConfirmSleepModeStatus+0x5c>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <eTaskConfirmSleepModeStatus+0x2a>
        {
            /* A yield was pended while the scheduler was suspended. */
            eReturn = eAbortSleep;
 800776c:	2300      	movs	r3, #0
 800776e:	71fb      	strb	r3, [r7, #7]
 8007770:	e010      	b.n	8007794 <eTaskConfirmSleepModeStatus+0x4c>
        }
        else if( xPendedTicks != 0 )
 8007772:	4b0d      	ldr	r3, [pc, #52]	; (80077a8 <eTaskConfirmSleepModeStatus+0x60>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d002      	beq.n	8007780 <eTaskConfirmSleepModeStatus+0x38>
        {
            /* A tick interrupt has already occurred but was held pending
             * because the scheduler is suspended. */
            eReturn = eAbortSleep;
 800777a:	2300      	movs	r3, #0
 800777c:	71fb      	strb	r3, [r7, #7]
 800777e:	e009      	b.n	8007794 <eTaskConfirmSleepModeStatus+0x4c>
        }

        #if ( INCLUDE_vTaskSuspend == 1 )
            else if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8007780:	4b0a      	ldr	r3, [pc, #40]	; (80077ac <eTaskConfirmSleepModeStatus+0x64>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4b0a      	ldr	r3, [pc, #40]	; (80077b0 <eTaskConfirmSleepModeStatus+0x68>)
 8007786:	6819      	ldr	r1, [r3, #0]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	1acb      	subs	r3, r1, r3
 800778c:	429a      	cmp	r2, r3
 800778e:	d101      	bne.n	8007794 <eTaskConfirmSleepModeStatus+0x4c>
            {
                /* If all the tasks are in the suspended list (which might mean they
                 * have an infinite block time rather than actually being suspended)
                 * then it is safe to turn all clocks off and just wait for external
                 * interrupts. */
                eReturn = eNoTasksWaitingTimeout;
 8007790:	2302      	movs	r3, #2
 8007792:	71fb      	strb	r3, [r7, #7]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return eReturn;
 8007794:	79fb      	ldrb	r3, [r7, #7]
    }
 8007796:	4618      	mov	r0, r3
 8007798:	370c      	adds	r7, #12
 800779a:	46bd      	mov	sp, r7
 800779c:	bc80      	pop	{r7}
 800779e:	4770      	bx	lr
 80077a0:	20000178 	.word	0x20000178
 80077a4:	200001cc 	.word	0x200001cc
 80077a8:	200001c8 	.word	0x200001c8
 80077ac:	200001a4 	.word	0x200001a4
 80077b0:	200001b8 	.word	0x200001b8

080077b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077ba:	2300      	movs	r3, #0
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	e00c      	b.n	80077da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4a12      	ldr	r2, [pc, #72]	; (8007814 <prvInitialiseTaskLists+0x60>)
 80077cc:	4413      	add	r3, r2
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fc50 	bl	8008074 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3301      	adds	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d9ef      	bls.n	80077c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80077e0:	480d      	ldr	r0, [pc, #52]	; (8007818 <prvInitialiseTaskLists+0x64>)
 80077e2:	f000 fc47 	bl	8008074 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80077e6:	480d      	ldr	r0, [pc, #52]	; (800781c <prvInitialiseTaskLists+0x68>)
 80077e8:	f000 fc44 	bl	8008074 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80077ec:	480c      	ldr	r0, [pc, #48]	; (8007820 <prvInitialiseTaskLists+0x6c>)
 80077ee:	f000 fc41 	bl	8008074 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80077f2:	480c      	ldr	r0, [pc, #48]	; (8007824 <prvInitialiseTaskLists+0x70>)
 80077f4:	f000 fc3e 	bl	8008074 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80077f8:	480b      	ldr	r0, [pc, #44]	; (8007828 <prvInitialiseTaskLists+0x74>)
 80077fa:	f000 fc3b 	bl	8008074 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80077fe:	4b0b      	ldr	r3, [pc, #44]	; (800782c <prvInitialiseTaskLists+0x78>)
 8007800:	4a05      	ldr	r2, [pc, #20]	; (8007818 <prvInitialiseTaskLists+0x64>)
 8007802:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007804:	4b0a      	ldr	r3, [pc, #40]	; (8007830 <prvInitialiseTaskLists+0x7c>)
 8007806:	4a05      	ldr	r2, [pc, #20]	; (800781c <prvInitialiseTaskLists+0x68>)
 8007808:	601a      	str	r2, [r3, #0]
}
 800780a:	bf00      	nop
 800780c:	3708      	adds	r7, #8
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
 8007812:	bf00      	nop
 8007814:	200000e4 	.word	0x200000e4
 8007818:	20000148 	.word	0x20000148
 800781c:	2000015c 	.word	0x2000015c
 8007820:	20000178 	.word	0x20000178
 8007824:	2000018c 	.word	0x2000018c
 8007828:	200001a4 	.word	0x200001a4
 800782c:	20000170 	.word	0x20000170
 8007830:	20000174 	.word	0x20000174

08007834 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b082      	sub	sp, #8
 8007838:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800783a:	e019      	b.n	8007870 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800783c:	f000 fd98 	bl	8008370 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007840:	4b10      	ldr	r3, [pc, #64]	; (8007884 <prvCheckTasksWaitingTermination+0x50>)
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	3304      	adds	r3, #4
 800784c:	4618      	mov	r0, r3
 800784e:	f000 fc74 	bl	800813a <uxListRemove>
                --uxCurrentNumberOfTasks;
 8007852:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <prvCheckTasksWaitingTermination+0x54>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3b01      	subs	r3, #1
 8007858:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <prvCheckTasksWaitingTermination+0x54>)
 800785a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800785c:	4b0b      	ldr	r3, [pc, #44]	; (800788c <prvCheckTasksWaitingTermination+0x58>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	3b01      	subs	r3, #1
 8007862:	4a0a      	ldr	r2, [pc, #40]	; (800788c <prvCheckTasksWaitingTermination+0x58>)
 8007864:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8007866:	f000 fdb3 	bl	80083d0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 f810 	bl	8007890 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <prvCheckTasksWaitingTermination+0x58>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d1e1      	bne.n	800783c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	3708      	adds	r7, #8
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	2000018c 	.word	0x2000018c
 8007888:	200001b8 	.word	0x200001b8
 800788c:	200001a0 	.word	0x200001a0

08007890 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007890:	b580      	push	{r7, lr}
 8007892:	b082      	sub	sp, #8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800789c:	4618      	mov	r0, r3
 800789e:	f000 fbd7 	bl	8008050 <vPortFree>
            vPortFree( pxTCB );
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fbd4 	bl	8008050 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80078a8:	bf00      	nop
 80078aa:	3708      	adds	r7, #8
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}

080078b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078b4:	4b09      	ldr	r3, [pc, #36]	; (80078dc <prvResetNextTaskUnblockTime+0x2c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d104      	bne.n	80078c8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80078be:	4b08      	ldr	r3, [pc, #32]	; (80078e0 <prvResetNextTaskUnblockTime+0x30>)
 80078c0:	f04f 32ff 	mov.w	r2, #4294967295
 80078c4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80078c6:	e005      	b.n	80078d4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80078c8:	4b04      	ldr	r3, [pc, #16]	; (80078dc <prvResetNextTaskUnblockTime+0x2c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a03      	ldr	r2, [pc, #12]	; (80078e0 <prvResetNextTaskUnblockTime+0x30>)
 80078d2:	6013      	str	r3, [r2, #0]
}
 80078d4:	bf00      	nop
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bc80      	pop	{r7}
 80078da:	4770      	bx	lr
 80078dc:	20000170 	.word	0x20000170
 80078e0:	200001d8 	.word	0x200001d8

080078e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <xTaskGetSchedulerState+0x34>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80078f2:	2301      	movs	r3, #1
 80078f4:	607b      	str	r3, [r7, #4]
 80078f6:	e008      	b.n	800790a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f8:	4b08      	ldr	r3, [pc, #32]	; (800791c <xTaskGetSchedulerState+0x38>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d102      	bne.n	8007906 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007900:	2302      	movs	r3, #2
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	e001      	b.n	800790a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007906:	2300      	movs	r3, #0
 8007908:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800790a:	687b      	ldr	r3, [r7, #4]
    }
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	bc80      	pop	{r7}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	200001c4 	.word	0x200001c4
 800791c:	200001e0 	.word	0x200001e0

08007920 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007920:	b580      	push	{r7, lr}
 8007922:	b088      	sub	sp, #32
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800792c:	2300      	movs	r3, #0
 800792e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d07e      	beq.n	8007a34 <xTaskPriorityDisinherit+0x114>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007936:	4b42      	ldr	r3, [pc, #264]	; (8007a40 <xTaskPriorityDisinherit+0x120>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	429a      	cmp	r2, r3
 800793e:	d00a      	beq.n	8007956 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	613b      	str	r3, [r7, #16]
    }
 8007952:	bf00      	nop
 8007954:	e7fe      	b.n	8007954 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10a      	bne.n	8007974 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	60fb      	str	r3, [r7, #12]
    }
 8007970:	bf00      	nop
 8007972:	e7fe      	b.n	8007972 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007978:	1e5a      	subs	r2, r3, #1
 800797a:	69bb      	ldr	r3, [r7, #24]
 800797c:	655a      	str	r2, [r3, #84]	; 0x54

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007986:	429a      	cmp	r2, r3
 8007988:	d054      	beq.n	8007a34 <xTaskPriorityDisinherit+0x114>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800798e:	2b00      	cmp	r3, #0
 8007990:	d150      	bne.n	8007a34 <xTaskPriorityDisinherit+0x114>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007992:	69bb      	ldr	r3, [r7, #24]
 8007994:	3304      	adds	r3, #4
 8007996:	4618      	mov	r0, r3
 8007998:	f000 fbcf 	bl	800813a <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079a8:	f1c3 0205 	rsb	r2, r3, #5
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b4:	4b23      	ldr	r3, [pc, #140]	; (8007a44 <xTaskPriorityDisinherit+0x124>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d903      	bls.n	80079c4 <xTaskPriorityDisinherit+0xa4>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	4a20      	ldr	r2, [pc, #128]	; (8007a44 <xTaskPriorityDisinherit+0x124>)
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079c8:	491f      	ldr	r1, [pc, #124]	; (8007a48 <xTaskPriorityDisinherit+0x128>)
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	440b      	add	r3, r1
 80079d4:	3304      	adds	r3, #4
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	617b      	str	r3, [r7, #20]
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	697a      	ldr	r2, [r7, #20]
 80079de:	609a      	str	r2, [r3, #8]
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	689a      	ldr	r2, [r3, #8]
 80079e4:	69bb      	ldr	r3, [r7, #24]
 80079e6:	60da      	str	r2, [r3, #12]
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	3204      	adds	r2, #4
 80079f0:	605a      	str	r2, [r3, #4]
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	1d1a      	adds	r2, r3, #4
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	609a      	str	r2, [r3, #8]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079fe:	4613      	mov	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4a10      	ldr	r2, [pc, #64]	; (8007a48 <xTaskPriorityDisinherit+0x128>)
 8007a08:	441a      	add	r2, r3
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	615a      	str	r2, [r3, #20]
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a12:	490d      	ldr	r1, [pc, #52]	; (8007a48 <xTaskPriorityDisinherit+0x128>)
 8007a14:	4613      	mov	r3, r2
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	440b      	add	r3, r1
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	1c59      	adds	r1, r3, #1
 8007a22:	4809      	ldr	r0, [pc, #36]	; (8007a48 <xTaskPriorityDisinherit+0x128>)
 8007a24:	4613      	mov	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4413      	add	r3, r2
 8007a2a:	009b      	lsls	r3, r3, #2
 8007a2c:	4403      	add	r3, r0
 8007a2e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8007a34:	69fb      	ldr	r3, [r7, #28]
    }
 8007a36:	4618      	mov	r0, r3
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	200000e0 	.word	0x200000e0
 8007a44:	200001c0 	.word	0x200001c0
 8007a48:	200000e4 	.word	0x200000e4

08007a4c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b086      	sub	sp, #24
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007a56:	4b2e      	ldr	r3, [pc, #184]	; (8007b10 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a5c:	4b2d      	ldr	r3, [pc, #180]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3304      	adds	r3, #4
 8007a62:	4618      	mov	r0, r3
 8007a64:	f000 fb69 	bl	800813a <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d124      	bne.n	8007aba <prvAddCurrentTaskToDelayedList+0x6e>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d021      	beq.n	8007aba <prvAddCurrentTaskToDelayedList+0x6e>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a76:	4b28      	ldr	r3, [pc, #160]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	4b25      	ldr	r3, [pc, #148]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	609a      	str	r2, [r3, #8]
 8007a84:	4b23      	ldr	r3, [pc, #140]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	693a      	ldr	r2, [r7, #16]
 8007a8a:	6892      	ldr	r2, [r2, #8]
 8007a8c:	60da      	str	r2, [r3, #12]
 8007a8e:	4b21      	ldr	r3, [pc, #132]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	3204      	adds	r2, #4
 8007a98:	605a      	str	r2, [r3, #4]
 8007a9a:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	1d1a      	adds	r2, r3, #4
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	609a      	str	r2, [r3, #8]
 8007aa4:	4b1b      	ldr	r3, [pc, #108]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1b      	ldr	r2, [pc, #108]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007aaa:	615a      	str	r2, [r3, #20]
 8007aac:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	4a19      	ldr	r2, [pc, #100]	; (8007b18 <prvAddCurrentTaskToDelayedList+0xcc>)
 8007ab4:	6013      	str	r3, [r2, #0]
 8007ab6:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007ab8:	e026      	b.n	8007b08 <prvAddCurrentTaskToDelayedList+0xbc>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4413      	add	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007ac2:	4b14      	ldr	r3, [pc, #80]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68fa      	ldr	r2, [r7, #12]
 8007ac8:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d209      	bcs.n	8007ae6 <prvAddCurrentTaskToDelayedList+0x9a>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ad2:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <prvAddCurrentTaskToDelayedList+0xd0>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	3304      	adds	r3, #4
 8007adc:	4619      	mov	r1, r3
 8007ade:	4610      	mov	r0, r2
 8007ae0:	f000 faf3 	bl	80080ca <vListInsert>
}
 8007ae4:	e010      	b.n	8007b08 <prvAddCurrentTaskToDelayedList+0xbc>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ae6:	4b0e      	ldr	r3, [pc, #56]	; (8007b20 <prvAddCurrentTaskToDelayedList+0xd4>)
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	3304      	adds	r3, #4
 8007af0:	4619      	mov	r1, r3
 8007af2:	4610      	mov	r0, r2
 8007af4:	f000 fae9 	bl	80080ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68fa      	ldr	r2, [r7, #12]
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d202      	bcs.n	8007b08 <prvAddCurrentTaskToDelayedList+0xbc>
                    xNextTaskUnblockTime = xTimeToWake;
 8007b02:	4a08      	ldr	r2, [pc, #32]	; (8007b24 <prvAddCurrentTaskToDelayedList+0xd8>)
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6013      	str	r3, [r2, #0]
}
 8007b08:	bf00      	nop
 8007b0a:	3718      	adds	r7, #24
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	200001bc 	.word	0x200001bc
 8007b14:	200000e0 	.word	0x200000e0
 8007b18:	200001a4 	.word	0x200001a4
 8007b1c:	20000174 	.word	0x20000174
 8007b20:	20000170 	.word	0x20000170
 8007b24:	200001d8 	.word	0x200001d8

08007b28 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8007b32:	f000 fa45 	bl	8007fc0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007b36:	4b11      	ldr	r3, [pc, #68]	; (8007b7c <xTimerCreateTimerTask+0x54>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <xTimerCreateTimerTask+0x2c>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8007b3e:	4b10      	ldr	r3, [pc, #64]	; (8007b80 <xTimerCreateTimerTask+0x58>)
 8007b40:	9301      	str	r3, [sp, #4]
 8007b42:	2303      	movs	r3, #3
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	2300      	movs	r3, #0
 8007b48:	2280      	movs	r2, #128	; 0x80
 8007b4a:	490e      	ldr	r1, [pc, #56]	; (8007b84 <xTimerCreateTimerTask+0x5c>)
 8007b4c:	480e      	ldr	r0, [pc, #56]	; (8007b88 <xTimerCreateTimerTask+0x60>)
 8007b4e:	f7fe fed9 	bl	8006904 <xTaskCreate>
 8007b52:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10a      	bne.n	8007b70 <xTimerCreateTimerTask+0x48>
        __asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
    }
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <xTimerCreateTimerTask+0x46>
        return xReturn;
 8007b70:	687b      	ldr	r3, [r7, #4]
    }
 8007b72:	4618      	mov	r0, r3
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000214 	.word	0x20000214
 8007b80:	20000218 	.word	0x20000218
 8007b84:	0800a1bc 	.word	0x0800a1bc
 8007b88:	08007c31 	.word	0x08007c31

08007b8c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007b98:	e008      	b.n	8007bac <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	68ba      	ldr	r2, [r7, #8]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	699a      	ldr	r2, [r3, #24]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	18d1      	adds	r1, r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 f8db 	bl	8007d74 <prvInsertTimerInActiveList>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1ea      	bne.n	8007b9a <prvReloadTimer+0xe>
        }
    }
 8007bc4:	bf00      	nop
 8007bc6:	bf00      	nop
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b084      	sub	sp, #16
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
 8007bd8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bda:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <prvProcessExpiredTimer+0x5c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	68db      	ldr	r3, [r3, #12]
 8007be2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f000 faa6 	bl	800813a <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d005      	beq.n	8007c08 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	6879      	ldr	r1, [r7, #4]
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f7ff ffc3 	bl	8007b8c <prvReloadTimer>
 8007c06:	e008      	b.n	8007c1a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	b2da      	uxtb	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	68f8      	ldr	r0, [r7, #12]
 8007c20:	4798      	blx	r3
    }
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	2000020c 	.word	0x2000020c

08007c30 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c38:	f107 0308 	add.w	r3, r7, #8
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f857 	bl	8007cf0 <prvGetNextExpireTime>
 8007c42:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 f803 	bl	8007c54 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007c4e:	f000 f8d3 	bl	8007df8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c52:	e7f1      	b.n	8007c38 <prvTimerTask+0x8>

08007c54 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8007c5e:	f7ff f843 	bl	8006ce8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c62:	f107 0308 	add.w	r3, r7, #8
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f864 	bl	8007d34 <prvSampleTimeNow>
 8007c6c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d130      	bne.n	8007cd6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d10a      	bne.n	8007c90 <prvProcessTimerOrBlockTask+0x3c>
 8007c7a:	687a      	ldr	r2, [r7, #4]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d806      	bhi.n	8007c90 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8007c82:	f7ff f875 	bl	8006d70 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c86:	68f9      	ldr	r1, [r7, #12]
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7ff ffa1 	bl	8007bd0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007c8e:	e024      	b.n	8007cda <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d008      	beq.n	8007ca8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c96:	4b13      	ldr	r3, [pc, #76]	; (8007ce4 <prvProcessTimerOrBlockTask+0x90>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <prvProcessTimerOrBlockTask+0x50>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e000      	b.n	8007ca6 <prvProcessTimerOrBlockTask+0x52>
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ca8:	4b0f      	ldr	r3, [pc, #60]	; (8007ce8 <prvProcessTimerOrBlockTask+0x94>)
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	f7fe fdf1 	bl	800689c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007cba:	f7ff f859 	bl	8006d70 <xTaskResumeAll>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d10a      	bne.n	8007cda <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007cc4:	4b09      	ldr	r3, [pc, #36]	; (8007cec <prvProcessTimerOrBlockTask+0x98>)
 8007cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cca:	601a      	str	r2, [r3, #0]
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	f3bf 8f6f 	isb	sy
    }
 8007cd4:	e001      	b.n	8007cda <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007cd6:	f7ff f84b 	bl	8006d70 <xTaskResumeAll>
    }
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20000210 	.word	0x20000210
 8007ce8:	20000214 	.word	0x20000214
 8007cec:	e000ed04 	.word	0xe000ed04

08007cf0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cf8:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <prvGetNextExpireTime+0x40>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d101      	bne.n	8007d06 <prvGetNextExpireTime+0x16>
 8007d02:	2201      	movs	r2, #1
 8007d04:	e000      	b.n	8007d08 <prvGetNextExpireTime+0x18>
 8007d06:	2200      	movs	r2, #0
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d105      	bne.n	8007d20 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d14:	4b06      	ldr	r3, [pc, #24]	; (8007d30 <prvGetNextExpireTime+0x40>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e001      	b.n	8007d24 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007d20:	2300      	movs	r3, #0
 8007d22:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007d24:	68fb      	ldr	r3, [r7, #12]
    }
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bc80      	pop	{r7}
 8007d2e:	4770      	bx	lr
 8007d30:	2000020c 	.word	0x2000020c

08007d34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8007d3c:	f7ff f914 	bl	8006f68 <xTaskGetTickCount>
 8007d40:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <prvSampleTimeNow+0x3c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d205      	bcs.n	8007d58 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007d4c:	f000 f912 	bl	8007f74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	601a      	str	r2, [r3, #0]
 8007d56:	e002      	b.n	8007d5e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007d5e:	4a04      	ldr	r2, [pc, #16]	; (8007d70 <prvSampleTimeNow+0x3c>)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007d64:	68fb      	ldr	r3, [r7, #12]
    }
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	2000021c 	.word	0x2000021c

08007d74 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007d82:	2300      	movs	r3, #0
 8007d84:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007d92:	68ba      	ldr	r2, [r7, #8]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d812      	bhi.n	8007dc0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	1ad2      	subs	r2, r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	699b      	ldr	r3, [r3, #24]
 8007da4:	429a      	cmp	r2, r3
 8007da6:	d302      	bcc.n	8007dae <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e01b      	b.n	8007de6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <prvInsertTimerInActiveList+0x7c>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f000 f986 	bl	80080ca <vListInsert>
 8007dbe:	e012      	b.n	8007de6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d206      	bcs.n	8007dd6 <prvInsertTimerInActiveList+0x62>
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d302      	bcc.n	8007dd6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	e007      	b.n	8007de6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dd6:	4b07      	ldr	r3, [pc, #28]	; (8007df4 <prvInsertTimerInActiveList+0x80>)
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	3304      	adds	r3, #4
 8007dde:	4619      	mov	r1, r3
 8007de0:	4610      	mov	r0, r2
 8007de2:	f000 f972 	bl	80080ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007de6:	697b      	ldr	r3, [r7, #20]
    }
 8007de8:	4618      	mov	r0, r3
 8007dea:	3718      	adds	r7, #24
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000210 	.word	0x20000210
 8007df4:	2000020c 	.word	0x2000020c

08007df8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b088      	sub	sp, #32
 8007dfc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfe:	e0a6      	b.n	8007f4e <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f2c0 80a2 	blt.w	8007f4c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	695b      	ldr	r3, [r3, #20]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d004      	beq.n	8007e1e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f98e 	bl	800813a <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e1e:	1d3b      	adds	r3, r7, #4
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff ff87 	bl	8007d34 <prvSampleTimeNow>
 8007e26:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	2b08      	cmp	r3, #8
 8007e2e:	f200 808e 	bhi.w	8007f4e <prvProcessReceivedCommands+0x156>
 8007e32:	a201      	add	r2, pc, #4	; (adr r2, 8007e38 <prvProcessReceivedCommands+0x40>)
 8007e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e38:	08007e5d 	.word	0x08007e5d
 8007e3c:	08007e5d 	.word	0x08007e5d
 8007e40:	08007ec5 	.word	0x08007ec5
 8007e44:	08007ed9 	.word	0x08007ed9
 8007e48:	08007f23 	.word	0x08007f23
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e5d 	.word	0x08007e5d
 8007e54:	08007ec5 	.word	0x08007ec5
 8007e58:	08007ed9 	.word	0x08007ed9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	b2da      	uxtb	r2, r3
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e6e:	68fa      	ldr	r2, [r7, #12]
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	18d1      	adds	r1, r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	69f8      	ldr	r0, [r7, #28]
 8007e7c:	f7ff ff7a 	bl	8007d74 <prvInsertTimerInActiveList>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d063      	beq.n	8007f4e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	69f8      	ldr	r0, [r7, #28]
 8007ea2:	f7ff fe73 	bl	8007b8c <prvReloadTimer>
 8007ea6:	e008      	b.n	8007eba <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eae:	f023 0301 	bic.w	r3, r3, #1
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	69fb      	ldr	r3, [r7, #28]
 8007eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007eba:	69fb      	ldr	r3, [r7, #28]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	69f8      	ldr	r0, [r7, #28]
 8007ec0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007ec2:	e044      	b.n	8007f4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007eca:	f023 0301 	bic.w	r3, r3, #1
 8007ece:	b2da      	uxtb	r2, r3
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8007ed6:	e03a      	b.n	8007f4e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ede:	f043 0301 	orr.w	r3, r3, #1
 8007ee2:	b2da      	uxtb	r2, r3
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007eea:	68fa      	ldr	r2, [r7, #12]
 8007eec:	69fb      	ldr	r3, [r7, #28]
 8007eee:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ef0:	69fb      	ldr	r3, [r7, #28]
 8007ef2:	699b      	ldr	r3, [r3, #24]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10a      	bne.n	8007f0e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	617b      	str	r3, [r7, #20]
    }
 8007f0a:	bf00      	nop
 8007f0c:	e7fe      	b.n	8007f0c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f0e:	69fb      	ldr	r3, [r7, #28]
 8007f10:	699a      	ldr	r2, [r3, #24]
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	18d1      	adds	r1, r2, r3
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	69f8      	ldr	r0, [r7, #28]
 8007f1c:	f7ff ff2a 	bl	8007d74 <prvInsertTimerInActiveList>
                        break;
 8007f20:	e015      	b.n	8007f4e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d103      	bne.n	8007f38 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8007f30:	69f8      	ldr	r0, [r7, #28]
 8007f32:	f000 f88d 	bl	8008050 <vPortFree>
 8007f36:	e00a      	b.n	8007f4e <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f3e:	f023 0301 	bic.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	69fb      	ldr	r3, [r7, #28]
 8007f46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007f4a:	e000      	b.n	8007f4e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8007f4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f4e:	4b08      	ldr	r3, [pc, #32]	; (8007f70 <prvProcessReceivedCommands+0x178>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f107 0108 	add.w	r1, r7, #8
 8007f56:	2200      	movs	r2, #0
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fe fa43 	bl	80063e4 <xQueueReceive>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f47f af4d 	bne.w	8007e00 <prvProcessReceivedCommands+0x8>
        }
    }
 8007f66:	bf00      	nop
 8007f68:	bf00      	nop
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	20000214 	.word	0x20000214

08007f74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f7a:	e009      	b.n	8007f90 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <prvSwitchTimerLists+0x44>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007f86:	f04f 31ff 	mov.w	r1, #4294967295
 8007f8a:	6838      	ldr	r0, [r7, #0]
 8007f8c:	f7ff fe20 	bl	8007bd0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f90:	4b09      	ldr	r3, [pc, #36]	; (8007fb8 <prvSwitchTimerLists+0x44>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1f0      	bne.n	8007f7c <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007f9a:	4b07      	ldr	r3, [pc, #28]	; (8007fb8 <prvSwitchTimerLists+0x44>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <prvSwitchTimerLists+0x48>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a04      	ldr	r2, [pc, #16]	; (8007fb8 <prvSwitchTimerLists+0x44>)
 8007fa6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007fa8:	4a04      	ldr	r2, [pc, #16]	; (8007fbc <prvSwitchTimerLists+0x48>)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6013      	str	r3, [r2, #0]
    }
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000020c 	.word	0x2000020c
 8007fbc:	20000210 	.word	0x20000210

08007fc0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007fc4:	f000 f9d4 	bl	8008370 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007fc8:	4b12      	ldr	r3, [pc, #72]	; (8008014 <prvCheckForValidListAndQueue+0x54>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d11d      	bne.n	800800c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007fd0:	4811      	ldr	r0, [pc, #68]	; (8008018 <prvCheckForValidListAndQueue+0x58>)
 8007fd2:	f000 f84f 	bl	8008074 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007fd6:	4811      	ldr	r0, [pc, #68]	; (800801c <prvCheckForValidListAndQueue+0x5c>)
 8007fd8:	f000 f84c 	bl	8008074 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007fdc:	4b10      	ldr	r3, [pc, #64]	; (8008020 <prvCheckForValidListAndQueue+0x60>)
 8007fde:	4a0e      	ldr	r2, [pc, #56]	; (8008018 <prvCheckForValidListAndQueue+0x58>)
 8007fe0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <prvCheckForValidListAndQueue+0x64>)
 8007fe4:	4a0d      	ldr	r2, [pc, #52]	; (800801c <prvCheckForValidListAndQueue+0x5c>)
 8007fe6:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007fe8:	2200      	movs	r2, #0
 8007fea:	210c      	movs	r1, #12
 8007fec:	200a      	movs	r0, #10
 8007fee:	f7fd ffd7 	bl	8005fa0 <xQueueGenericCreate>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	4a07      	ldr	r2, [pc, #28]	; (8008014 <prvCheckForValidListAndQueue+0x54>)
 8007ff6:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <prvCheckForValidListAndQueue+0x54>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008000:	4b04      	ldr	r3, [pc, #16]	; (8008014 <prvCheckForValidListAndQueue+0x54>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4908      	ldr	r1, [pc, #32]	; (8008028 <prvCheckForValidListAndQueue+0x68>)
 8008006:	4618      	mov	r0, r3
 8008008:	f7fe fbfa 	bl	8006800 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800800c:	f000 f9e0 	bl	80083d0 <vPortExitCritical>
    }
 8008010:	bf00      	nop
 8008012:	bd80      	pop	{r7, pc}
 8008014:	20000214 	.word	0x20000214
 8008018:	200001e4 	.word	0x200001e4
 800801c:	200001f8 	.word	0x200001f8
 8008020:	2000020c 	.word	0x2000020c
 8008024:	20000210 	.word	0x20000210
 8008028:	0800a1c4 	.word	0x0800a1c4

0800802c <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b084      	sub	sp, #16
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
    void * pvReturn;

    vTaskSuspendAll();
 8008034:	f7fe fe58 	bl	8006ce8 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f000 fba5 	bl	8008788 <malloc>
 800803e:	4603      	mov	r3, r0
 8008040:	60fb      	str	r3, [r7, #12]
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8008042:	f7fe fe95 	bl	8006d70 <xTaskResumeAll>
            vApplicationMallocFailedHook();
        }
    }
    #endif

    return pvReturn;
 8008046:	68fb      	ldr	r3, [r7, #12]
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
    if( pv != NULL )
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d006      	beq.n	800806c <vPortFree+0x1c>
    {
        vTaskSuspendAll();
 800805e:	f7fe fe43 	bl	8006ce8 <vTaskSuspendAll>
        {
            free( pv );
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fb98 	bl	8008798 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 8008068:	f7fe fe82 	bl	8006d70 <xTaskResumeAll>
    }
}
 800806c:	bf00      	nop
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f103 0208 	add.w	r2, r3, #8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f04f 32ff 	mov.w	r2, #4294967295
 800808c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f103 0208 	add.w	r2, r3, #8
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f103 0208 	add.w	r2, r3, #8
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr

080080b2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080c0:	bf00      	nop
 80080c2:	370c      	adds	r7, #12
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bc80      	pop	{r7}
 80080c8:	4770      	bx	lr

080080ca <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80080ca:	b480      	push	{r7}
 80080cc:	b085      	sub	sp, #20
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e0:	d103      	bne.n	80080ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	60fb      	str	r3, [r7, #12]
 80080e8:	e00c      	b.n	8008104 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3308      	adds	r3, #8
 80080ee:	60fb      	str	r3, [r7, #12]
 80080f0:	e002      	b.n	80080f8 <vListInsert+0x2e>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	60fb      	str	r3, [r7, #12]
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68ba      	ldr	r2, [r7, #8]
 8008100:	429a      	cmp	r2, r3
 8008102:	d2f6      	bcs.n	80080f2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	685a      	ldr	r2, [r3, #4]
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	685b      	ldr	r3, [r3, #4]
 8008110:	683a      	ldr	r2, [r7, #0]
 8008112:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	1c5a      	adds	r2, r3, #1
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	601a      	str	r2, [r3, #0]
}
 8008130:	bf00      	nop
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	bc80      	pop	{r7}
 8008138:	4770      	bx	lr

0800813a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800813a:	b480      	push	{r7}
 800813c:	b085      	sub	sp, #20
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	6892      	ldr	r2, [r2, #8]
 8008150:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	6852      	ldr	r2, [r2, #4]
 800815a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	429a      	cmp	r2, r3
 8008164:	d103      	bne.n	800816e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	689a      	ldr	r2, [r3, #8]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2200      	movs	r2, #0
 8008172:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	1e5a      	subs	r2, r3, #1
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3714      	adds	r7, #20
 8008186:	46bd      	mov	sp, r7
 8008188:	bc80      	pop	{r7}
 800818a:	4770      	bx	lr

0800818c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	3b04      	subs	r3, #4
 800819c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80081a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3b04      	subs	r3, #4
 80081aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f023 0201 	bic.w	r2, r3, #1
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80081bc:	4a08      	ldr	r2, [pc, #32]	; (80081e0 <pxPortInitialiseStack+0x54>)
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	3b14      	subs	r3, #20
 80081c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	3b20      	subs	r3, #32
 80081d2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80081d4:	68fb      	ldr	r3, [r7, #12]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	bc80      	pop	{r7}
 80081de:	4770      	bx	lr
 80081e0:	080081e5 	.word	0x080081e5

080081e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80081ee:	4b12      	ldr	r3, [pc, #72]	; (8008238 <prvTaskExitError+0x54>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081f6:	d00a      	beq.n	800820e <prvTaskExitError+0x2a>
        __asm volatile
 80081f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fc:	f383 8811 	msr	BASEPRI, r3
 8008200:	f3bf 8f6f 	isb	sy
 8008204:	f3bf 8f4f 	dsb	sy
 8008208:	60fb      	str	r3, [r7, #12]
    }
 800820a:	bf00      	nop
 800820c:	e7fe      	b.n	800820c <prvTaskExitError+0x28>
        __asm volatile
 800820e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008212:	f383 8811 	msr	BASEPRI, r3
 8008216:	f3bf 8f6f 	isb	sy
 800821a:	f3bf 8f4f 	dsb	sy
 800821e:	60bb      	str	r3, [r7, #8]
    }
 8008220:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008222:	bf00      	nop
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d0fc      	beq.n	8008224 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	3714      	adds	r7, #20
 8008230:	46bd      	mov	sp, r7
 8008232:	bc80      	pop	{r7}
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	20000020 	.word	0x20000020
 800823c:	00000000 	.word	0x00000000

08008240 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <pxCurrentTCBConst2>)
 8008242:	6819      	ldr	r1, [r3, #0]
 8008244:	6808      	ldr	r0, [r1, #0]
 8008246:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800824a:	f380 8809 	msr	PSP, r0
 800824e:	f3bf 8f6f 	isb	sy
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f380 8811 	msr	BASEPRI, r0
 800825a:	f04e 0e0d 	orr.w	lr, lr, #13
 800825e:	4770      	bx	lr

08008260 <pxCurrentTCBConst2>:
 8008260:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop

08008268 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8008268:	4806      	ldr	r0, [pc, #24]	; (8008284 <prvPortStartFirstTask+0x1c>)
 800826a:	6800      	ldr	r0, [r0, #0]
 800826c:	6800      	ldr	r0, [r0, #0]
 800826e:	f380 8808 	msr	MSP, r0
 8008272:	b662      	cpsie	i
 8008274:	b661      	cpsie	f
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	df00      	svc	0
 8008280:	bf00      	nop
 8008282:	0000      	.short	0x0000
 8008284:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008288:	bf00      	nop
 800828a:	bf00      	nop

0800828c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008292:	4b32      	ldr	r3, [pc, #200]	; (800835c <xPortStartScheduler+0xd0>)
 8008294:	60fb      	str	r3, [r7, #12]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	4b2a      	ldr	r3, [pc, #168]	; (8008360 <xPortStartScheduler+0xd4>)
 80082b8:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ba:	4b2a      	ldr	r3, [pc, #168]	; (8008364 <xPortStartScheduler+0xd8>)
 80082bc:	2207      	movs	r2, #7
 80082be:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082c0:	e009      	b.n	80082d6 <xPortStartScheduler+0x4a>
        {
            ulMaxPRIGROUPValue--;
 80082c2:	4b28      	ldr	r3, [pc, #160]	; (8008364 <xPortStartScheduler+0xd8>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	4a26      	ldr	r2, [pc, #152]	; (8008364 <xPortStartScheduler+0xd8>)
 80082ca:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082de:	2b80      	cmp	r3, #128	; 0x80
 80082e0:	d0ef      	beq.n	80082c2 <xPortStartScheduler+0x36>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082e2:	4b20      	ldr	r3, [pc, #128]	; (8008364 <xPortStartScheduler+0xd8>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1c3 0307 	rsb	r3, r3, #7
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d00a      	beq.n	8008304 <xPortStartScheduler+0x78>
        __asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60bb      	str	r3, [r7, #8]
    }
 8008300:	bf00      	nop
 8008302:	e7fe      	b.n	8008302 <xPortStartScheduler+0x76>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008304:	4b17      	ldr	r3, [pc, #92]	; (8008364 <xPortStartScheduler+0xd8>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	4a16      	ldr	r2, [pc, #88]	; (8008364 <xPortStartScheduler+0xd8>)
 800830c:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <xPortStartScheduler+0xd8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008316:	4a13      	ldr	r2, [pc, #76]	; (8008364 <xPortStartScheduler+0xd8>)
 8008318:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	b2da      	uxtb	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008322:	4b11      	ldr	r3, [pc, #68]	; (8008368 <xPortStartScheduler+0xdc>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a10      	ldr	r2, [pc, #64]	; (8008368 <xPortStartScheduler+0xdc>)
 8008328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800832c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800832e:	4b0e      	ldr	r3, [pc, #56]	; (8008368 <xPortStartScheduler+0xdc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a0d      	ldr	r2, [pc, #52]	; (8008368 <xPortStartScheduler+0xdc>)
 8008334:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008338:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800833a:	f000 f981 	bl	8008640 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800833e:	4b0b      	ldr	r3, [pc, #44]	; (800836c <xPortStartScheduler+0xe0>)
 8008340:	2200      	movs	r2, #0
 8008342:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008344:	f7ff ff90 	bl	8008268 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008348:	f7fe ff98 	bl	800727c <vTaskSwitchContext>
    prvTaskExitError();
 800834c:	f7ff ff4a 	bl	80081e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	e000e400 	.word	0xe000e400
 8008360:	2000022c 	.word	0x2000022c
 8008364:	20000230 	.word	0x20000230
 8008368:	e000ed20 	.word	0xe000ed20
 800836c:	20000020 	.word	0x20000020

08008370 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
        __asm volatile
 8008376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800837a:	f383 8811 	msr	BASEPRI, r3
 800837e:	f3bf 8f6f 	isb	sy
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	607b      	str	r3, [r7, #4]
    }
 8008388:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800838a:	4b0f      	ldr	r3, [pc, #60]	; (80083c8 <vPortEnterCritical+0x58>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	3301      	adds	r3, #1
 8008390:	4a0d      	ldr	r2, [pc, #52]	; (80083c8 <vPortEnterCritical+0x58>)
 8008392:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008394:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <vPortEnterCritical+0x58>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d10f      	bne.n	80083bc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800839c:	4b0b      	ldr	r3, [pc, #44]	; (80083cc <vPortEnterCritical+0x5c>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d00a      	beq.n	80083bc <vPortEnterCritical+0x4c>
        __asm volatile
 80083a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083aa:	f383 8811 	msr	BASEPRI, r3
 80083ae:	f3bf 8f6f 	isb	sy
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	603b      	str	r3, [r7, #0]
    }
 80083b8:	bf00      	nop
 80083ba:	e7fe      	b.n	80083ba <vPortEnterCritical+0x4a>
    }
}
 80083bc:	bf00      	nop
 80083be:	370c      	adds	r7, #12
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bc80      	pop	{r7}
 80083c4:	4770      	bx	lr
 80083c6:	bf00      	nop
 80083c8:	20000020 	.word	0x20000020
 80083cc:	e000ed04 	.word	0xe000ed04

080083d0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80083d6:	4b11      	ldr	r3, [pc, #68]	; (800841c <vPortExitCritical+0x4c>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d10a      	bne.n	80083f4 <vPortExitCritical+0x24>
        __asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
    }
 80083f0:	bf00      	nop
 80083f2:	e7fe      	b.n	80083f2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80083f4:	4b09      	ldr	r3, [pc, #36]	; (800841c <vPortExitCritical+0x4c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3b01      	subs	r3, #1
 80083fa:	4a08      	ldr	r2, [pc, #32]	; (800841c <vPortExitCritical+0x4c>)
 80083fc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80083fe:	4b07      	ldr	r3, [pc, #28]	; (800841c <vPortExitCritical+0x4c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d105      	bne.n	8008412 <vPortExitCritical+0x42>
 8008406:	2300      	movs	r3, #0
 8008408:	603b      	str	r3, [r7, #0]
        __asm volatile
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	f383 8811 	msr	BASEPRI, r3
    }
 8008410:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8008412:	bf00      	nop
 8008414:	370c      	adds	r7, #12
 8008416:	46bd      	mov	sp, r7
 8008418:	bc80      	pop	{r7}
 800841a:	4770      	bx	lr
 800841c:	20000020 	.word	0x20000020

08008420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008420:	f3ef 8009 	mrs	r0, PSP
 8008424:	f3bf 8f6f 	isb	sy
 8008428:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <pxCurrentTCBConst>)
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008430:	6010      	str	r0, [r2, #0]
 8008432:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008436:	f04f 0050 	mov.w	r0, #80	; 0x50
 800843a:	f380 8811 	msr	BASEPRI, r0
 800843e:	f7fe ff1d 	bl	800727c <vTaskSwitchContext>
 8008442:	f04f 0000 	mov.w	r0, #0
 8008446:	f380 8811 	msr	BASEPRI, r0
 800844a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008456:	f380 8809 	msr	PSP, r0
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	4770      	bx	lr

08008460 <pxCurrentTCBConst>:
 8008460:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
        __asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
    }
 8008480:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe fde3 	bl	800704c <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	; (80084a8 <SysTick_Handler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
        __asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
    }
 800849e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE == 1 )

    __attribute__( ( weak ) ) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
    {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
        uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements, ulSysTickDecrementsLeft;
        TickType_t xModifiableIdleTime;

        /* Make sure the SysTick reload value does not overflow the counter. */
        if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 80084b4:	4b5b      	ldr	r3, [pc, #364]	; (8008624 <vPortSuppressTicksAndSleep+0x178>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d902      	bls.n	80084c4 <vPortSuppressTicksAndSleep+0x18>
        {
            xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 80084be:	4b59      	ldr	r3, [pc, #356]	; (8008624 <vPortSuppressTicksAndSleep+0x178>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	607b      	str	r3, [r7, #4]
        }

        /* Enter a critical section but don't use the taskENTER_CRITICAL()
         * method as that will mask interrupts that should exit sleep mode. */
        __asm volatile ( "cpsid i" ::: "memory" );
 80084c4:	b672      	cpsid	i
        __asm volatile ( "dsb" );
 80084c6:	f3bf 8f4f 	dsb	sy
        __asm volatile ( "isb" );
 80084ca:	f3bf 8f6f 	isb	sy

        /* If a context switch is pending or a task is waiting for the scheduler
         * to be unsuspended then abandon the low power entry. */
        if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 80084ce:	f7ff f93b 	bl	8007748 <eTaskConfirmSleepModeStatus>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d101      	bne.n	80084dc <vPortSuppressTicksAndSleep+0x30>
        {
            /* Re-enable interrupts - see comments above the cpsid instruction
             * above. */
            __asm volatile ( "cpsie i" ::: "memory" );
 80084d8:	b662      	cpsie	i
            vTaskStepTick( ulCompleteTickPeriods );

            /* Exit with interrupts enabled. */
            __asm volatile ( "cpsie i" ::: "memory" );
        }
    }
 80084da:	e09e      	b.n	800861a <vPortSuppressTicksAndSleep+0x16e>
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 80084dc:	4b52      	ldr	r3, [pc, #328]	; (8008628 <vPortSuppressTicksAndSleep+0x17c>)
 80084de:	2206      	movs	r2, #6
 80084e0:	601a      	str	r2, [r3, #0]
            ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80084e2:	4b52      	ldr	r3, [pc, #328]	; (800862c <vPortSuppressTicksAndSleep+0x180>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	617b      	str	r3, [r7, #20]
            if( ulSysTickDecrementsLeft == 0 )
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d102      	bne.n	80084f4 <vPortSuppressTicksAndSleep+0x48>
                ulSysTickDecrementsLeft = ulTimerCountsForOneTick;
 80084ee:	4b50      	ldr	r3, [pc, #320]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	617b      	str	r3, [r7, #20]
            ulReloadValue = ulSysTickDecrementsLeft + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	4a4d      	ldr	r2, [pc, #308]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80084fa:	6812      	ldr	r2, [r2, #0]
 80084fc:	fb02 f303 	mul.w	r3, r2, r3
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4413      	add	r3, r2
 8008504:	61fb      	str	r3, [r7, #28]
            if( ( portNVIC_INT_CTRL_REG & portNVIC_PEND_SYSTICK_SET_BIT ) != 0 )
 8008506:	4b4b      	ldr	r3, [pc, #300]	; (8008634 <vPortSuppressTicksAndSleep+0x188>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d008      	beq.n	8008524 <vPortSuppressTicksAndSleep+0x78>
                portNVIC_INT_CTRL_REG = portNVIC_PEND_SYSTICK_CLEAR_BIT;
 8008512:	4b48      	ldr	r3, [pc, #288]	; (8008634 <vPortSuppressTicksAndSleep+0x188>)
 8008514:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008518:	601a      	str	r2, [r3, #0]
                ulReloadValue -= ulTimerCountsForOneTick;
 800851a:	4b45      	ldr	r3, [pc, #276]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69fa      	ldr	r2, [r7, #28]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	61fb      	str	r3, [r7, #28]
            if( ulReloadValue > ulStoppedTimerCompensation )
 8008524:	4b44      	ldr	r3, [pc, #272]	; (8008638 <vPortSuppressTicksAndSleep+0x18c>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	429a      	cmp	r2, r3
 800852c:	d904      	bls.n	8008538 <vPortSuppressTicksAndSleep+0x8c>
                ulReloadValue -= ulStoppedTimerCompensation;
 800852e:	4b42      	ldr	r3, [pc, #264]	; (8008638 <vPortSuppressTicksAndSleep+0x18c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	61fb      	str	r3, [r7, #28]
            portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8008538:	4a40      	ldr	r2, [pc, #256]	; (800863c <vPortSuppressTicksAndSleep+0x190>)
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	6013      	str	r3, [r2, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800853e:	4b3b      	ldr	r3, [pc, #236]	; (800862c <vPortSuppressTicksAndSleep+0x180>)
 8008540:	2200      	movs	r2, #0
 8008542:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8008544:	4b38      	ldr	r3, [pc, #224]	; (8008628 <vPortSuppressTicksAndSleep+0x17c>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a37      	ldr	r2, [pc, #220]	; (8008628 <vPortSuppressTicksAndSleep+0x17c>)
 800854a:	f043 0301 	orr.w	r3, r3, #1
 800854e:	6013      	str	r3, [r2, #0]
            xModifiableIdleTime = xExpectedIdleTime;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	60fb      	str	r3, [r7, #12]
            if( xModifiableIdleTime > 0 )
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d004      	beq.n	8008564 <vPortSuppressTicksAndSleep+0xb8>
                __asm volatile ( "dsb" ::: "memory" );
 800855a:	f3bf 8f4f 	dsb	sy
                __asm volatile ( "wfi" );
 800855e:	bf30      	wfi
                __asm volatile ( "isb" );
 8008560:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsie i" ::: "memory" );
 8008564:	b662      	cpsie	i
            __asm volatile ( "dsb" );
 8008566:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 800856a:	f3bf 8f6f 	isb	sy
            __asm volatile ( "cpsid i" ::: "memory" );
 800856e:	b672      	cpsid	i
            __asm volatile ( "dsb" );
 8008570:	f3bf 8f4f 	dsb	sy
            __asm volatile ( "isb" );
 8008574:	f3bf 8f6f 	isb	sy
            portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT );
 8008578:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <vPortSuppressTicksAndSleep+0x17c>)
 800857a:	2206      	movs	r2, #6
 800857c:	601a      	str	r2, [r3, #0]
            if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 800857e:	4b2a      	ldr	r3, [pc, #168]	; (8008628 <vPortSuppressTicksAndSleep+0x17c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008586:	2b00      	cmp	r3, #0
 8008588:	d01d      	beq.n	80085c6 <vPortSuppressTicksAndSleep+0x11a>
                ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 800858a:	4b29      	ldr	r3, [pc, #164]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	4b27      	ldr	r3, [pc, #156]	; (800862c <vPortSuppressTicksAndSleep+0x180>)
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	1acb      	subs	r3, r1, r3
 8008596:	4413      	add	r3, r2
 8008598:	3b01      	subs	r3, #1
 800859a:	613b      	str	r3, [r7, #16]
                if( ( ulCalculatedLoadValue <= ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 800859c:	4b26      	ldr	r3, [pc, #152]	; (8008638 <vPortSuppressTicksAndSleep+0x18c>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	693a      	ldr	r2, [r7, #16]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d904      	bls.n	80085b0 <vPortSuppressTicksAndSleep+0x104>
 80085a6:	4b22      	ldr	r3, [pc, #136]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d903      	bls.n	80085b8 <vPortSuppressTicksAndSleep+0x10c>
                    ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 80085b0:	4b1f      	ldr	r3, [pc, #124]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3b01      	subs	r3, #1
 80085b6:	613b      	str	r3, [r7, #16]
                portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 80085b8:	4a20      	ldr	r2, [pc, #128]	; (800863c <vPortSuppressTicksAndSleep+0x190>)
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	6013      	str	r3, [r2, #0]
                ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	3b01      	subs	r3, #1
 80085c2:	61bb      	str	r3, [r7, #24]
 80085c4:	e01a      	b.n	80085fc <vPortSuppressTicksAndSleep+0x150>
                ulSysTickDecrementsLeft = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 80085c6:	4b19      	ldr	r3, [pc, #100]	; (800862c <vPortSuppressTicksAndSleep+0x180>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	617b      	str	r3, [r7, #20]
                ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - ulSysTickDecrementsLeft;
 80085cc:	4b18      	ldr	r3, [pc, #96]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	687a      	ldr	r2, [r7, #4]
 80085d2:	fb02 f203 	mul.w	r2, r2, r3
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	1ad3      	subs	r3, r2, r3
 80085da:	60bb      	str	r3, [r7, #8]
                ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 80085dc:	4b14      	ldr	r3, [pc, #80]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085e6:	61bb      	str	r3, [r7, #24]
                portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	3301      	adds	r3, #1
 80085ec:	4a10      	ldr	r2, [pc, #64]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 80085ee:	6812      	ldr	r2, [r2, #0]
 80085f0:	fb02 f203 	mul.w	r2, r2, r3
 80085f4:	4911      	ldr	r1, [pc, #68]	; (800863c <vPortSuppressTicksAndSleep+0x190>)
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	600b      	str	r3, [r1, #0]
            portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80085fc:	4b0b      	ldr	r3, [pc, #44]	; (800862c <vPortSuppressTicksAndSleep+0x180>)
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
            portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008602:	4b09      	ldr	r3, [pc, #36]	; (8008628 <vPortSuppressTicksAndSleep+0x17c>)
 8008604:	2207      	movs	r2, #7
 8008606:	601a      	str	r2, [r3, #0]
                portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8008608:	4b09      	ldr	r3, [pc, #36]	; (8008630 <vPortSuppressTicksAndSleep+0x184>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a0b      	ldr	r2, [pc, #44]	; (800863c <vPortSuppressTicksAndSleep+0x190>)
 800860e:	3b01      	subs	r3, #1
 8008610:	6013      	str	r3, [r2, #0]
            vTaskStepTick( ulCompleteTickPeriods );
 8008612:	69b8      	ldr	r0, [r7, #24]
 8008614:	f7fe fcc0 	bl	8006f98 <vTaskStepTick>
            __asm volatile ( "cpsie i" ::: "memory" );
 8008618:	b662      	cpsie	i
    }
 800861a:	bf00      	nop
 800861c:	3720      	adds	r7, #32
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000224 	.word	0x20000224
 8008628:	e000e010 	.word	0xe000e010
 800862c:	e000e018 	.word	0xe000e018
 8008630:	20000220 	.word	0x20000220
 8008634:	e000ed04 	.word	0xe000ed04
 8008638:	20000228 	.word	0x20000228
 800863c:	e000e014 	.word	0xe000e014

08008640 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
    /* Calculate the constants required to configure the tick interrupt. */
    #if ( configUSE_TICKLESS_IDLE == 1 )
    {
        ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8008644:	4b14      	ldr	r3, [pc, #80]	; (8008698 <vPortSetupTimerInterrupt+0x58>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a14      	ldr	r2, [pc, #80]	; (800869c <vPortSetupTimerInterrupt+0x5c>)
 800864a:	fba2 2303 	umull	r2, r3, r2, r3
 800864e:	099b      	lsrs	r3, r3, #6
 8008650:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <vPortSetupTimerInterrupt+0x60>)
 8008652:	6013      	str	r3, [r2, #0]
        xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8008654:	4b12      	ldr	r3, [pc, #72]	; (80086a0 <vPortSetupTimerInterrupt+0x60>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 800865c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008660:	4a10      	ldr	r2, [pc, #64]	; (80086a4 <vPortSetupTimerInterrupt+0x64>)
 8008662:	6013      	str	r3, [r2, #0]
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8008664:	4b10      	ldr	r3, [pc, #64]	; (80086a8 <vPortSetupTimerInterrupt+0x68>)
 8008666:	225e      	movs	r2, #94	; 0x5e
 8008668:	601a      	str	r2, [r3, #0]
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800866a:	4b10      	ldr	r3, [pc, #64]	; (80086ac <vPortSetupTimerInterrupt+0x6c>)
 800866c:	2200      	movs	r2, #0
 800866e:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008670:	4b0f      	ldr	r3, [pc, #60]	; (80086b0 <vPortSetupTimerInterrupt+0x70>)
 8008672:	2200      	movs	r2, #0
 8008674:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008676:	4b08      	ldr	r3, [pc, #32]	; (8008698 <vPortSetupTimerInterrupt+0x58>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a08      	ldr	r2, [pc, #32]	; (800869c <vPortSetupTimerInterrupt+0x5c>)
 800867c:	fba2 2303 	umull	r2, r3, r2, r3
 8008680:	099b      	lsrs	r3, r3, #6
 8008682:	4a0c      	ldr	r2, [pc, #48]	; (80086b4 <vPortSetupTimerInterrupt+0x74>)
 8008684:	3b01      	subs	r3, #1
 8008686:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008688:	4b08      	ldr	r3, [pc, #32]	; (80086ac <vPortSetupTimerInterrupt+0x6c>)
 800868a:	2207      	movs	r2, #7
 800868c:	601a      	str	r2, [r3, #0]
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	bc80      	pop	{r7}
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	20000010 	.word	0x20000010
 800869c:	10624dd3 	.word	0x10624dd3
 80086a0:	20000220 	.word	0x20000220
 80086a4:	20000224 	.word	0x20000224
 80086a8:	20000228 	.word	0x20000228
 80086ac:	e000e010 	.word	0xe000e010
 80086b0:	e000e018 	.word	0xe000e018
 80086b4:	e000e014 	.word	0xe000e014

080086b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80086be:	f3ef 8305 	mrs	r3, IPSR
 80086c2:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b0f      	cmp	r3, #15
 80086c8:	d914      	bls.n	80086f4 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ca:	4a16      	ldr	r2, [pc, #88]	; (8008724 <vPortValidateInterruptPriority+0x6c>)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	4413      	add	r3, r2
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086d4:	4b14      	ldr	r3, [pc, #80]	; (8008728 <vPortValidateInterruptPriority+0x70>)
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	7afa      	ldrb	r2, [r7, #11]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d20a      	bcs.n	80086f4 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80086de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e2:	f383 8811 	msr	BASEPRI, r3
 80086e6:	f3bf 8f6f 	isb	sy
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	607b      	str	r3, [r7, #4]
    }
 80086f0:	bf00      	nop
 80086f2:	e7fe      	b.n	80086f2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086f4:	4b0d      	ldr	r3, [pc, #52]	; (800872c <vPortValidateInterruptPriority+0x74>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086fc:	4b0c      	ldr	r3, [pc, #48]	; (8008730 <vPortValidateInterruptPriority+0x78>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	429a      	cmp	r2, r3
 8008702:	d90a      	bls.n	800871a <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8008704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008708:	f383 8811 	msr	BASEPRI, r3
 800870c:	f3bf 8f6f 	isb	sy
 8008710:	f3bf 8f4f 	dsb	sy
 8008714:	603b      	str	r3, [r7, #0]
    }
 8008716:	bf00      	nop
 8008718:	e7fe      	b.n	8008718 <vPortValidateInterruptPriority+0x60>
    }
 800871a:	bf00      	nop
 800871c:	3714      	adds	r7, #20
 800871e:	46bd      	mov	sp, r7
 8008720:	bc80      	pop	{r7}
 8008722:	4770      	bx	lr
 8008724:	e000e3f0 	.word	0xe000e3f0
 8008728:	2000022c 	.word	0x2000022c
 800872c:	e000ed0c 	.word	0xe000ed0c
 8008730:	20000230 	.word	0x20000230

08008734 <__errno>:
 8008734:	4b01      	ldr	r3, [pc, #4]	; (800873c <__errno+0x8>)
 8008736:	6818      	ldr	r0, [r3, #0]
 8008738:	4770      	bx	lr
 800873a:	bf00      	nop
 800873c:	20000024 	.word	0x20000024

08008740 <__libc_init_array>:
 8008740:	b570      	push	{r4, r5, r6, lr}
 8008742:	2600      	movs	r6, #0
 8008744:	4d0c      	ldr	r5, [pc, #48]	; (8008778 <__libc_init_array+0x38>)
 8008746:	4c0d      	ldr	r4, [pc, #52]	; (800877c <__libc_init_array+0x3c>)
 8008748:	1b64      	subs	r4, r4, r5
 800874a:	10a4      	asrs	r4, r4, #2
 800874c:	42a6      	cmp	r6, r4
 800874e:	d109      	bne.n	8008764 <__libc_init_array+0x24>
 8008750:	f001 fc14 	bl	8009f7c <_init>
 8008754:	2600      	movs	r6, #0
 8008756:	4d0a      	ldr	r5, [pc, #40]	; (8008780 <__libc_init_array+0x40>)
 8008758:	4c0a      	ldr	r4, [pc, #40]	; (8008784 <__libc_init_array+0x44>)
 800875a:	1b64      	subs	r4, r4, r5
 800875c:	10a4      	asrs	r4, r4, #2
 800875e:	42a6      	cmp	r6, r4
 8008760:	d105      	bne.n	800876e <__libc_init_array+0x2e>
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	f855 3b04 	ldr.w	r3, [r5], #4
 8008768:	4798      	blx	r3
 800876a:	3601      	adds	r6, #1
 800876c:	e7ee      	b.n	800874c <__libc_init_array+0xc>
 800876e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008772:	4798      	blx	r3
 8008774:	3601      	adds	r6, #1
 8008776:	e7f2      	b.n	800875e <__libc_init_array+0x1e>
 8008778:	0800a270 	.word	0x0800a270
 800877c:	0800a270 	.word	0x0800a270
 8008780:	0800a270 	.word	0x0800a270
 8008784:	0800a274 	.word	0x0800a274

08008788 <malloc>:
 8008788:	4b02      	ldr	r3, [pc, #8]	; (8008794 <malloc+0xc>)
 800878a:	4601      	mov	r1, r0
 800878c:	6818      	ldr	r0, [r3, #0]
 800878e:	f000 b86d 	b.w	800886c <_malloc_r>
 8008792:	bf00      	nop
 8008794:	20000024 	.word	0x20000024

08008798 <free>:
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <free+0xc>)
 800879a:	4601      	mov	r1, r0
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	f000 b819 	b.w	80087d4 <_free_r>
 80087a2:	bf00      	nop
 80087a4:	20000024 	.word	0x20000024

080087a8 <memcpy>:
 80087a8:	440a      	add	r2, r1
 80087aa:	4291      	cmp	r1, r2
 80087ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80087b0:	d100      	bne.n	80087b4 <memcpy+0xc>
 80087b2:	4770      	bx	lr
 80087b4:	b510      	push	{r4, lr}
 80087b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087ba:	4291      	cmp	r1, r2
 80087bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087c0:	d1f9      	bne.n	80087b6 <memcpy+0xe>
 80087c2:	bd10      	pop	{r4, pc}

080087c4 <memset>:
 80087c4:	4603      	mov	r3, r0
 80087c6:	4402      	add	r2, r0
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d100      	bne.n	80087ce <memset+0xa>
 80087cc:	4770      	bx	lr
 80087ce:	f803 1b01 	strb.w	r1, [r3], #1
 80087d2:	e7f9      	b.n	80087c8 <memset+0x4>

080087d4 <_free_r>:
 80087d4:	b538      	push	{r3, r4, r5, lr}
 80087d6:	4605      	mov	r5, r0
 80087d8:	2900      	cmp	r1, #0
 80087da:	d043      	beq.n	8008864 <_free_r+0x90>
 80087dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e0:	1f0c      	subs	r4, r1, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfb8      	it	lt
 80087e6:	18e4      	addlt	r4, r4, r3
 80087e8:	f000 f8e2 	bl	80089b0 <__malloc_lock>
 80087ec:	4a1e      	ldr	r2, [pc, #120]	; (8008868 <_free_r+0x94>)
 80087ee:	6813      	ldr	r3, [r2, #0]
 80087f0:	4610      	mov	r0, r2
 80087f2:	b933      	cbnz	r3, 8008802 <_free_r+0x2e>
 80087f4:	6063      	str	r3, [r4, #4]
 80087f6:	6014      	str	r4, [r2, #0]
 80087f8:	4628      	mov	r0, r5
 80087fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087fe:	f000 b8dd 	b.w	80089bc <__malloc_unlock>
 8008802:	42a3      	cmp	r3, r4
 8008804:	d90a      	bls.n	800881c <_free_r+0x48>
 8008806:	6821      	ldr	r1, [r4, #0]
 8008808:	1862      	adds	r2, r4, r1
 800880a:	4293      	cmp	r3, r2
 800880c:	bf01      	itttt	eq
 800880e:	681a      	ldreq	r2, [r3, #0]
 8008810:	685b      	ldreq	r3, [r3, #4]
 8008812:	1852      	addeq	r2, r2, r1
 8008814:	6022      	streq	r2, [r4, #0]
 8008816:	6063      	str	r3, [r4, #4]
 8008818:	6004      	str	r4, [r0, #0]
 800881a:	e7ed      	b.n	80087f8 <_free_r+0x24>
 800881c:	461a      	mov	r2, r3
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	b10b      	cbz	r3, 8008826 <_free_r+0x52>
 8008822:	42a3      	cmp	r3, r4
 8008824:	d9fa      	bls.n	800881c <_free_r+0x48>
 8008826:	6811      	ldr	r1, [r2, #0]
 8008828:	1850      	adds	r0, r2, r1
 800882a:	42a0      	cmp	r0, r4
 800882c:	d10b      	bne.n	8008846 <_free_r+0x72>
 800882e:	6820      	ldr	r0, [r4, #0]
 8008830:	4401      	add	r1, r0
 8008832:	1850      	adds	r0, r2, r1
 8008834:	4283      	cmp	r3, r0
 8008836:	6011      	str	r1, [r2, #0]
 8008838:	d1de      	bne.n	80087f8 <_free_r+0x24>
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	4401      	add	r1, r0
 8008840:	6011      	str	r1, [r2, #0]
 8008842:	6053      	str	r3, [r2, #4]
 8008844:	e7d8      	b.n	80087f8 <_free_r+0x24>
 8008846:	d902      	bls.n	800884e <_free_r+0x7a>
 8008848:	230c      	movs	r3, #12
 800884a:	602b      	str	r3, [r5, #0]
 800884c:	e7d4      	b.n	80087f8 <_free_r+0x24>
 800884e:	6820      	ldr	r0, [r4, #0]
 8008850:	1821      	adds	r1, r4, r0
 8008852:	428b      	cmp	r3, r1
 8008854:	bf01      	itttt	eq
 8008856:	6819      	ldreq	r1, [r3, #0]
 8008858:	685b      	ldreq	r3, [r3, #4]
 800885a:	1809      	addeq	r1, r1, r0
 800885c:	6021      	streq	r1, [r4, #0]
 800885e:	6063      	str	r3, [r4, #4]
 8008860:	6054      	str	r4, [r2, #4]
 8008862:	e7c9      	b.n	80087f8 <_free_r+0x24>
 8008864:	bd38      	pop	{r3, r4, r5, pc}
 8008866:	bf00      	nop
 8008868:	20000234 	.word	0x20000234

0800886c <_malloc_r>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	1ccd      	adds	r5, r1, #3
 8008870:	f025 0503 	bic.w	r5, r5, #3
 8008874:	3508      	adds	r5, #8
 8008876:	2d0c      	cmp	r5, #12
 8008878:	bf38      	it	cc
 800887a:	250c      	movcc	r5, #12
 800887c:	2d00      	cmp	r5, #0
 800887e:	4606      	mov	r6, r0
 8008880:	db01      	blt.n	8008886 <_malloc_r+0x1a>
 8008882:	42a9      	cmp	r1, r5
 8008884:	d903      	bls.n	800888e <_malloc_r+0x22>
 8008886:	230c      	movs	r3, #12
 8008888:	6033      	str	r3, [r6, #0]
 800888a:	2000      	movs	r0, #0
 800888c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800888e:	f000 f88f 	bl	80089b0 <__malloc_lock>
 8008892:	4921      	ldr	r1, [pc, #132]	; (8008918 <_malloc_r+0xac>)
 8008894:	680a      	ldr	r2, [r1, #0]
 8008896:	4614      	mov	r4, r2
 8008898:	b99c      	cbnz	r4, 80088c2 <_malloc_r+0x56>
 800889a:	4f20      	ldr	r7, [pc, #128]	; (800891c <_malloc_r+0xb0>)
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	b923      	cbnz	r3, 80088aa <_malloc_r+0x3e>
 80088a0:	4621      	mov	r1, r4
 80088a2:	4630      	mov	r0, r6
 80088a4:	f000 f83c 	bl	8008920 <_sbrk_r>
 80088a8:	6038      	str	r0, [r7, #0]
 80088aa:	4629      	mov	r1, r5
 80088ac:	4630      	mov	r0, r6
 80088ae:	f000 f837 	bl	8008920 <_sbrk_r>
 80088b2:	1c43      	adds	r3, r0, #1
 80088b4:	d123      	bne.n	80088fe <_malloc_r+0x92>
 80088b6:	230c      	movs	r3, #12
 80088b8:	4630      	mov	r0, r6
 80088ba:	6033      	str	r3, [r6, #0]
 80088bc:	f000 f87e 	bl	80089bc <__malloc_unlock>
 80088c0:	e7e3      	b.n	800888a <_malloc_r+0x1e>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	1b5b      	subs	r3, r3, r5
 80088c6:	d417      	bmi.n	80088f8 <_malloc_r+0x8c>
 80088c8:	2b0b      	cmp	r3, #11
 80088ca:	d903      	bls.n	80088d4 <_malloc_r+0x68>
 80088cc:	6023      	str	r3, [r4, #0]
 80088ce:	441c      	add	r4, r3
 80088d0:	6025      	str	r5, [r4, #0]
 80088d2:	e004      	b.n	80088de <_malloc_r+0x72>
 80088d4:	6863      	ldr	r3, [r4, #4]
 80088d6:	42a2      	cmp	r2, r4
 80088d8:	bf0c      	ite	eq
 80088da:	600b      	streq	r3, [r1, #0]
 80088dc:	6053      	strne	r3, [r2, #4]
 80088de:	4630      	mov	r0, r6
 80088e0:	f000 f86c 	bl	80089bc <__malloc_unlock>
 80088e4:	f104 000b 	add.w	r0, r4, #11
 80088e8:	1d23      	adds	r3, r4, #4
 80088ea:	f020 0007 	bic.w	r0, r0, #7
 80088ee:	1ac2      	subs	r2, r0, r3
 80088f0:	d0cc      	beq.n	800888c <_malloc_r+0x20>
 80088f2:	1a1b      	subs	r3, r3, r0
 80088f4:	50a3      	str	r3, [r4, r2]
 80088f6:	e7c9      	b.n	800888c <_malloc_r+0x20>
 80088f8:	4622      	mov	r2, r4
 80088fa:	6864      	ldr	r4, [r4, #4]
 80088fc:	e7cc      	b.n	8008898 <_malloc_r+0x2c>
 80088fe:	1cc4      	adds	r4, r0, #3
 8008900:	f024 0403 	bic.w	r4, r4, #3
 8008904:	42a0      	cmp	r0, r4
 8008906:	d0e3      	beq.n	80088d0 <_malloc_r+0x64>
 8008908:	1a21      	subs	r1, r4, r0
 800890a:	4630      	mov	r0, r6
 800890c:	f000 f808 	bl	8008920 <_sbrk_r>
 8008910:	3001      	adds	r0, #1
 8008912:	d1dd      	bne.n	80088d0 <_malloc_r+0x64>
 8008914:	e7cf      	b.n	80088b6 <_malloc_r+0x4a>
 8008916:	bf00      	nop
 8008918:	20000234 	.word	0x20000234
 800891c:	20000238 	.word	0x20000238

08008920 <_sbrk_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	2300      	movs	r3, #0
 8008924:	4d05      	ldr	r5, [pc, #20]	; (800893c <_sbrk_r+0x1c>)
 8008926:	4604      	mov	r4, r0
 8008928:	4608      	mov	r0, r1
 800892a:	602b      	str	r3, [r5, #0]
 800892c:	f7fb f862 	bl	80039f4 <_sbrk>
 8008930:	1c43      	adds	r3, r0, #1
 8008932:	d102      	bne.n	800893a <_sbrk_r+0x1a>
 8008934:	682b      	ldr	r3, [r5, #0]
 8008936:	b103      	cbz	r3, 800893a <_sbrk_r+0x1a>
 8008938:	6023      	str	r3, [r4, #0]
 800893a:	bd38      	pop	{r3, r4, r5, pc}
 800893c:	20000510 	.word	0x20000510

08008940 <siprintf>:
 8008940:	b40e      	push	{r1, r2, r3}
 8008942:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008946:	b500      	push	{lr}
 8008948:	b09c      	sub	sp, #112	; 0x70
 800894a:	ab1d      	add	r3, sp, #116	; 0x74
 800894c:	9002      	str	r0, [sp, #8]
 800894e:	9006      	str	r0, [sp, #24]
 8008950:	9107      	str	r1, [sp, #28]
 8008952:	9104      	str	r1, [sp, #16]
 8008954:	4808      	ldr	r0, [pc, #32]	; (8008978 <siprintf+0x38>)
 8008956:	4909      	ldr	r1, [pc, #36]	; (800897c <siprintf+0x3c>)
 8008958:	f853 2b04 	ldr.w	r2, [r3], #4
 800895c:	9105      	str	r1, [sp, #20]
 800895e:	6800      	ldr	r0, [r0, #0]
 8008960:	a902      	add	r1, sp, #8
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f000 f88c 	bl	8008a80 <_svfiprintf_r>
 8008968:	2200      	movs	r2, #0
 800896a:	9b02      	ldr	r3, [sp, #8]
 800896c:	701a      	strb	r2, [r3, #0]
 800896e:	b01c      	add	sp, #112	; 0x70
 8008970:	f85d eb04 	ldr.w	lr, [sp], #4
 8008974:	b003      	add	sp, #12
 8008976:	4770      	bx	lr
 8008978:	20000024 	.word	0x20000024
 800897c:	ffff0208 	.word	0xffff0208

08008980 <strcat>:
 8008980:	4602      	mov	r2, r0
 8008982:	b510      	push	{r4, lr}
 8008984:	7814      	ldrb	r4, [r2, #0]
 8008986:	4613      	mov	r3, r2
 8008988:	3201      	adds	r2, #1
 800898a:	2c00      	cmp	r4, #0
 800898c:	d1fa      	bne.n	8008984 <strcat+0x4>
 800898e:	3b01      	subs	r3, #1
 8008990:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008994:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008998:	2a00      	cmp	r2, #0
 800899a:	d1f9      	bne.n	8008990 <strcat+0x10>
 800899c:	bd10      	pop	{r4, pc}

0800899e <strcpy>:
 800899e:	4603      	mov	r3, r0
 80089a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089a4:	f803 2b01 	strb.w	r2, [r3], #1
 80089a8:	2a00      	cmp	r2, #0
 80089aa:	d1f9      	bne.n	80089a0 <strcpy+0x2>
 80089ac:	4770      	bx	lr
	...

080089b0 <__malloc_lock>:
 80089b0:	4801      	ldr	r0, [pc, #4]	; (80089b8 <__malloc_lock+0x8>)
 80089b2:	f000 bafb 	b.w	8008fac <__retarget_lock_acquire_recursive>
 80089b6:	bf00      	nop
 80089b8:	20000518 	.word	0x20000518

080089bc <__malloc_unlock>:
 80089bc:	4801      	ldr	r0, [pc, #4]	; (80089c4 <__malloc_unlock+0x8>)
 80089be:	f000 baf6 	b.w	8008fae <__retarget_lock_release_recursive>
 80089c2:	bf00      	nop
 80089c4:	20000518 	.word	0x20000518

080089c8 <__ssputs_r>:
 80089c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	688e      	ldr	r6, [r1, #8]
 80089ce:	4682      	mov	sl, r0
 80089d0:	429e      	cmp	r6, r3
 80089d2:	460c      	mov	r4, r1
 80089d4:	4690      	mov	r8, r2
 80089d6:	461f      	mov	r7, r3
 80089d8:	d838      	bhi.n	8008a4c <__ssputs_r+0x84>
 80089da:	898a      	ldrh	r2, [r1, #12]
 80089dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80089e0:	d032      	beq.n	8008a48 <__ssputs_r+0x80>
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	6909      	ldr	r1, [r1, #16]
 80089e6:	3301      	adds	r3, #1
 80089e8:	eba5 0901 	sub.w	r9, r5, r1
 80089ec:	6965      	ldr	r5, [r4, #20]
 80089ee:	444b      	add	r3, r9
 80089f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089f8:	106d      	asrs	r5, r5, #1
 80089fa:	429d      	cmp	r5, r3
 80089fc:	bf38      	it	cc
 80089fe:	461d      	movcc	r5, r3
 8008a00:	0553      	lsls	r3, r2, #21
 8008a02:	d531      	bpl.n	8008a68 <__ssputs_r+0xa0>
 8008a04:	4629      	mov	r1, r5
 8008a06:	f7ff ff31 	bl	800886c <_malloc_r>
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	b950      	cbnz	r0, 8008a24 <__ssputs_r+0x5c>
 8008a0e:	230c      	movs	r3, #12
 8008a10:	f04f 30ff 	mov.w	r0, #4294967295
 8008a14:	f8ca 3000 	str.w	r3, [sl]
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a1e:	81a3      	strh	r3, [r4, #12]
 8008a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a24:	464a      	mov	r2, r9
 8008a26:	6921      	ldr	r1, [r4, #16]
 8008a28:	f7ff febe 	bl	80087a8 <memcpy>
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a36:	81a3      	strh	r3, [r4, #12]
 8008a38:	6126      	str	r6, [r4, #16]
 8008a3a:	444e      	add	r6, r9
 8008a3c:	6026      	str	r6, [r4, #0]
 8008a3e:	463e      	mov	r6, r7
 8008a40:	6165      	str	r5, [r4, #20]
 8008a42:	eba5 0509 	sub.w	r5, r5, r9
 8008a46:	60a5      	str	r5, [r4, #8]
 8008a48:	42be      	cmp	r6, r7
 8008a4a:	d900      	bls.n	8008a4e <__ssputs_r+0x86>
 8008a4c:	463e      	mov	r6, r7
 8008a4e:	4632      	mov	r2, r6
 8008a50:	4641      	mov	r1, r8
 8008a52:	6820      	ldr	r0, [r4, #0]
 8008a54:	f000 faba 	bl	8008fcc <memmove>
 8008a58:	68a3      	ldr	r3, [r4, #8]
 8008a5a:	6822      	ldr	r2, [r4, #0]
 8008a5c:	1b9b      	subs	r3, r3, r6
 8008a5e:	4432      	add	r2, r6
 8008a60:	2000      	movs	r0, #0
 8008a62:	60a3      	str	r3, [r4, #8]
 8008a64:	6022      	str	r2, [r4, #0]
 8008a66:	e7db      	b.n	8008a20 <__ssputs_r+0x58>
 8008a68:	462a      	mov	r2, r5
 8008a6a:	f000 fac9 	bl	8009000 <_realloc_r>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	d1e1      	bne.n	8008a38 <__ssputs_r+0x70>
 8008a74:	4650      	mov	r0, sl
 8008a76:	6921      	ldr	r1, [r4, #16]
 8008a78:	f7ff feac 	bl	80087d4 <_free_r>
 8008a7c:	e7c7      	b.n	8008a0e <__ssputs_r+0x46>
	...

08008a80 <_svfiprintf_r>:
 8008a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a84:	4698      	mov	r8, r3
 8008a86:	898b      	ldrh	r3, [r1, #12]
 8008a88:	4607      	mov	r7, r0
 8008a8a:	061b      	lsls	r3, r3, #24
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	4614      	mov	r4, r2
 8008a90:	b09d      	sub	sp, #116	; 0x74
 8008a92:	d50e      	bpl.n	8008ab2 <_svfiprintf_r+0x32>
 8008a94:	690b      	ldr	r3, [r1, #16]
 8008a96:	b963      	cbnz	r3, 8008ab2 <_svfiprintf_r+0x32>
 8008a98:	2140      	movs	r1, #64	; 0x40
 8008a9a:	f7ff fee7 	bl	800886c <_malloc_r>
 8008a9e:	6028      	str	r0, [r5, #0]
 8008aa0:	6128      	str	r0, [r5, #16]
 8008aa2:	b920      	cbnz	r0, 8008aae <_svfiprintf_r+0x2e>
 8008aa4:	230c      	movs	r3, #12
 8008aa6:	603b      	str	r3, [r7, #0]
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	e0d1      	b.n	8008c52 <_svfiprintf_r+0x1d2>
 8008aae:	2340      	movs	r3, #64	; 0x40
 8008ab0:	616b      	str	r3, [r5, #20]
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8008ab6:	2320      	movs	r3, #32
 8008ab8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008abc:	2330      	movs	r3, #48	; 0x30
 8008abe:	f04f 0901 	mov.w	r9, #1
 8008ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ac6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008c6c <_svfiprintf_r+0x1ec>
 8008aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008ace:	4623      	mov	r3, r4
 8008ad0:	469a      	mov	sl, r3
 8008ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ad6:	b10a      	cbz	r2, 8008adc <_svfiprintf_r+0x5c>
 8008ad8:	2a25      	cmp	r2, #37	; 0x25
 8008ada:	d1f9      	bne.n	8008ad0 <_svfiprintf_r+0x50>
 8008adc:	ebba 0b04 	subs.w	fp, sl, r4
 8008ae0:	d00b      	beq.n	8008afa <_svfiprintf_r+0x7a>
 8008ae2:	465b      	mov	r3, fp
 8008ae4:	4622      	mov	r2, r4
 8008ae6:	4629      	mov	r1, r5
 8008ae8:	4638      	mov	r0, r7
 8008aea:	f7ff ff6d 	bl	80089c8 <__ssputs_r>
 8008aee:	3001      	adds	r0, #1
 8008af0:	f000 80aa 	beq.w	8008c48 <_svfiprintf_r+0x1c8>
 8008af4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008af6:	445a      	add	r2, fp
 8008af8:	9209      	str	r2, [sp, #36]	; 0x24
 8008afa:	f89a 3000 	ldrb.w	r3, [sl]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 80a2 	beq.w	8008c48 <_svfiprintf_r+0x1c8>
 8008b04:	2300      	movs	r3, #0
 8008b06:	f04f 32ff 	mov.w	r2, #4294967295
 8008b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b0e:	f10a 0a01 	add.w	sl, sl, #1
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	9307      	str	r3, [sp, #28]
 8008b16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b1a:	931a      	str	r3, [sp, #104]	; 0x68
 8008b1c:	4654      	mov	r4, sl
 8008b1e:	2205      	movs	r2, #5
 8008b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b24:	4851      	ldr	r0, [pc, #324]	; (8008c6c <_svfiprintf_r+0x1ec>)
 8008b26:	f000 fa43 	bl	8008fb0 <memchr>
 8008b2a:	9a04      	ldr	r2, [sp, #16]
 8008b2c:	b9d8      	cbnz	r0, 8008b66 <_svfiprintf_r+0xe6>
 8008b2e:	06d0      	lsls	r0, r2, #27
 8008b30:	bf44      	itt	mi
 8008b32:	2320      	movmi	r3, #32
 8008b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b38:	0711      	lsls	r1, r2, #28
 8008b3a:	bf44      	itt	mi
 8008b3c:	232b      	movmi	r3, #43	; 0x2b
 8008b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b42:	f89a 3000 	ldrb.w	r3, [sl]
 8008b46:	2b2a      	cmp	r3, #42	; 0x2a
 8008b48:	d015      	beq.n	8008b76 <_svfiprintf_r+0xf6>
 8008b4a:	4654      	mov	r4, sl
 8008b4c:	2000      	movs	r0, #0
 8008b4e:	f04f 0c0a 	mov.w	ip, #10
 8008b52:	9a07      	ldr	r2, [sp, #28]
 8008b54:	4621      	mov	r1, r4
 8008b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b5a:	3b30      	subs	r3, #48	; 0x30
 8008b5c:	2b09      	cmp	r3, #9
 8008b5e:	d94e      	bls.n	8008bfe <_svfiprintf_r+0x17e>
 8008b60:	b1b0      	cbz	r0, 8008b90 <_svfiprintf_r+0x110>
 8008b62:	9207      	str	r2, [sp, #28]
 8008b64:	e014      	b.n	8008b90 <_svfiprintf_r+0x110>
 8008b66:	eba0 0308 	sub.w	r3, r0, r8
 8008b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	46a2      	mov	sl, r4
 8008b72:	9304      	str	r3, [sp, #16]
 8008b74:	e7d2      	b.n	8008b1c <_svfiprintf_r+0x9c>
 8008b76:	9b03      	ldr	r3, [sp, #12]
 8008b78:	1d19      	adds	r1, r3, #4
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	9103      	str	r1, [sp, #12]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	bfbb      	ittet	lt
 8008b82:	425b      	neglt	r3, r3
 8008b84:	f042 0202 	orrlt.w	r2, r2, #2
 8008b88:	9307      	strge	r3, [sp, #28]
 8008b8a:	9307      	strlt	r3, [sp, #28]
 8008b8c:	bfb8      	it	lt
 8008b8e:	9204      	strlt	r2, [sp, #16]
 8008b90:	7823      	ldrb	r3, [r4, #0]
 8008b92:	2b2e      	cmp	r3, #46	; 0x2e
 8008b94:	d10c      	bne.n	8008bb0 <_svfiprintf_r+0x130>
 8008b96:	7863      	ldrb	r3, [r4, #1]
 8008b98:	2b2a      	cmp	r3, #42	; 0x2a
 8008b9a:	d135      	bne.n	8008c08 <_svfiprintf_r+0x188>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	3402      	adds	r4, #2
 8008ba0:	1d1a      	adds	r2, r3, #4
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	9203      	str	r2, [sp, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	bfb8      	it	lt
 8008baa:	f04f 33ff 	movlt.w	r3, #4294967295
 8008bae:	9305      	str	r3, [sp, #20]
 8008bb0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008c7c <_svfiprintf_r+0x1fc>
 8008bb4:	2203      	movs	r2, #3
 8008bb6:	4650      	mov	r0, sl
 8008bb8:	7821      	ldrb	r1, [r4, #0]
 8008bba:	f000 f9f9 	bl	8008fb0 <memchr>
 8008bbe:	b140      	cbz	r0, 8008bd2 <_svfiprintf_r+0x152>
 8008bc0:	2340      	movs	r3, #64	; 0x40
 8008bc2:	eba0 000a 	sub.w	r0, r0, sl
 8008bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	3401      	adds	r4, #1
 8008bce:	4303      	orrs	r3, r0
 8008bd0:	9304      	str	r3, [sp, #16]
 8008bd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd6:	2206      	movs	r2, #6
 8008bd8:	4825      	ldr	r0, [pc, #148]	; (8008c70 <_svfiprintf_r+0x1f0>)
 8008bda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008bde:	f000 f9e7 	bl	8008fb0 <memchr>
 8008be2:	2800      	cmp	r0, #0
 8008be4:	d038      	beq.n	8008c58 <_svfiprintf_r+0x1d8>
 8008be6:	4b23      	ldr	r3, [pc, #140]	; (8008c74 <_svfiprintf_r+0x1f4>)
 8008be8:	bb1b      	cbnz	r3, 8008c32 <_svfiprintf_r+0x1b2>
 8008bea:	9b03      	ldr	r3, [sp, #12]
 8008bec:	3307      	adds	r3, #7
 8008bee:	f023 0307 	bic.w	r3, r3, #7
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	9303      	str	r3, [sp, #12]
 8008bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bf8:	4433      	add	r3, r6
 8008bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8008bfc:	e767      	b.n	8008ace <_svfiprintf_r+0x4e>
 8008bfe:	460c      	mov	r4, r1
 8008c00:	2001      	movs	r0, #1
 8008c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c06:	e7a5      	b.n	8008b54 <_svfiprintf_r+0xd4>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	f04f 0c0a 	mov.w	ip, #10
 8008c0e:	4619      	mov	r1, r3
 8008c10:	3401      	adds	r4, #1
 8008c12:	9305      	str	r3, [sp, #20]
 8008c14:	4620      	mov	r0, r4
 8008c16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c1a:	3a30      	subs	r2, #48	; 0x30
 8008c1c:	2a09      	cmp	r2, #9
 8008c1e:	d903      	bls.n	8008c28 <_svfiprintf_r+0x1a8>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0c5      	beq.n	8008bb0 <_svfiprintf_r+0x130>
 8008c24:	9105      	str	r1, [sp, #20]
 8008c26:	e7c3      	b.n	8008bb0 <_svfiprintf_r+0x130>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c30:	e7f0      	b.n	8008c14 <_svfiprintf_r+0x194>
 8008c32:	ab03      	add	r3, sp, #12
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	462a      	mov	r2, r5
 8008c38:	4638      	mov	r0, r7
 8008c3a:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <_svfiprintf_r+0x1f8>)
 8008c3c:	a904      	add	r1, sp, #16
 8008c3e:	f3af 8000 	nop.w
 8008c42:	1c42      	adds	r2, r0, #1
 8008c44:	4606      	mov	r6, r0
 8008c46:	d1d6      	bne.n	8008bf6 <_svfiprintf_r+0x176>
 8008c48:	89ab      	ldrh	r3, [r5, #12]
 8008c4a:	065b      	lsls	r3, r3, #25
 8008c4c:	f53f af2c 	bmi.w	8008aa8 <_svfiprintf_r+0x28>
 8008c50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c52:	b01d      	add	sp, #116	; 0x74
 8008c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c58:	ab03      	add	r3, sp, #12
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <_svfiprintf_r+0x1f8>)
 8008c62:	a904      	add	r1, sp, #16
 8008c64:	f000 f87c 	bl	8008d60 <_printf_i>
 8008c68:	e7eb      	b.n	8008c42 <_svfiprintf_r+0x1c2>
 8008c6a:	bf00      	nop
 8008c6c:	0800a1f6 	.word	0x0800a1f6
 8008c70:	0800a200 	.word	0x0800a200
 8008c74:	00000000 	.word	0x00000000
 8008c78:	080089c9 	.word	0x080089c9
 8008c7c:	0800a1fc 	.word	0x0800a1fc

08008c80 <_printf_common>:
 8008c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c84:	4616      	mov	r6, r2
 8008c86:	4699      	mov	r9, r3
 8008c88:	688a      	ldr	r2, [r1, #8]
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfb8      	it	lt
 8008c92:	4613      	movlt	r3, r2
 8008c94:	6033      	str	r3, [r6, #0]
 8008c96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c9a:	460c      	mov	r4, r1
 8008c9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ca0:	b10a      	cbz	r2, 8008ca6 <_printf_common+0x26>
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	6033      	str	r3, [r6, #0]
 8008ca6:	6823      	ldr	r3, [r4, #0]
 8008ca8:	0699      	lsls	r1, r3, #26
 8008caa:	bf42      	ittt	mi
 8008cac:	6833      	ldrmi	r3, [r6, #0]
 8008cae:	3302      	addmi	r3, #2
 8008cb0:	6033      	strmi	r3, [r6, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	f015 0506 	ands.w	r5, r5, #6
 8008cb8:	d106      	bne.n	8008cc8 <_printf_common+0x48>
 8008cba:	f104 0a19 	add.w	sl, r4, #25
 8008cbe:	68e3      	ldr	r3, [r4, #12]
 8008cc0:	6832      	ldr	r2, [r6, #0]
 8008cc2:	1a9b      	subs	r3, r3, r2
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	dc28      	bgt.n	8008d1a <_printf_common+0x9a>
 8008cc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ccc:	1e13      	subs	r3, r2, #0
 8008cce:	6822      	ldr	r2, [r4, #0]
 8008cd0:	bf18      	it	ne
 8008cd2:	2301      	movne	r3, #1
 8008cd4:	0692      	lsls	r2, r2, #26
 8008cd6:	d42d      	bmi.n	8008d34 <_printf_common+0xb4>
 8008cd8:	4649      	mov	r1, r9
 8008cda:	4638      	mov	r0, r7
 8008cdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ce0:	47c0      	blx	r8
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d020      	beq.n	8008d28 <_printf_common+0xa8>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	68e5      	ldr	r5, [r4, #12]
 8008cea:	f003 0306 	and.w	r3, r3, #6
 8008cee:	2b04      	cmp	r3, #4
 8008cf0:	bf18      	it	ne
 8008cf2:	2500      	movne	r5, #0
 8008cf4:	6832      	ldr	r2, [r6, #0]
 8008cf6:	f04f 0600 	mov.w	r6, #0
 8008cfa:	68a3      	ldr	r3, [r4, #8]
 8008cfc:	bf08      	it	eq
 8008cfe:	1aad      	subeq	r5, r5, r2
 8008d00:	6922      	ldr	r2, [r4, #16]
 8008d02:	bf08      	it	eq
 8008d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	bfc4      	itt	gt
 8008d0c:	1a9b      	subgt	r3, r3, r2
 8008d0e:	18ed      	addgt	r5, r5, r3
 8008d10:	341a      	adds	r4, #26
 8008d12:	42b5      	cmp	r5, r6
 8008d14:	d11a      	bne.n	8008d4c <_printf_common+0xcc>
 8008d16:	2000      	movs	r0, #0
 8008d18:	e008      	b.n	8008d2c <_printf_common+0xac>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	4652      	mov	r2, sl
 8008d1e:	4649      	mov	r1, r9
 8008d20:	4638      	mov	r0, r7
 8008d22:	47c0      	blx	r8
 8008d24:	3001      	adds	r0, #1
 8008d26:	d103      	bne.n	8008d30 <_printf_common+0xb0>
 8008d28:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d30:	3501      	adds	r5, #1
 8008d32:	e7c4      	b.n	8008cbe <_printf_common+0x3e>
 8008d34:	2030      	movs	r0, #48	; 0x30
 8008d36:	18e1      	adds	r1, r4, r3
 8008d38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d42:	4422      	add	r2, r4
 8008d44:	3302      	adds	r3, #2
 8008d46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d4a:	e7c5      	b.n	8008cd8 <_printf_common+0x58>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	4622      	mov	r2, r4
 8008d50:	4649      	mov	r1, r9
 8008d52:	4638      	mov	r0, r7
 8008d54:	47c0      	blx	r8
 8008d56:	3001      	adds	r0, #1
 8008d58:	d0e6      	beq.n	8008d28 <_printf_common+0xa8>
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7d9      	b.n	8008d12 <_printf_common+0x92>
	...

08008d60 <_printf_i>:
 8008d60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	7e27      	ldrb	r7, [r4, #24]
 8008d68:	4691      	mov	r9, r2
 8008d6a:	2f78      	cmp	r7, #120	; 0x78
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	469a      	mov	sl, r3
 8008d70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008d72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d76:	d807      	bhi.n	8008d88 <_printf_i+0x28>
 8008d78:	2f62      	cmp	r7, #98	; 0x62
 8008d7a:	d80a      	bhi.n	8008d92 <_printf_i+0x32>
 8008d7c:	2f00      	cmp	r7, #0
 8008d7e:	f000 80d9 	beq.w	8008f34 <_printf_i+0x1d4>
 8008d82:	2f58      	cmp	r7, #88	; 0x58
 8008d84:	f000 80a4 	beq.w	8008ed0 <_printf_i+0x170>
 8008d88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008d8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d90:	e03a      	b.n	8008e08 <_printf_i+0xa8>
 8008d92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d96:	2b15      	cmp	r3, #21
 8008d98:	d8f6      	bhi.n	8008d88 <_printf_i+0x28>
 8008d9a:	a001      	add	r0, pc, #4	; (adr r0, 8008da0 <_printf_i+0x40>)
 8008d9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008da0:	08008df9 	.word	0x08008df9
 8008da4:	08008e0d 	.word	0x08008e0d
 8008da8:	08008d89 	.word	0x08008d89
 8008dac:	08008d89 	.word	0x08008d89
 8008db0:	08008d89 	.word	0x08008d89
 8008db4:	08008d89 	.word	0x08008d89
 8008db8:	08008e0d 	.word	0x08008e0d
 8008dbc:	08008d89 	.word	0x08008d89
 8008dc0:	08008d89 	.word	0x08008d89
 8008dc4:	08008d89 	.word	0x08008d89
 8008dc8:	08008d89 	.word	0x08008d89
 8008dcc:	08008f1b 	.word	0x08008f1b
 8008dd0:	08008e3d 	.word	0x08008e3d
 8008dd4:	08008efd 	.word	0x08008efd
 8008dd8:	08008d89 	.word	0x08008d89
 8008ddc:	08008d89 	.word	0x08008d89
 8008de0:	08008f3d 	.word	0x08008f3d
 8008de4:	08008d89 	.word	0x08008d89
 8008de8:	08008e3d 	.word	0x08008e3d
 8008dec:	08008d89 	.word	0x08008d89
 8008df0:	08008d89 	.word	0x08008d89
 8008df4:	08008f05 	.word	0x08008f05
 8008df8:	680b      	ldr	r3, [r1, #0]
 8008dfa:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	600a      	str	r2, [r1, #0]
 8008e04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e0a4      	b.n	8008f56 <_printf_i+0x1f6>
 8008e0c:	6825      	ldr	r5, [r4, #0]
 8008e0e:	6808      	ldr	r0, [r1, #0]
 8008e10:	062e      	lsls	r6, r5, #24
 8008e12:	f100 0304 	add.w	r3, r0, #4
 8008e16:	d50a      	bpl.n	8008e2e <_printf_i+0xce>
 8008e18:	6805      	ldr	r5, [r0, #0]
 8008e1a:	600b      	str	r3, [r1, #0]
 8008e1c:	2d00      	cmp	r5, #0
 8008e1e:	da03      	bge.n	8008e28 <_printf_i+0xc8>
 8008e20:	232d      	movs	r3, #45	; 0x2d
 8008e22:	426d      	negs	r5, r5
 8008e24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e28:	230a      	movs	r3, #10
 8008e2a:	485e      	ldr	r0, [pc, #376]	; (8008fa4 <_printf_i+0x244>)
 8008e2c:	e019      	b.n	8008e62 <_printf_i+0x102>
 8008e2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008e32:	6805      	ldr	r5, [r0, #0]
 8008e34:	600b      	str	r3, [r1, #0]
 8008e36:	bf18      	it	ne
 8008e38:	b22d      	sxthne	r5, r5
 8008e3a:	e7ef      	b.n	8008e1c <_printf_i+0xbc>
 8008e3c:	680b      	ldr	r3, [r1, #0]
 8008e3e:	6825      	ldr	r5, [r4, #0]
 8008e40:	1d18      	adds	r0, r3, #4
 8008e42:	6008      	str	r0, [r1, #0]
 8008e44:	0628      	lsls	r0, r5, #24
 8008e46:	d501      	bpl.n	8008e4c <_printf_i+0xec>
 8008e48:	681d      	ldr	r5, [r3, #0]
 8008e4a:	e002      	b.n	8008e52 <_printf_i+0xf2>
 8008e4c:	0669      	lsls	r1, r5, #25
 8008e4e:	d5fb      	bpl.n	8008e48 <_printf_i+0xe8>
 8008e50:	881d      	ldrh	r5, [r3, #0]
 8008e52:	2f6f      	cmp	r7, #111	; 0x6f
 8008e54:	bf0c      	ite	eq
 8008e56:	2308      	moveq	r3, #8
 8008e58:	230a      	movne	r3, #10
 8008e5a:	4852      	ldr	r0, [pc, #328]	; (8008fa4 <_printf_i+0x244>)
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e62:	6866      	ldr	r6, [r4, #4]
 8008e64:	2e00      	cmp	r6, #0
 8008e66:	bfa8      	it	ge
 8008e68:	6821      	ldrge	r1, [r4, #0]
 8008e6a:	60a6      	str	r6, [r4, #8]
 8008e6c:	bfa4      	itt	ge
 8008e6e:	f021 0104 	bicge.w	r1, r1, #4
 8008e72:	6021      	strge	r1, [r4, #0]
 8008e74:	b90d      	cbnz	r5, 8008e7a <_printf_i+0x11a>
 8008e76:	2e00      	cmp	r6, #0
 8008e78:	d04d      	beq.n	8008f16 <_printf_i+0x1b6>
 8008e7a:	4616      	mov	r6, r2
 8008e7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e80:	fb03 5711 	mls	r7, r3, r1, r5
 8008e84:	5dc7      	ldrb	r7, [r0, r7]
 8008e86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e8a:	462f      	mov	r7, r5
 8008e8c:	42bb      	cmp	r3, r7
 8008e8e:	460d      	mov	r5, r1
 8008e90:	d9f4      	bls.n	8008e7c <_printf_i+0x11c>
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d10b      	bne.n	8008eae <_printf_i+0x14e>
 8008e96:	6823      	ldr	r3, [r4, #0]
 8008e98:	07df      	lsls	r7, r3, #31
 8008e9a:	d508      	bpl.n	8008eae <_printf_i+0x14e>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	6861      	ldr	r1, [r4, #4]
 8008ea0:	4299      	cmp	r1, r3
 8008ea2:	bfde      	ittt	le
 8008ea4:	2330      	movle	r3, #48	; 0x30
 8008ea6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008eaa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008eae:	1b92      	subs	r2, r2, r6
 8008eb0:	6122      	str	r2, [r4, #16]
 8008eb2:	464b      	mov	r3, r9
 8008eb4:	4621      	mov	r1, r4
 8008eb6:	4640      	mov	r0, r8
 8008eb8:	f8cd a000 	str.w	sl, [sp]
 8008ebc:	aa03      	add	r2, sp, #12
 8008ebe:	f7ff fedf 	bl	8008c80 <_printf_common>
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	d14c      	bne.n	8008f60 <_printf_i+0x200>
 8008ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8008eca:	b004      	add	sp, #16
 8008ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed0:	4834      	ldr	r0, [pc, #208]	; (8008fa4 <_printf_i+0x244>)
 8008ed2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ed6:	680e      	ldr	r6, [r1, #0]
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	f856 5b04 	ldr.w	r5, [r6], #4
 8008ede:	061f      	lsls	r7, r3, #24
 8008ee0:	600e      	str	r6, [r1, #0]
 8008ee2:	d514      	bpl.n	8008f0e <_printf_i+0x1ae>
 8008ee4:	07d9      	lsls	r1, r3, #31
 8008ee6:	bf44      	itt	mi
 8008ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8008eec:	6023      	strmi	r3, [r4, #0]
 8008eee:	b91d      	cbnz	r5, 8008ef8 <_printf_i+0x198>
 8008ef0:	6823      	ldr	r3, [r4, #0]
 8008ef2:	f023 0320 	bic.w	r3, r3, #32
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	2310      	movs	r3, #16
 8008efa:	e7af      	b.n	8008e5c <_printf_i+0xfc>
 8008efc:	6823      	ldr	r3, [r4, #0]
 8008efe:	f043 0320 	orr.w	r3, r3, #32
 8008f02:	6023      	str	r3, [r4, #0]
 8008f04:	2378      	movs	r3, #120	; 0x78
 8008f06:	4828      	ldr	r0, [pc, #160]	; (8008fa8 <_printf_i+0x248>)
 8008f08:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f0c:	e7e3      	b.n	8008ed6 <_printf_i+0x176>
 8008f0e:	065e      	lsls	r6, r3, #25
 8008f10:	bf48      	it	mi
 8008f12:	b2ad      	uxthmi	r5, r5
 8008f14:	e7e6      	b.n	8008ee4 <_printf_i+0x184>
 8008f16:	4616      	mov	r6, r2
 8008f18:	e7bb      	b.n	8008e92 <_printf_i+0x132>
 8008f1a:	680b      	ldr	r3, [r1, #0]
 8008f1c:	6826      	ldr	r6, [r4, #0]
 8008f1e:	1d1d      	adds	r5, r3, #4
 8008f20:	6960      	ldr	r0, [r4, #20]
 8008f22:	600d      	str	r5, [r1, #0]
 8008f24:	0635      	lsls	r5, r6, #24
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	d501      	bpl.n	8008f2e <_printf_i+0x1ce>
 8008f2a:	6018      	str	r0, [r3, #0]
 8008f2c:	e002      	b.n	8008f34 <_printf_i+0x1d4>
 8008f2e:	0671      	lsls	r1, r6, #25
 8008f30:	d5fb      	bpl.n	8008f2a <_printf_i+0x1ca>
 8008f32:	8018      	strh	r0, [r3, #0]
 8008f34:	2300      	movs	r3, #0
 8008f36:	4616      	mov	r6, r2
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	e7ba      	b.n	8008eb2 <_printf_i+0x152>
 8008f3c:	680b      	ldr	r3, [r1, #0]
 8008f3e:	1d1a      	adds	r2, r3, #4
 8008f40:	600a      	str	r2, [r1, #0]
 8008f42:	681e      	ldr	r6, [r3, #0]
 8008f44:	2100      	movs	r1, #0
 8008f46:	4630      	mov	r0, r6
 8008f48:	6862      	ldr	r2, [r4, #4]
 8008f4a:	f000 f831 	bl	8008fb0 <memchr>
 8008f4e:	b108      	cbz	r0, 8008f54 <_printf_i+0x1f4>
 8008f50:	1b80      	subs	r0, r0, r6
 8008f52:	6060      	str	r0, [r4, #4]
 8008f54:	6863      	ldr	r3, [r4, #4]
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	2300      	movs	r3, #0
 8008f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f5e:	e7a8      	b.n	8008eb2 <_printf_i+0x152>
 8008f60:	4632      	mov	r2, r6
 8008f62:	4649      	mov	r1, r9
 8008f64:	4640      	mov	r0, r8
 8008f66:	6923      	ldr	r3, [r4, #16]
 8008f68:	47d0      	blx	sl
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d0ab      	beq.n	8008ec6 <_printf_i+0x166>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	079b      	lsls	r3, r3, #30
 8008f72:	d413      	bmi.n	8008f9c <_printf_i+0x23c>
 8008f74:	68e0      	ldr	r0, [r4, #12]
 8008f76:	9b03      	ldr	r3, [sp, #12]
 8008f78:	4298      	cmp	r0, r3
 8008f7a:	bfb8      	it	lt
 8008f7c:	4618      	movlt	r0, r3
 8008f7e:	e7a4      	b.n	8008eca <_printf_i+0x16a>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4632      	mov	r2, r6
 8008f84:	4649      	mov	r1, r9
 8008f86:	4640      	mov	r0, r8
 8008f88:	47d0      	blx	sl
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d09b      	beq.n	8008ec6 <_printf_i+0x166>
 8008f8e:	3501      	adds	r5, #1
 8008f90:	68e3      	ldr	r3, [r4, #12]
 8008f92:	9903      	ldr	r1, [sp, #12]
 8008f94:	1a5b      	subs	r3, r3, r1
 8008f96:	42ab      	cmp	r3, r5
 8008f98:	dcf2      	bgt.n	8008f80 <_printf_i+0x220>
 8008f9a:	e7eb      	b.n	8008f74 <_printf_i+0x214>
 8008f9c:	2500      	movs	r5, #0
 8008f9e:	f104 0619 	add.w	r6, r4, #25
 8008fa2:	e7f5      	b.n	8008f90 <_printf_i+0x230>
 8008fa4:	0800a207 	.word	0x0800a207
 8008fa8:	0800a218 	.word	0x0800a218

08008fac <__retarget_lock_acquire_recursive>:
 8008fac:	4770      	bx	lr

08008fae <__retarget_lock_release_recursive>:
 8008fae:	4770      	bx	lr

08008fb0 <memchr>:
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	b2c9      	uxtb	r1, r1
 8008fb6:	4402      	add	r2, r0
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	4618      	mov	r0, r3
 8008fbc:	d101      	bne.n	8008fc2 <memchr+0x12>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e003      	b.n	8008fca <memchr+0x1a>
 8008fc2:	7804      	ldrb	r4, [r0, #0]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	428c      	cmp	r4, r1
 8008fc8:	d1f6      	bne.n	8008fb8 <memchr+0x8>
 8008fca:	bd10      	pop	{r4, pc}

08008fcc <memmove>:
 8008fcc:	4288      	cmp	r0, r1
 8008fce:	b510      	push	{r4, lr}
 8008fd0:	eb01 0402 	add.w	r4, r1, r2
 8008fd4:	d902      	bls.n	8008fdc <memmove+0x10>
 8008fd6:	4284      	cmp	r4, r0
 8008fd8:	4623      	mov	r3, r4
 8008fda:	d807      	bhi.n	8008fec <memmove+0x20>
 8008fdc:	1e43      	subs	r3, r0, #1
 8008fde:	42a1      	cmp	r1, r4
 8008fe0:	d008      	beq.n	8008ff4 <memmove+0x28>
 8008fe2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fe6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fea:	e7f8      	b.n	8008fde <memmove+0x12>
 8008fec:	4601      	mov	r1, r0
 8008fee:	4402      	add	r2, r0
 8008ff0:	428a      	cmp	r2, r1
 8008ff2:	d100      	bne.n	8008ff6 <memmove+0x2a>
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ffa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ffe:	e7f7      	b.n	8008ff0 <memmove+0x24>

08009000 <_realloc_r>:
 8009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009002:	4607      	mov	r7, r0
 8009004:	4614      	mov	r4, r2
 8009006:	460e      	mov	r6, r1
 8009008:	b921      	cbnz	r1, 8009014 <_realloc_r+0x14>
 800900a:	4611      	mov	r1, r2
 800900c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009010:	f7ff bc2c 	b.w	800886c <_malloc_r>
 8009014:	b922      	cbnz	r2, 8009020 <_realloc_r+0x20>
 8009016:	f7ff fbdd 	bl	80087d4 <_free_r>
 800901a:	4625      	mov	r5, r4
 800901c:	4628      	mov	r0, r5
 800901e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009020:	f000 f814 	bl	800904c <_malloc_usable_size_r>
 8009024:	42a0      	cmp	r0, r4
 8009026:	d20f      	bcs.n	8009048 <_realloc_r+0x48>
 8009028:	4621      	mov	r1, r4
 800902a:	4638      	mov	r0, r7
 800902c:	f7ff fc1e 	bl	800886c <_malloc_r>
 8009030:	4605      	mov	r5, r0
 8009032:	2800      	cmp	r0, #0
 8009034:	d0f2      	beq.n	800901c <_realloc_r+0x1c>
 8009036:	4631      	mov	r1, r6
 8009038:	4622      	mov	r2, r4
 800903a:	f7ff fbb5 	bl	80087a8 <memcpy>
 800903e:	4631      	mov	r1, r6
 8009040:	4638      	mov	r0, r7
 8009042:	f7ff fbc7 	bl	80087d4 <_free_r>
 8009046:	e7e9      	b.n	800901c <_realloc_r+0x1c>
 8009048:	4635      	mov	r5, r6
 800904a:	e7e7      	b.n	800901c <_realloc_r+0x1c>

0800904c <_malloc_usable_size_r>:
 800904c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009050:	1f18      	subs	r0, r3, #4
 8009052:	2b00      	cmp	r3, #0
 8009054:	bfbc      	itt	lt
 8009056:	580b      	ldrlt	r3, [r1, r0]
 8009058:	18c0      	addlt	r0, r0, r3
 800905a:	4770      	bx	lr

0800905c <pow>:
 800905c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009060:	461f      	mov	r7, r3
 8009062:	4680      	mov	r8, r0
 8009064:	4689      	mov	r9, r1
 8009066:	4616      	mov	r6, r2
 8009068:	f000 f8a6 	bl	80091b8 <__ieee754_pow>
 800906c:	4b4d      	ldr	r3, [pc, #308]	; (80091a4 <pow+0x148>)
 800906e:	4604      	mov	r4, r0
 8009070:	f993 3000 	ldrsb.w	r3, [r3]
 8009074:	460d      	mov	r5, r1
 8009076:	3301      	adds	r3, #1
 8009078:	d015      	beq.n	80090a6 <pow+0x4a>
 800907a:	4632      	mov	r2, r6
 800907c:	463b      	mov	r3, r7
 800907e:	4630      	mov	r0, r6
 8009080:	4639      	mov	r1, r7
 8009082:	f7f7 fcc3 	bl	8000a0c <__aeabi_dcmpun>
 8009086:	b970      	cbnz	r0, 80090a6 <pow+0x4a>
 8009088:	4642      	mov	r2, r8
 800908a:	464b      	mov	r3, r9
 800908c:	4640      	mov	r0, r8
 800908e:	4649      	mov	r1, r9
 8009090:	f7f7 fcbc 	bl	8000a0c <__aeabi_dcmpun>
 8009094:	2200      	movs	r2, #0
 8009096:	2300      	movs	r3, #0
 8009098:	b148      	cbz	r0, 80090ae <pow+0x52>
 800909a:	4630      	mov	r0, r6
 800909c:	4639      	mov	r1, r7
 800909e:	f7f7 fc83 	bl	80009a8 <__aeabi_dcmpeq>
 80090a2:	2800      	cmp	r0, #0
 80090a4:	d17b      	bne.n	800919e <pow+0x142>
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 fc79 	bl	80009a8 <__aeabi_dcmpeq>
 80090b6:	b1e0      	cbz	r0, 80090f2 <pow+0x96>
 80090b8:	2200      	movs	r2, #0
 80090ba:	2300      	movs	r3, #0
 80090bc:	4630      	mov	r0, r6
 80090be:	4639      	mov	r1, r7
 80090c0:	f7f7 fc72 	bl	80009a8 <__aeabi_dcmpeq>
 80090c4:	2800      	cmp	r0, #0
 80090c6:	d16a      	bne.n	800919e <pow+0x142>
 80090c8:	4630      	mov	r0, r6
 80090ca:	4639      	mov	r1, r7
 80090cc:	f000 fe39 	bl	8009d42 <finite>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	d0e8      	beq.n	80090a6 <pow+0x4a>
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	4630      	mov	r0, r6
 80090da:	4639      	mov	r1, r7
 80090dc:	f7f7 fc6e 	bl	80009bc <__aeabi_dcmplt>
 80090e0:	2800      	cmp	r0, #0
 80090e2:	d0e0      	beq.n	80090a6 <pow+0x4a>
 80090e4:	f7ff fb26 	bl	8008734 <__errno>
 80090e8:	2321      	movs	r3, #33	; 0x21
 80090ea:	2400      	movs	r4, #0
 80090ec:	6003      	str	r3, [r0, #0]
 80090ee:	4d2e      	ldr	r5, [pc, #184]	; (80091a8 <pow+0x14c>)
 80090f0:	e7d9      	b.n	80090a6 <pow+0x4a>
 80090f2:	4620      	mov	r0, r4
 80090f4:	4629      	mov	r1, r5
 80090f6:	f000 fe24 	bl	8009d42 <finite>
 80090fa:	bba8      	cbnz	r0, 8009168 <pow+0x10c>
 80090fc:	4640      	mov	r0, r8
 80090fe:	4649      	mov	r1, r9
 8009100:	f000 fe1f 	bl	8009d42 <finite>
 8009104:	b380      	cbz	r0, 8009168 <pow+0x10c>
 8009106:	4630      	mov	r0, r6
 8009108:	4639      	mov	r1, r7
 800910a:	f000 fe1a 	bl	8009d42 <finite>
 800910e:	b358      	cbz	r0, 8009168 <pow+0x10c>
 8009110:	4622      	mov	r2, r4
 8009112:	462b      	mov	r3, r5
 8009114:	4620      	mov	r0, r4
 8009116:	4629      	mov	r1, r5
 8009118:	f7f7 fc78 	bl	8000a0c <__aeabi_dcmpun>
 800911c:	b160      	cbz	r0, 8009138 <pow+0xdc>
 800911e:	f7ff fb09 	bl	8008734 <__errno>
 8009122:	2321      	movs	r3, #33	; 0x21
 8009124:	2200      	movs	r2, #0
 8009126:	6003      	str	r3, [r0, #0]
 8009128:	2300      	movs	r3, #0
 800912a:	4610      	mov	r0, r2
 800912c:	4619      	mov	r1, r3
 800912e:	f7f7 fafd 	bl	800072c <__aeabi_ddiv>
 8009132:	4604      	mov	r4, r0
 8009134:	460d      	mov	r5, r1
 8009136:	e7b6      	b.n	80090a6 <pow+0x4a>
 8009138:	f7ff fafc 	bl	8008734 <__errno>
 800913c:	2322      	movs	r3, #34	; 0x22
 800913e:	2200      	movs	r2, #0
 8009140:	6003      	str	r3, [r0, #0]
 8009142:	4649      	mov	r1, r9
 8009144:	2300      	movs	r3, #0
 8009146:	4640      	mov	r0, r8
 8009148:	f7f7 fc38 	bl	80009bc <__aeabi_dcmplt>
 800914c:	2400      	movs	r4, #0
 800914e:	b148      	cbz	r0, 8009164 <pow+0x108>
 8009150:	4630      	mov	r0, r6
 8009152:	4639      	mov	r1, r7
 8009154:	f000 fe02 	bl	8009d5c <rint>
 8009158:	4632      	mov	r2, r6
 800915a:	463b      	mov	r3, r7
 800915c:	f7f7 fc24 	bl	80009a8 <__aeabi_dcmpeq>
 8009160:	2800      	cmp	r0, #0
 8009162:	d0c4      	beq.n	80090ee <pow+0x92>
 8009164:	4d11      	ldr	r5, [pc, #68]	; (80091ac <pow+0x150>)
 8009166:	e79e      	b.n	80090a6 <pow+0x4a>
 8009168:	2200      	movs	r2, #0
 800916a:	2300      	movs	r3, #0
 800916c:	4620      	mov	r0, r4
 800916e:	4629      	mov	r1, r5
 8009170:	f7f7 fc1a 	bl	80009a8 <__aeabi_dcmpeq>
 8009174:	2800      	cmp	r0, #0
 8009176:	d096      	beq.n	80090a6 <pow+0x4a>
 8009178:	4640      	mov	r0, r8
 800917a:	4649      	mov	r1, r9
 800917c:	f000 fde1 	bl	8009d42 <finite>
 8009180:	2800      	cmp	r0, #0
 8009182:	d090      	beq.n	80090a6 <pow+0x4a>
 8009184:	4630      	mov	r0, r6
 8009186:	4639      	mov	r1, r7
 8009188:	f000 fddb 	bl	8009d42 <finite>
 800918c:	2800      	cmp	r0, #0
 800918e:	d08a      	beq.n	80090a6 <pow+0x4a>
 8009190:	f7ff fad0 	bl	8008734 <__errno>
 8009194:	2322      	movs	r3, #34	; 0x22
 8009196:	2400      	movs	r4, #0
 8009198:	2500      	movs	r5, #0
 800919a:	6003      	str	r3, [r0, #0]
 800919c:	e783      	b.n	80090a6 <pow+0x4a>
 800919e:	2400      	movs	r4, #0
 80091a0:	4d03      	ldr	r5, [pc, #12]	; (80091b0 <pow+0x154>)
 80091a2:	e780      	b.n	80090a6 <pow+0x4a>
 80091a4:	20000088 	.word	0x20000088
 80091a8:	fff00000 	.word	0xfff00000
 80091ac:	7ff00000 	.word	0x7ff00000
 80091b0:	3ff00000 	.word	0x3ff00000
 80091b4:	00000000 	.word	0x00000000

080091b8 <__ieee754_pow>:
 80091b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091bc:	b093      	sub	sp, #76	; 0x4c
 80091be:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091c2:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 80091c6:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80091ca:	ea55 0302 	orrs.w	r3, r5, r2
 80091ce:	4607      	mov	r7, r0
 80091d0:	4688      	mov	r8, r1
 80091d2:	f000 84bf 	beq.w	8009b54 <__ieee754_pow+0x99c>
 80091d6:	4b7e      	ldr	r3, [pc, #504]	; (80093d0 <__ieee754_pow+0x218>)
 80091d8:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80091dc:	429c      	cmp	r4, r3
 80091de:	4689      	mov	r9, r1
 80091e0:	4682      	mov	sl, r0
 80091e2:	dc09      	bgt.n	80091f8 <__ieee754_pow+0x40>
 80091e4:	d103      	bne.n	80091ee <__ieee754_pow+0x36>
 80091e6:	b978      	cbnz	r0, 8009208 <__ieee754_pow+0x50>
 80091e8:	42a5      	cmp	r5, r4
 80091ea:	dd02      	ble.n	80091f2 <__ieee754_pow+0x3a>
 80091ec:	e00c      	b.n	8009208 <__ieee754_pow+0x50>
 80091ee:	429d      	cmp	r5, r3
 80091f0:	dc02      	bgt.n	80091f8 <__ieee754_pow+0x40>
 80091f2:	429d      	cmp	r5, r3
 80091f4:	d10e      	bne.n	8009214 <__ieee754_pow+0x5c>
 80091f6:	b16a      	cbz	r2, 8009214 <__ieee754_pow+0x5c>
 80091f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80091fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009200:	ea54 030a 	orrs.w	r3, r4, sl
 8009204:	f000 84a6 	beq.w	8009b54 <__ieee754_pow+0x99c>
 8009208:	4872      	ldr	r0, [pc, #456]	; (80093d4 <__ieee754_pow+0x21c>)
 800920a:	b013      	add	sp, #76	; 0x4c
 800920c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009210:	f000 bd9e 	b.w	8009d50 <nan>
 8009214:	f1b9 0f00 	cmp.w	r9, #0
 8009218:	da39      	bge.n	800928e <__ieee754_pow+0xd6>
 800921a:	4b6f      	ldr	r3, [pc, #444]	; (80093d8 <__ieee754_pow+0x220>)
 800921c:	429d      	cmp	r5, r3
 800921e:	dc54      	bgt.n	80092ca <__ieee754_pow+0x112>
 8009220:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8009224:	429d      	cmp	r5, r3
 8009226:	f340 84a6 	ble.w	8009b76 <__ieee754_pow+0x9be>
 800922a:	152b      	asrs	r3, r5, #20
 800922c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009230:	2b14      	cmp	r3, #20
 8009232:	dd0f      	ble.n	8009254 <__ieee754_pow+0x9c>
 8009234:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009238:	fa22 f103 	lsr.w	r1, r2, r3
 800923c:	fa01 f303 	lsl.w	r3, r1, r3
 8009240:	4293      	cmp	r3, r2
 8009242:	f040 8498 	bne.w	8009b76 <__ieee754_pow+0x9be>
 8009246:	f001 0101 	and.w	r1, r1, #1
 800924a:	f1c1 0302 	rsb	r3, r1, #2
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	b182      	cbz	r2, 8009274 <__ieee754_pow+0xbc>
 8009252:	e05e      	b.n	8009312 <__ieee754_pow+0x15a>
 8009254:	2a00      	cmp	r2, #0
 8009256:	d15a      	bne.n	800930e <__ieee754_pow+0x156>
 8009258:	f1c3 0314 	rsb	r3, r3, #20
 800925c:	fa45 f103 	asr.w	r1, r5, r3
 8009260:	fa01 f303 	lsl.w	r3, r1, r3
 8009264:	42ab      	cmp	r3, r5
 8009266:	f040 8483 	bne.w	8009b70 <__ieee754_pow+0x9b8>
 800926a:	f001 0101 	and.w	r1, r1, #1
 800926e:	f1c1 0302 	rsb	r3, r1, #2
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	4b59      	ldr	r3, [pc, #356]	; (80093dc <__ieee754_pow+0x224>)
 8009276:	429d      	cmp	r5, r3
 8009278:	d130      	bne.n	80092dc <__ieee754_pow+0x124>
 800927a:	2e00      	cmp	r6, #0
 800927c:	f280 8474 	bge.w	8009b68 <__ieee754_pow+0x9b0>
 8009280:	463a      	mov	r2, r7
 8009282:	4643      	mov	r3, r8
 8009284:	2000      	movs	r0, #0
 8009286:	4955      	ldr	r1, [pc, #340]	; (80093dc <__ieee754_pow+0x224>)
 8009288:	f7f7 fa50 	bl	800072c <__aeabi_ddiv>
 800928c:	e02f      	b.n	80092ee <__ieee754_pow+0x136>
 800928e:	2300      	movs	r3, #0
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	2a00      	cmp	r2, #0
 8009294:	d13d      	bne.n	8009312 <__ieee754_pow+0x15a>
 8009296:	4b4e      	ldr	r3, [pc, #312]	; (80093d0 <__ieee754_pow+0x218>)
 8009298:	429d      	cmp	r5, r3
 800929a:	d1eb      	bne.n	8009274 <__ieee754_pow+0xbc>
 800929c:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80092a0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80092a4:	ea53 030a 	orrs.w	r3, r3, sl
 80092a8:	f000 8454 	beq.w	8009b54 <__ieee754_pow+0x99c>
 80092ac:	4b4c      	ldr	r3, [pc, #304]	; (80093e0 <__ieee754_pow+0x228>)
 80092ae:	429c      	cmp	r4, r3
 80092b0:	dd0d      	ble.n	80092ce <__ieee754_pow+0x116>
 80092b2:	2e00      	cmp	r6, #0
 80092b4:	f280 8454 	bge.w	8009b60 <__ieee754_pow+0x9a8>
 80092b8:	f04f 0b00 	mov.w	fp, #0
 80092bc:	f04f 0c00 	mov.w	ip, #0
 80092c0:	4658      	mov	r0, fp
 80092c2:	4661      	mov	r1, ip
 80092c4:	b013      	add	sp, #76	; 0x4c
 80092c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ca:	2302      	movs	r3, #2
 80092cc:	e7e0      	b.n	8009290 <__ieee754_pow+0xd8>
 80092ce:	2e00      	cmp	r6, #0
 80092d0:	daf2      	bge.n	80092b8 <__ieee754_pow+0x100>
 80092d2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 80092d6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 80092da:	e7f1      	b.n	80092c0 <__ieee754_pow+0x108>
 80092dc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80092e0:	d108      	bne.n	80092f4 <__ieee754_pow+0x13c>
 80092e2:	463a      	mov	r2, r7
 80092e4:	4643      	mov	r3, r8
 80092e6:	4638      	mov	r0, r7
 80092e8:	4641      	mov	r1, r8
 80092ea:	f7f7 f8f5 	bl	80004d8 <__aeabi_dmul>
 80092ee:	4683      	mov	fp, r0
 80092f0:	468c      	mov	ip, r1
 80092f2:	e7e5      	b.n	80092c0 <__ieee754_pow+0x108>
 80092f4:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <__ieee754_pow+0x22c>)
 80092f6:	429e      	cmp	r6, r3
 80092f8:	d10b      	bne.n	8009312 <__ieee754_pow+0x15a>
 80092fa:	f1b9 0f00 	cmp.w	r9, #0
 80092fe:	db08      	blt.n	8009312 <__ieee754_pow+0x15a>
 8009300:	4638      	mov	r0, r7
 8009302:	4641      	mov	r1, r8
 8009304:	b013      	add	sp, #76	; 0x4c
 8009306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800930a:	f000 bc6b 	b.w	8009be4 <__ieee754_sqrt>
 800930e:	2300      	movs	r3, #0
 8009310:	9300      	str	r3, [sp, #0]
 8009312:	4638      	mov	r0, r7
 8009314:	4641      	mov	r1, r8
 8009316:	f000 fd11 	bl	8009d3c <fabs>
 800931a:	4683      	mov	fp, r0
 800931c:	468c      	mov	ip, r1
 800931e:	f1ba 0f00 	cmp.w	sl, #0
 8009322:	d129      	bne.n	8009378 <__ieee754_pow+0x1c0>
 8009324:	b124      	cbz	r4, 8009330 <__ieee754_pow+0x178>
 8009326:	4b2d      	ldr	r3, [pc, #180]	; (80093dc <__ieee754_pow+0x224>)
 8009328:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800932c:	429a      	cmp	r2, r3
 800932e:	d123      	bne.n	8009378 <__ieee754_pow+0x1c0>
 8009330:	2e00      	cmp	r6, #0
 8009332:	da07      	bge.n	8009344 <__ieee754_pow+0x18c>
 8009334:	465a      	mov	r2, fp
 8009336:	4663      	mov	r3, ip
 8009338:	2000      	movs	r0, #0
 800933a:	4928      	ldr	r1, [pc, #160]	; (80093dc <__ieee754_pow+0x224>)
 800933c:	f7f7 f9f6 	bl	800072c <__aeabi_ddiv>
 8009340:	4683      	mov	fp, r0
 8009342:	468c      	mov	ip, r1
 8009344:	f1b9 0f00 	cmp.w	r9, #0
 8009348:	daba      	bge.n	80092c0 <__ieee754_pow+0x108>
 800934a:	9b00      	ldr	r3, [sp, #0]
 800934c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009350:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009354:	4323      	orrs	r3, r4
 8009356:	d108      	bne.n	800936a <__ieee754_pow+0x1b2>
 8009358:	465a      	mov	r2, fp
 800935a:	4663      	mov	r3, ip
 800935c:	4658      	mov	r0, fp
 800935e:	4661      	mov	r1, ip
 8009360:	f7f6 ff02 	bl	8000168 <__aeabi_dsub>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	e78e      	b.n	8009288 <__ieee754_pow+0xd0>
 800936a:	9b00      	ldr	r3, [sp, #0]
 800936c:	2b01      	cmp	r3, #1
 800936e:	d1a7      	bne.n	80092c0 <__ieee754_pow+0x108>
 8009370:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8009374:	469c      	mov	ip, r3
 8009376:	e7a3      	b.n	80092c0 <__ieee754_pow+0x108>
 8009378:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 800937c:	3b01      	subs	r3, #1
 800937e:	930c      	str	r3, [sp, #48]	; 0x30
 8009380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009382:	9b00      	ldr	r3, [sp, #0]
 8009384:	4313      	orrs	r3, r2
 8009386:	d104      	bne.n	8009392 <__ieee754_pow+0x1da>
 8009388:	463a      	mov	r2, r7
 800938a:	4643      	mov	r3, r8
 800938c:	4638      	mov	r0, r7
 800938e:	4641      	mov	r1, r8
 8009390:	e7e6      	b.n	8009360 <__ieee754_pow+0x1a8>
 8009392:	4b15      	ldr	r3, [pc, #84]	; (80093e8 <__ieee754_pow+0x230>)
 8009394:	429d      	cmp	r5, r3
 8009396:	f340 80f9 	ble.w	800958c <__ieee754_pow+0x3d4>
 800939a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800939e:	429d      	cmp	r5, r3
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <__ieee754_pow+0x228>)
 80093a2:	dd09      	ble.n	80093b8 <__ieee754_pow+0x200>
 80093a4:	429c      	cmp	r4, r3
 80093a6:	dc0c      	bgt.n	80093c2 <__ieee754_pow+0x20a>
 80093a8:	2e00      	cmp	r6, #0
 80093aa:	da85      	bge.n	80092b8 <__ieee754_pow+0x100>
 80093ac:	a306      	add	r3, pc, #24	; (adr r3, 80093c8 <__ieee754_pow+0x210>)
 80093ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b2:	4610      	mov	r0, r2
 80093b4:	4619      	mov	r1, r3
 80093b6:	e798      	b.n	80092ea <__ieee754_pow+0x132>
 80093b8:	429c      	cmp	r4, r3
 80093ba:	dbf5      	blt.n	80093a8 <__ieee754_pow+0x1f0>
 80093bc:	4b07      	ldr	r3, [pc, #28]	; (80093dc <__ieee754_pow+0x224>)
 80093be:	429c      	cmp	r4, r3
 80093c0:	dd14      	ble.n	80093ec <__ieee754_pow+0x234>
 80093c2:	2e00      	cmp	r6, #0
 80093c4:	dcf2      	bgt.n	80093ac <__ieee754_pow+0x1f4>
 80093c6:	e777      	b.n	80092b8 <__ieee754_pow+0x100>
 80093c8:	8800759c 	.word	0x8800759c
 80093cc:	7e37e43c 	.word	0x7e37e43c
 80093d0:	7ff00000 	.word	0x7ff00000
 80093d4:	0800a1fb 	.word	0x0800a1fb
 80093d8:	433fffff 	.word	0x433fffff
 80093dc:	3ff00000 	.word	0x3ff00000
 80093e0:	3fefffff 	.word	0x3fefffff
 80093e4:	3fe00000 	.word	0x3fe00000
 80093e8:	41e00000 	.word	0x41e00000
 80093ec:	4661      	mov	r1, ip
 80093ee:	2200      	movs	r2, #0
 80093f0:	4658      	mov	r0, fp
 80093f2:	4b61      	ldr	r3, [pc, #388]	; (8009578 <__ieee754_pow+0x3c0>)
 80093f4:	f7f6 feb8 	bl	8000168 <__aeabi_dsub>
 80093f8:	a355      	add	r3, pc, #340	; (adr r3, 8009550 <__ieee754_pow+0x398>)
 80093fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fe:	4604      	mov	r4, r0
 8009400:	460d      	mov	r5, r1
 8009402:	f7f7 f869 	bl	80004d8 <__aeabi_dmul>
 8009406:	a354      	add	r3, pc, #336	; (adr r3, 8009558 <__ieee754_pow+0x3a0>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	4620      	mov	r0, r4
 8009412:	4629      	mov	r1, r5
 8009414:	f7f7 f860 	bl	80004d8 <__aeabi_dmul>
 8009418:	2200      	movs	r2, #0
 800941a:	4682      	mov	sl, r0
 800941c:	468b      	mov	fp, r1
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	4b56      	ldr	r3, [pc, #344]	; (800957c <__ieee754_pow+0x3c4>)
 8009424:	f7f7 f858 	bl	80004d8 <__aeabi_dmul>
 8009428:	4602      	mov	r2, r0
 800942a:	460b      	mov	r3, r1
 800942c:	a14c      	add	r1, pc, #304	; (adr r1, 8009560 <__ieee754_pow+0x3a8>)
 800942e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009432:	f7f6 fe99 	bl	8000168 <__aeabi_dsub>
 8009436:	4622      	mov	r2, r4
 8009438:	462b      	mov	r3, r5
 800943a:	f7f7 f84d 	bl	80004d8 <__aeabi_dmul>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	2000      	movs	r0, #0
 8009444:	494e      	ldr	r1, [pc, #312]	; (8009580 <__ieee754_pow+0x3c8>)
 8009446:	f7f6 fe8f 	bl	8000168 <__aeabi_dsub>
 800944a:	4622      	mov	r2, r4
 800944c:	462b      	mov	r3, r5
 800944e:	4680      	mov	r8, r0
 8009450:	4689      	mov	r9, r1
 8009452:	4620      	mov	r0, r4
 8009454:	4629      	mov	r1, r5
 8009456:	f7f7 f83f 	bl	80004d8 <__aeabi_dmul>
 800945a:	4602      	mov	r2, r0
 800945c:	460b      	mov	r3, r1
 800945e:	4640      	mov	r0, r8
 8009460:	4649      	mov	r1, r9
 8009462:	f7f7 f839 	bl	80004d8 <__aeabi_dmul>
 8009466:	a340      	add	r3, pc, #256	; (adr r3, 8009568 <__ieee754_pow+0x3b0>)
 8009468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946c:	f7f7 f834 	bl	80004d8 <__aeabi_dmul>
 8009470:	4602      	mov	r2, r0
 8009472:	460b      	mov	r3, r1
 8009474:	4650      	mov	r0, sl
 8009476:	4659      	mov	r1, fp
 8009478:	f7f6 fe76 	bl	8000168 <__aeabi_dsub>
 800947c:	f04f 0a00 	mov.w	sl, #0
 8009480:	4602      	mov	r2, r0
 8009482:	460b      	mov	r3, r1
 8009484:	4604      	mov	r4, r0
 8009486:	460d      	mov	r5, r1
 8009488:	4630      	mov	r0, r6
 800948a:	4639      	mov	r1, r7
 800948c:	f7f6 fe6e 	bl	800016c <__adddf3>
 8009490:	4632      	mov	r2, r6
 8009492:	463b      	mov	r3, r7
 8009494:	4650      	mov	r0, sl
 8009496:	468b      	mov	fp, r1
 8009498:	f7f6 fe66 	bl	8000168 <__aeabi_dsub>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4620      	mov	r0, r4
 80094a2:	4629      	mov	r1, r5
 80094a4:	f7f6 fe60 	bl	8000168 <__aeabi_dsub>
 80094a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094b0:	3b01      	subs	r3, #1
 80094b2:	4313      	orrs	r3, r2
 80094b4:	f04f 0600 	mov.w	r6, #0
 80094b8:	f04f 0200 	mov.w	r2, #0
 80094bc:	bf0c      	ite	eq
 80094be:	4b31      	ldreq	r3, [pc, #196]	; (8009584 <__ieee754_pow+0x3cc>)
 80094c0:	4b2d      	ldrne	r3, [pc, #180]	; (8009578 <__ieee754_pow+0x3c0>)
 80094c2:	4604      	mov	r4, r0
 80094c4:	460d      	mov	r5, r1
 80094c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094ca:	e9cd 2300 	strd	r2, r3, [sp]
 80094ce:	4632      	mov	r2, r6
 80094d0:	463b      	mov	r3, r7
 80094d2:	f7f6 fe49 	bl	8000168 <__aeabi_dsub>
 80094d6:	4652      	mov	r2, sl
 80094d8:	465b      	mov	r3, fp
 80094da:	f7f6 fffd 	bl	80004d8 <__aeabi_dmul>
 80094de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094e2:	4680      	mov	r8, r0
 80094e4:	4689      	mov	r9, r1
 80094e6:	4620      	mov	r0, r4
 80094e8:	4629      	mov	r1, r5
 80094ea:	f7f6 fff5 	bl	80004d8 <__aeabi_dmul>
 80094ee:	4602      	mov	r2, r0
 80094f0:	460b      	mov	r3, r1
 80094f2:	4640      	mov	r0, r8
 80094f4:	4649      	mov	r1, r9
 80094f6:	f7f6 fe39 	bl	800016c <__adddf3>
 80094fa:	4632      	mov	r2, r6
 80094fc:	463b      	mov	r3, r7
 80094fe:	4680      	mov	r8, r0
 8009500:	4689      	mov	r9, r1
 8009502:	4650      	mov	r0, sl
 8009504:	4659      	mov	r1, fp
 8009506:	f7f6 ffe7 	bl	80004d8 <__aeabi_dmul>
 800950a:	4604      	mov	r4, r0
 800950c:	460d      	mov	r5, r1
 800950e:	460b      	mov	r3, r1
 8009510:	4602      	mov	r2, r0
 8009512:	4649      	mov	r1, r9
 8009514:	4640      	mov	r0, r8
 8009516:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800951a:	f7f6 fe27 	bl	800016c <__adddf3>
 800951e:	4b1a      	ldr	r3, [pc, #104]	; (8009588 <__ieee754_pow+0x3d0>)
 8009520:	4682      	mov	sl, r0
 8009522:	4299      	cmp	r1, r3
 8009524:	460f      	mov	r7, r1
 8009526:	460e      	mov	r6, r1
 8009528:	f340 82ed 	ble.w	8009b06 <__ieee754_pow+0x94e>
 800952c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009530:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009534:	4303      	orrs	r3, r0
 8009536:	f000 81e7 	beq.w	8009908 <__ieee754_pow+0x750>
 800953a:	a30d      	add	r3, pc, #52	; (adr r3, 8009570 <__ieee754_pow+0x3b8>)
 800953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009544:	f7f6 ffc8 	bl	80004d8 <__aeabi_dmul>
 8009548:	a309      	add	r3, pc, #36	; (adr r3, 8009570 <__ieee754_pow+0x3b8>)
 800954a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800954e:	e6cc      	b.n	80092ea <__ieee754_pow+0x132>
 8009550:	60000000 	.word	0x60000000
 8009554:	3ff71547 	.word	0x3ff71547
 8009558:	f85ddf44 	.word	0xf85ddf44
 800955c:	3e54ae0b 	.word	0x3e54ae0b
 8009560:	55555555 	.word	0x55555555
 8009564:	3fd55555 	.word	0x3fd55555
 8009568:	652b82fe 	.word	0x652b82fe
 800956c:	3ff71547 	.word	0x3ff71547
 8009570:	8800759c 	.word	0x8800759c
 8009574:	7e37e43c 	.word	0x7e37e43c
 8009578:	3ff00000 	.word	0x3ff00000
 800957c:	3fd00000 	.word	0x3fd00000
 8009580:	3fe00000 	.word	0x3fe00000
 8009584:	bff00000 	.word	0xbff00000
 8009588:	408fffff 	.word	0x408fffff
 800958c:	4bd4      	ldr	r3, [pc, #848]	; (80098e0 <__ieee754_pow+0x728>)
 800958e:	2200      	movs	r2, #0
 8009590:	ea09 0303 	and.w	r3, r9, r3
 8009594:	b943      	cbnz	r3, 80095a8 <__ieee754_pow+0x3f0>
 8009596:	4658      	mov	r0, fp
 8009598:	4661      	mov	r1, ip
 800959a:	4bd2      	ldr	r3, [pc, #840]	; (80098e4 <__ieee754_pow+0x72c>)
 800959c:	f7f6 ff9c 	bl	80004d8 <__aeabi_dmul>
 80095a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80095a4:	4683      	mov	fp, r0
 80095a6:	460c      	mov	r4, r1
 80095a8:	1523      	asrs	r3, r4, #20
 80095aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80095ae:	4413      	add	r3, r2
 80095b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80095b2:	4bcd      	ldr	r3, [pc, #820]	; (80098e8 <__ieee754_pow+0x730>)
 80095b4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80095b8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80095bc:	429c      	cmp	r4, r3
 80095be:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80095c2:	dd08      	ble.n	80095d6 <__ieee754_pow+0x41e>
 80095c4:	4bc9      	ldr	r3, [pc, #804]	; (80098ec <__ieee754_pow+0x734>)
 80095c6:	429c      	cmp	r4, r3
 80095c8:	f340 819c 	ble.w	8009904 <__ieee754_pow+0x74c>
 80095cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80095d2:	3301      	adds	r3, #1
 80095d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80095d6:	2600      	movs	r6, #0
 80095d8:	00f3      	lsls	r3, r6, #3
 80095da:	930d      	str	r3, [sp, #52]	; 0x34
 80095dc:	4bc4      	ldr	r3, [pc, #784]	; (80098f0 <__ieee754_pow+0x738>)
 80095de:	4658      	mov	r0, fp
 80095e0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095e8:	4629      	mov	r1, r5
 80095ea:	461a      	mov	r2, r3
 80095ec:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80095f0:	4623      	mov	r3, r4
 80095f2:	f7f6 fdb9 	bl	8000168 <__aeabi_dsub>
 80095f6:	46da      	mov	sl, fp
 80095f8:	462b      	mov	r3, r5
 80095fa:	4652      	mov	r2, sl
 80095fc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009600:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009604:	f7f6 fdb2 	bl	800016c <__adddf3>
 8009608:	4602      	mov	r2, r0
 800960a:	460b      	mov	r3, r1
 800960c:	2000      	movs	r0, #0
 800960e:	49b9      	ldr	r1, [pc, #740]	; (80098f4 <__ieee754_pow+0x73c>)
 8009610:	f7f7 f88c 	bl	800072c <__aeabi_ddiv>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800961c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8009620:	f7f6 ff5a 	bl	80004d8 <__aeabi_dmul>
 8009624:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009628:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800962c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009630:	2300      	movs	r3, #0
 8009632:	2200      	movs	r2, #0
 8009634:	46ab      	mov	fp, r5
 8009636:	106d      	asrs	r5, r5, #1
 8009638:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800963c:	9304      	str	r3, [sp, #16]
 800963e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009642:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009646:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 800964a:	4640      	mov	r0, r8
 800964c:	4649      	mov	r1, r9
 800964e:	4614      	mov	r4, r2
 8009650:	461d      	mov	r5, r3
 8009652:	f7f6 ff41 	bl	80004d8 <__aeabi_dmul>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800965e:	f7f6 fd83 	bl	8000168 <__aeabi_dsub>
 8009662:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009666:	4606      	mov	r6, r0
 8009668:	460f      	mov	r7, r1
 800966a:	4620      	mov	r0, r4
 800966c:	4629      	mov	r1, r5
 800966e:	f7f6 fd7b 	bl	8000168 <__aeabi_dsub>
 8009672:	4602      	mov	r2, r0
 8009674:	460b      	mov	r3, r1
 8009676:	4650      	mov	r0, sl
 8009678:	4659      	mov	r1, fp
 800967a:	f7f6 fd75 	bl	8000168 <__aeabi_dsub>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	f7f6 ff29 	bl	80004d8 <__aeabi_dmul>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4630      	mov	r0, r6
 800968c:	4639      	mov	r1, r7
 800968e:	f7f6 fd6b 	bl	8000168 <__aeabi_dsub>
 8009692:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009696:	f7f6 ff1f 	bl	80004d8 <__aeabi_dmul>
 800969a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800969e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80096a2:	4610      	mov	r0, r2
 80096a4:	4619      	mov	r1, r3
 80096a6:	f7f6 ff17 	bl	80004d8 <__aeabi_dmul>
 80096aa:	a37b      	add	r3, pc, #492	; (adr r3, 8009898 <__ieee754_pow+0x6e0>)
 80096ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b0:	4604      	mov	r4, r0
 80096b2:	460d      	mov	r5, r1
 80096b4:	f7f6 ff10 	bl	80004d8 <__aeabi_dmul>
 80096b8:	a379      	add	r3, pc, #484	; (adr r3, 80098a0 <__ieee754_pow+0x6e8>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	f7f6 fd55 	bl	800016c <__adddf3>
 80096c2:	4622      	mov	r2, r4
 80096c4:	462b      	mov	r3, r5
 80096c6:	f7f6 ff07 	bl	80004d8 <__aeabi_dmul>
 80096ca:	a377      	add	r3, pc, #476	; (adr r3, 80098a8 <__ieee754_pow+0x6f0>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fd4c 	bl	800016c <__adddf3>
 80096d4:	4622      	mov	r2, r4
 80096d6:	462b      	mov	r3, r5
 80096d8:	f7f6 fefe 	bl	80004d8 <__aeabi_dmul>
 80096dc:	a374      	add	r3, pc, #464	; (adr r3, 80098b0 <__ieee754_pow+0x6f8>)
 80096de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e2:	f7f6 fd43 	bl	800016c <__adddf3>
 80096e6:	4622      	mov	r2, r4
 80096e8:	462b      	mov	r3, r5
 80096ea:	f7f6 fef5 	bl	80004d8 <__aeabi_dmul>
 80096ee:	a372      	add	r3, pc, #456	; (adr r3, 80098b8 <__ieee754_pow+0x700>)
 80096f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f4:	f7f6 fd3a 	bl	800016c <__adddf3>
 80096f8:	4622      	mov	r2, r4
 80096fa:	462b      	mov	r3, r5
 80096fc:	f7f6 feec 	bl	80004d8 <__aeabi_dmul>
 8009700:	a36f      	add	r3, pc, #444	; (adr r3, 80098c0 <__ieee754_pow+0x708>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 fd31 	bl	800016c <__adddf3>
 800970a:	4622      	mov	r2, r4
 800970c:	4606      	mov	r6, r0
 800970e:	460f      	mov	r7, r1
 8009710:	462b      	mov	r3, r5
 8009712:	4620      	mov	r0, r4
 8009714:	4629      	mov	r1, r5
 8009716:	f7f6 fedf 	bl	80004d8 <__aeabi_dmul>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4630      	mov	r0, r6
 8009720:	4639      	mov	r1, r7
 8009722:	f7f6 fed9 	bl	80004d8 <__aeabi_dmul>
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800972e:	4642      	mov	r2, r8
 8009730:	464b      	mov	r3, r9
 8009732:	f7f6 fd1b 	bl	800016c <__adddf3>
 8009736:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800973a:	f7f6 fecd 	bl	80004d8 <__aeabi_dmul>
 800973e:	4622      	mov	r2, r4
 8009740:	462b      	mov	r3, r5
 8009742:	f7f6 fd13 	bl	800016c <__adddf3>
 8009746:	4642      	mov	r2, r8
 8009748:	4606      	mov	r6, r0
 800974a:	460f      	mov	r7, r1
 800974c:	464b      	mov	r3, r9
 800974e:	4640      	mov	r0, r8
 8009750:	4649      	mov	r1, r9
 8009752:	f7f6 fec1 	bl	80004d8 <__aeabi_dmul>
 8009756:	2200      	movs	r2, #0
 8009758:	4b67      	ldr	r3, [pc, #412]	; (80098f8 <__ieee754_pow+0x740>)
 800975a:	4682      	mov	sl, r0
 800975c:	468b      	mov	fp, r1
 800975e:	f7f6 fd05 	bl	800016c <__adddf3>
 8009762:	4632      	mov	r2, r6
 8009764:	463b      	mov	r3, r7
 8009766:	f7f6 fd01 	bl	800016c <__adddf3>
 800976a:	9c04      	ldr	r4, [sp, #16]
 800976c:	460d      	mov	r5, r1
 800976e:	4622      	mov	r2, r4
 8009770:	460b      	mov	r3, r1
 8009772:	4640      	mov	r0, r8
 8009774:	4649      	mov	r1, r9
 8009776:	f7f6 feaf 	bl	80004d8 <__aeabi_dmul>
 800977a:	2200      	movs	r2, #0
 800977c:	4680      	mov	r8, r0
 800977e:	4689      	mov	r9, r1
 8009780:	4620      	mov	r0, r4
 8009782:	4629      	mov	r1, r5
 8009784:	4b5c      	ldr	r3, [pc, #368]	; (80098f8 <__ieee754_pow+0x740>)
 8009786:	f7f6 fcef 	bl	8000168 <__aeabi_dsub>
 800978a:	4652      	mov	r2, sl
 800978c:	465b      	mov	r3, fp
 800978e:	f7f6 fceb 	bl	8000168 <__aeabi_dsub>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	4630      	mov	r0, r6
 8009798:	4639      	mov	r1, r7
 800979a:	f7f6 fce5 	bl	8000168 <__aeabi_dsub>
 800979e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80097a2:	f7f6 fe99 	bl	80004d8 <__aeabi_dmul>
 80097a6:	4622      	mov	r2, r4
 80097a8:	4606      	mov	r6, r0
 80097aa:	460f      	mov	r7, r1
 80097ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097b0:	462b      	mov	r3, r5
 80097b2:	f7f6 fe91 	bl	80004d8 <__aeabi_dmul>
 80097b6:	4602      	mov	r2, r0
 80097b8:	460b      	mov	r3, r1
 80097ba:	4630      	mov	r0, r6
 80097bc:	4639      	mov	r1, r7
 80097be:	f7f6 fcd5 	bl	800016c <__adddf3>
 80097c2:	4606      	mov	r6, r0
 80097c4:	460f      	mov	r7, r1
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	4640      	mov	r0, r8
 80097cc:	4649      	mov	r1, r9
 80097ce:	f7f6 fccd 	bl	800016c <__adddf3>
 80097d2:	a33d      	add	r3, pc, #244	; (adr r3, 80098c8 <__ieee754_pow+0x710>)
 80097d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097d8:	9c04      	ldr	r4, [sp, #16]
 80097da:	460d      	mov	r5, r1
 80097dc:	4620      	mov	r0, r4
 80097de:	f7f6 fe7b 	bl	80004d8 <__aeabi_dmul>
 80097e2:	4642      	mov	r2, r8
 80097e4:	464b      	mov	r3, r9
 80097e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80097ea:	4620      	mov	r0, r4
 80097ec:	4629      	mov	r1, r5
 80097ee:	f7f6 fcbb 	bl	8000168 <__aeabi_dsub>
 80097f2:	4602      	mov	r2, r0
 80097f4:	460b      	mov	r3, r1
 80097f6:	4630      	mov	r0, r6
 80097f8:	4639      	mov	r1, r7
 80097fa:	f7f6 fcb5 	bl	8000168 <__aeabi_dsub>
 80097fe:	a334      	add	r3, pc, #208	; (adr r3, 80098d0 <__ieee754_pow+0x718>)
 8009800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009804:	f7f6 fe68 	bl	80004d8 <__aeabi_dmul>
 8009808:	a333      	add	r3, pc, #204	; (adr r3, 80098d8 <__ieee754_pow+0x720>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	4606      	mov	r6, r0
 8009810:	460f      	mov	r7, r1
 8009812:	4620      	mov	r0, r4
 8009814:	4629      	mov	r1, r5
 8009816:	f7f6 fe5f 	bl	80004d8 <__aeabi_dmul>
 800981a:	4602      	mov	r2, r0
 800981c:	460b      	mov	r3, r1
 800981e:	4630      	mov	r0, r6
 8009820:	4639      	mov	r1, r7
 8009822:	f7f6 fca3 	bl	800016c <__adddf3>
 8009826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009828:	4b34      	ldr	r3, [pc, #208]	; (80098fc <__ieee754_pow+0x744>)
 800982a:	4413      	add	r3, r2
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f7f6 fc9c 	bl	800016c <__adddf3>
 8009834:	4680      	mov	r8, r0
 8009836:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8009838:	4689      	mov	r9, r1
 800983a:	f7f6 fde3 	bl	8000404 <__aeabi_i2d>
 800983e:	4604      	mov	r4, r0
 8009840:	460d      	mov	r5, r1
 8009842:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009844:	4b2e      	ldr	r3, [pc, #184]	; (8009900 <__ieee754_pow+0x748>)
 8009846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800984a:	4413      	add	r3, r2
 800984c:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009850:	4642      	mov	r2, r8
 8009852:	464b      	mov	r3, r9
 8009854:	f7f6 fc8a 	bl	800016c <__adddf3>
 8009858:	4632      	mov	r2, r6
 800985a:	463b      	mov	r3, r7
 800985c:	f7f6 fc86 	bl	800016c <__adddf3>
 8009860:	4622      	mov	r2, r4
 8009862:	462b      	mov	r3, r5
 8009864:	f7f6 fc82 	bl	800016c <__adddf3>
 8009868:	f8dd a010 	ldr.w	sl, [sp, #16]
 800986c:	4622      	mov	r2, r4
 800986e:	462b      	mov	r3, r5
 8009870:	4650      	mov	r0, sl
 8009872:	468b      	mov	fp, r1
 8009874:	f7f6 fc78 	bl	8000168 <__aeabi_dsub>
 8009878:	4632      	mov	r2, r6
 800987a:	463b      	mov	r3, r7
 800987c:	f7f6 fc74 	bl	8000168 <__aeabi_dsub>
 8009880:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009884:	f7f6 fc70 	bl	8000168 <__aeabi_dsub>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4640      	mov	r0, r8
 800988e:	4649      	mov	r1, r9
 8009890:	e608      	b.n	80094a4 <__ieee754_pow+0x2ec>
 8009892:	bf00      	nop
 8009894:	f3af 8000 	nop.w
 8009898:	4a454eef 	.word	0x4a454eef
 800989c:	3fca7e28 	.word	0x3fca7e28
 80098a0:	93c9db65 	.word	0x93c9db65
 80098a4:	3fcd864a 	.word	0x3fcd864a
 80098a8:	a91d4101 	.word	0xa91d4101
 80098ac:	3fd17460 	.word	0x3fd17460
 80098b0:	518f264d 	.word	0x518f264d
 80098b4:	3fd55555 	.word	0x3fd55555
 80098b8:	db6fabff 	.word	0xdb6fabff
 80098bc:	3fdb6db6 	.word	0x3fdb6db6
 80098c0:	33333303 	.word	0x33333303
 80098c4:	3fe33333 	.word	0x3fe33333
 80098c8:	e0000000 	.word	0xe0000000
 80098cc:	3feec709 	.word	0x3feec709
 80098d0:	dc3a03fd 	.word	0xdc3a03fd
 80098d4:	3feec709 	.word	0x3feec709
 80098d8:	145b01f5 	.word	0x145b01f5
 80098dc:	be3e2fe0 	.word	0xbe3e2fe0
 80098e0:	7ff00000 	.word	0x7ff00000
 80098e4:	43400000 	.word	0x43400000
 80098e8:	0003988e 	.word	0x0003988e
 80098ec:	000bb679 	.word	0x000bb679
 80098f0:	0800a230 	.word	0x0800a230
 80098f4:	3ff00000 	.word	0x3ff00000
 80098f8:	40080000 	.word	0x40080000
 80098fc:	0800a250 	.word	0x0800a250
 8009900:	0800a240 	.word	0x0800a240
 8009904:	2601      	movs	r6, #1
 8009906:	e667      	b.n	80095d8 <__ieee754_pow+0x420>
 8009908:	a39d      	add	r3, pc, #628	; (adr r3, 8009b80 <__ieee754_pow+0x9c8>)
 800990a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800990e:	4640      	mov	r0, r8
 8009910:	4649      	mov	r1, r9
 8009912:	f7f6 fc2b 	bl	800016c <__adddf3>
 8009916:	4622      	mov	r2, r4
 8009918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800991c:	462b      	mov	r3, r5
 800991e:	4650      	mov	r0, sl
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fc21 	bl	8000168 <__aeabi_dsub>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800992e:	f7f7 f863 	bl	80009f8 <__aeabi_dcmpgt>
 8009932:	2800      	cmp	r0, #0
 8009934:	f47f ae01 	bne.w	800953a <__ieee754_pow+0x382>
 8009938:	4aa5      	ldr	r2, [pc, #660]	; (8009bd0 <__ieee754_pow+0xa18>)
 800993a:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800993e:	4293      	cmp	r3, r2
 8009940:	f340 8103 	ble.w	8009b4a <__ieee754_pow+0x992>
 8009944:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009948:	2000      	movs	r0, #0
 800994a:	151b      	asrs	r3, r3, #20
 800994c:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009950:	fa4a f303 	asr.w	r3, sl, r3
 8009954:	4433      	add	r3, r6
 8009956:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800995a:	4f9e      	ldr	r7, [pc, #632]	; (8009bd4 <__ieee754_pow+0xa1c>)
 800995c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009960:	4117      	asrs	r7, r2
 8009962:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009966:	ea23 0107 	bic.w	r1, r3, r7
 800996a:	f1c2 0214 	rsb	r2, r2, #20
 800996e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009972:	460b      	mov	r3, r1
 8009974:	fa4a fa02 	asr.w	sl, sl, r2
 8009978:	2e00      	cmp	r6, #0
 800997a:	4602      	mov	r2, r0
 800997c:	4629      	mov	r1, r5
 800997e:	4620      	mov	r0, r4
 8009980:	bfb8      	it	lt
 8009982:	f1ca 0a00 	rsblt	sl, sl, #0
 8009986:	f7f6 fbef 	bl	8000168 <__aeabi_dsub>
 800998a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800998e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009992:	2400      	movs	r4, #0
 8009994:	4642      	mov	r2, r8
 8009996:	464b      	mov	r3, r9
 8009998:	f7f6 fbe8 	bl	800016c <__adddf3>
 800999c:	a37a      	add	r3, pc, #488	; (adr r3, 8009b88 <__ieee754_pow+0x9d0>)
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	4620      	mov	r0, r4
 80099a4:	460d      	mov	r5, r1
 80099a6:	f7f6 fd97 	bl	80004d8 <__aeabi_dmul>
 80099aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099ae:	4606      	mov	r6, r0
 80099b0:	460f      	mov	r7, r1
 80099b2:	4620      	mov	r0, r4
 80099b4:	4629      	mov	r1, r5
 80099b6:	f7f6 fbd7 	bl	8000168 <__aeabi_dsub>
 80099ba:	4602      	mov	r2, r0
 80099bc:	460b      	mov	r3, r1
 80099be:	4640      	mov	r0, r8
 80099c0:	4649      	mov	r1, r9
 80099c2:	f7f6 fbd1 	bl	8000168 <__aeabi_dsub>
 80099c6:	a372      	add	r3, pc, #456	; (adr r3, 8009b90 <__ieee754_pow+0x9d8>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fd84 	bl	80004d8 <__aeabi_dmul>
 80099d0:	a371      	add	r3, pc, #452	; (adr r3, 8009b98 <__ieee754_pow+0x9e0>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	4680      	mov	r8, r0
 80099d8:	4689      	mov	r9, r1
 80099da:	4620      	mov	r0, r4
 80099dc:	4629      	mov	r1, r5
 80099de:	f7f6 fd7b 	bl	80004d8 <__aeabi_dmul>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4640      	mov	r0, r8
 80099e8:	4649      	mov	r1, r9
 80099ea:	f7f6 fbbf 	bl	800016c <__adddf3>
 80099ee:	4604      	mov	r4, r0
 80099f0:	460d      	mov	r5, r1
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f6 fbb7 	bl	800016c <__adddf3>
 80099fe:	4632      	mov	r2, r6
 8009a00:	463b      	mov	r3, r7
 8009a02:	4680      	mov	r8, r0
 8009a04:	4689      	mov	r9, r1
 8009a06:	f7f6 fbaf 	bl	8000168 <__aeabi_dsub>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4620      	mov	r0, r4
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7f6 fba9 	bl	8000168 <__aeabi_dsub>
 8009a16:	4642      	mov	r2, r8
 8009a18:	4606      	mov	r6, r0
 8009a1a:	460f      	mov	r7, r1
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4649      	mov	r1, r9
 8009a22:	f7f6 fd59 	bl	80004d8 <__aeabi_dmul>
 8009a26:	a35e      	add	r3, pc, #376	; (adr r3, 8009ba0 <__ieee754_pow+0x9e8>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	460d      	mov	r5, r1
 8009a30:	f7f6 fd52 	bl	80004d8 <__aeabi_dmul>
 8009a34:	a35c      	add	r3, pc, #368	; (adr r3, 8009ba8 <__ieee754_pow+0x9f0>)
 8009a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3a:	f7f6 fb95 	bl	8000168 <__aeabi_dsub>
 8009a3e:	4622      	mov	r2, r4
 8009a40:	462b      	mov	r3, r5
 8009a42:	f7f6 fd49 	bl	80004d8 <__aeabi_dmul>
 8009a46:	a35a      	add	r3, pc, #360	; (adr r3, 8009bb0 <__ieee754_pow+0x9f8>)
 8009a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4c:	f7f6 fb8e 	bl	800016c <__adddf3>
 8009a50:	4622      	mov	r2, r4
 8009a52:	462b      	mov	r3, r5
 8009a54:	f7f6 fd40 	bl	80004d8 <__aeabi_dmul>
 8009a58:	a357      	add	r3, pc, #348	; (adr r3, 8009bb8 <__ieee754_pow+0xa00>)
 8009a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a5e:	f7f6 fb83 	bl	8000168 <__aeabi_dsub>
 8009a62:	4622      	mov	r2, r4
 8009a64:	462b      	mov	r3, r5
 8009a66:	f7f6 fd37 	bl	80004d8 <__aeabi_dmul>
 8009a6a:	a355      	add	r3, pc, #340	; (adr r3, 8009bc0 <__ieee754_pow+0xa08>)
 8009a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a70:	f7f6 fb7c 	bl	800016c <__adddf3>
 8009a74:	4622      	mov	r2, r4
 8009a76:	462b      	mov	r3, r5
 8009a78:	f7f6 fd2e 	bl	80004d8 <__aeabi_dmul>
 8009a7c:	4602      	mov	r2, r0
 8009a7e:	460b      	mov	r3, r1
 8009a80:	4640      	mov	r0, r8
 8009a82:	4649      	mov	r1, r9
 8009a84:	f7f6 fb70 	bl	8000168 <__aeabi_dsub>
 8009a88:	4604      	mov	r4, r0
 8009a8a:	460d      	mov	r5, r1
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	460b      	mov	r3, r1
 8009a90:	4640      	mov	r0, r8
 8009a92:	4649      	mov	r1, r9
 8009a94:	f7f6 fd20 	bl	80004d8 <__aeabi_dmul>
 8009a98:	2200      	movs	r2, #0
 8009a9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009aa2:	4620      	mov	r0, r4
 8009aa4:	4629      	mov	r1, r5
 8009aa6:	f7f6 fb5f 	bl	8000168 <__aeabi_dsub>
 8009aaa:	4602      	mov	r2, r0
 8009aac:	460b      	mov	r3, r1
 8009aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ab2:	f7f6 fe3b 	bl	800072c <__aeabi_ddiv>
 8009ab6:	4632      	mov	r2, r6
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	463b      	mov	r3, r7
 8009abe:	4640      	mov	r0, r8
 8009ac0:	4649      	mov	r1, r9
 8009ac2:	f7f6 fd09 	bl	80004d8 <__aeabi_dmul>
 8009ac6:	4632      	mov	r2, r6
 8009ac8:	463b      	mov	r3, r7
 8009aca:	f7f6 fb4f 	bl	800016c <__adddf3>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	4620      	mov	r0, r4
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	f7f6 fb47 	bl	8000168 <__aeabi_dsub>
 8009ada:	4642      	mov	r2, r8
 8009adc:	464b      	mov	r3, r9
 8009ade:	f7f6 fb43 	bl	8000168 <__aeabi_dsub>
 8009ae2:	4602      	mov	r2, r0
 8009ae4:	460b      	mov	r3, r1
 8009ae6:	2000      	movs	r0, #0
 8009ae8:	493b      	ldr	r1, [pc, #236]	; (8009bd8 <__ieee754_pow+0xa20>)
 8009aea:	f7f6 fb3d 	bl	8000168 <__aeabi_dsub>
 8009aee:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8009af2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009af6:	da2b      	bge.n	8009b50 <__ieee754_pow+0x998>
 8009af8:	4652      	mov	r2, sl
 8009afa:	f000 f9b9 	bl	8009e70 <scalbn>
 8009afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b02:	f7ff bbf2 	b.w	80092ea <__ieee754_pow+0x132>
 8009b06:	4b35      	ldr	r3, [pc, #212]	; (8009bdc <__ieee754_pow+0xa24>)
 8009b08:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8009b0c:	429f      	cmp	r7, r3
 8009b0e:	f77f af13 	ble.w	8009938 <__ieee754_pow+0x780>
 8009b12:	4b33      	ldr	r3, [pc, #204]	; (8009be0 <__ieee754_pow+0xa28>)
 8009b14:	440b      	add	r3, r1
 8009b16:	4303      	orrs	r3, r0
 8009b18:	d00b      	beq.n	8009b32 <__ieee754_pow+0x97a>
 8009b1a:	a32b      	add	r3, pc, #172	; (adr r3, 8009bc8 <__ieee754_pow+0xa10>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b24:	f7f6 fcd8 	bl	80004d8 <__aeabi_dmul>
 8009b28:	a327      	add	r3, pc, #156	; (adr r3, 8009bc8 <__ieee754_pow+0xa10>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	f7ff bbdc 	b.w	80092ea <__ieee754_pow+0x132>
 8009b32:	4622      	mov	r2, r4
 8009b34:	462b      	mov	r3, r5
 8009b36:	f7f6 fb17 	bl	8000168 <__aeabi_dsub>
 8009b3a:	4642      	mov	r2, r8
 8009b3c:	464b      	mov	r3, r9
 8009b3e:	f7f6 ff51 	bl	80009e4 <__aeabi_dcmpge>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f43f aef8 	beq.w	8009938 <__ieee754_pow+0x780>
 8009b48:	e7e7      	b.n	8009b1a <__ieee754_pow+0x962>
 8009b4a:	f04f 0a00 	mov.w	sl, #0
 8009b4e:	e71e      	b.n	800998e <__ieee754_pow+0x7d6>
 8009b50:	4621      	mov	r1, r4
 8009b52:	e7d4      	b.n	8009afe <__ieee754_pow+0x946>
 8009b54:	f04f 0b00 	mov.w	fp, #0
 8009b58:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009bd8 <__ieee754_pow+0xa20>
 8009b5c:	f7ff bbb0 	b.w	80092c0 <__ieee754_pow+0x108>
 8009b60:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8009b64:	f7ff bbac 	b.w	80092c0 <__ieee754_pow+0x108>
 8009b68:	4638      	mov	r0, r7
 8009b6a:	4641      	mov	r1, r8
 8009b6c:	f7ff bbbf 	b.w	80092ee <__ieee754_pow+0x136>
 8009b70:	9200      	str	r2, [sp, #0]
 8009b72:	f7ff bb7f 	b.w	8009274 <__ieee754_pow+0xbc>
 8009b76:	2300      	movs	r3, #0
 8009b78:	f7ff bb69 	b.w	800924e <__ieee754_pow+0x96>
 8009b7c:	f3af 8000 	nop.w
 8009b80:	652b82fe 	.word	0x652b82fe
 8009b84:	3c971547 	.word	0x3c971547
 8009b88:	00000000 	.word	0x00000000
 8009b8c:	3fe62e43 	.word	0x3fe62e43
 8009b90:	fefa39ef 	.word	0xfefa39ef
 8009b94:	3fe62e42 	.word	0x3fe62e42
 8009b98:	0ca86c39 	.word	0x0ca86c39
 8009b9c:	be205c61 	.word	0xbe205c61
 8009ba0:	72bea4d0 	.word	0x72bea4d0
 8009ba4:	3e663769 	.word	0x3e663769
 8009ba8:	c5d26bf1 	.word	0xc5d26bf1
 8009bac:	3ebbbd41 	.word	0x3ebbbd41
 8009bb0:	af25de2c 	.word	0xaf25de2c
 8009bb4:	3f11566a 	.word	0x3f11566a
 8009bb8:	16bebd93 	.word	0x16bebd93
 8009bbc:	3f66c16c 	.word	0x3f66c16c
 8009bc0:	5555553e 	.word	0x5555553e
 8009bc4:	3fc55555 	.word	0x3fc55555
 8009bc8:	c2f8f359 	.word	0xc2f8f359
 8009bcc:	01a56e1f 	.word	0x01a56e1f
 8009bd0:	3fe00000 	.word	0x3fe00000
 8009bd4:	000fffff 	.word	0x000fffff
 8009bd8:	3ff00000 	.word	0x3ff00000
 8009bdc:	4090cbff 	.word	0x4090cbff
 8009be0:	3f6f3400 	.word	0x3f6f3400

08009be4 <__ieee754_sqrt>:
 8009be4:	f8df c150 	ldr.w	ip, [pc, #336]	; 8009d38 <__ieee754_sqrt+0x154>
 8009be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bec:	ea3c 0c01 	bics.w	ip, ip, r1
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4606      	mov	r6, r0
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	460a      	mov	r2, r1
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	4604      	mov	r4, r0
 8009bfc:	d10e      	bne.n	8009c1c <__ieee754_sqrt+0x38>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	f7f6 fc6a 	bl	80004d8 <__aeabi_dmul>
 8009c04:	4602      	mov	r2, r0
 8009c06:	460b      	mov	r3, r1
 8009c08:	4630      	mov	r0, r6
 8009c0a:	4629      	mov	r1, r5
 8009c0c:	f7f6 faae 	bl	800016c <__adddf3>
 8009c10:	4606      	mov	r6, r0
 8009c12:	460d      	mov	r5, r1
 8009c14:	4630      	mov	r0, r6
 8009c16:	4629      	mov	r1, r5
 8009c18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	dc0d      	bgt.n	8009c3c <__ieee754_sqrt+0x58>
 8009c20:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8009c24:	ea5c 0707 	orrs.w	r7, ip, r7
 8009c28:	d0f4      	beq.n	8009c14 <__ieee754_sqrt+0x30>
 8009c2a:	b139      	cbz	r1, 8009c3c <__ieee754_sqrt+0x58>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f7f6 fa9b 	bl	8000168 <__aeabi_dsub>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	f7f6 fd79 	bl	800072c <__aeabi_ddiv>
 8009c3a:	e7e9      	b.n	8009c10 <__ieee754_sqrt+0x2c>
 8009c3c:	1512      	asrs	r2, r2, #20
 8009c3e:	d074      	beq.n	8009d2a <__ieee754_sqrt+0x146>
 8009c40:	2000      	movs	r0, #0
 8009c42:	07d5      	lsls	r5, r2, #31
 8009c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c48:	f443 1180 	orr.w	r1, r3, #1048576	; 0x100000
 8009c4c:	bf5e      	ittt	pl
 8009c4e:	0fe3      	lsrpl	r3, r4, #31
 8009c50:	0064      	lslpl	r4, r4, #1
 8009c52:	eb03 0141 	addpl.w	r1, r3, r1, lsl #1
 8009c56:	0fe3      	lsrs	r3, r4, #31
 8009c58:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009c5c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8009c60:	2516      	movs	r5, #22
 8009c62:	4601      	mov	r1, r0
 8009c64:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009c68:	1076      	asrs	r6, r6, #1
 8009c6a:	0064      	lsls	r4, r4, #1
 8009c6c:	188f      	adds	r7, r1, r2
 8009c6e:	429f      	cmp	r7, r3
 8009c70:	bfde      	ittt	le
 8009c72:	1bdb      	suble	r3, r3, r7
 8009c74:	18b9      	addle	r1, r7, r2
 8009c76:	1880      	addle	r0, r0, r2
 8009c78:	005b      	lsls	r3, r3, #1
 8009c7a:	3d01      	subs	r5, #1
 8009c7c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009c80:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009c84:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009c88:	d1f0      	bne.n	8009c6c <__ieee754_sqrt+0x88>
 8009c8a:	462a      	mov	r2, r5
 8009c8c:	f04f 0e20 	mov.w	lr, #32
 8009c90:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8009c94:	428b      	cmp	r3, r1
 8009c96:	eb07 0c05 	add.w	ip, r7, r5
 8009c9a:	dc02      	bgt.n	8009ca2 <__ieee754_sqrt+0xbe>
 8009c9c:	d113      	bne.n	8009cc6 <__ieee754_sqrt+0xe2>
 8009c9e:	45a4      	cmp	ip, r4
 8009ca0:	d811      	bhi.n	8009cc6 <__ieee754_sqrt+0xe2>
 8009ca2:	f1bc 0f00 	cmp.w	ip, #0
 8009ca6:	eb0c 0507 	add.w	r5, ip, r7
 8009caa:	da43      	bge.n	8009d34 <__ieee754_sqrt+0x150>
 8009cac:	2d00      	cmp	r5, #0
 8009cae:	db41      	blt.n	8009d34 <__ieee754_sqrt+0x150>
 8009cb0:	f101 0801 	add.w	r8, r1, #1
 8009cb4:	1a5b      	subs	r3, r3, r1
 8009cb6:	4641      	mov	r1, r8
 8009cb8:	45a4      	cmp	ip, r4
 8009cba:	bf88      	it	hi
 8009cbc:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009cc0:	eba4 040c 	sub.w	r4, r4, ip
 8009cc4:	443a      	add	r2, r7
 8009cc6:	005b      	lsls	r3, r3, #1
 8009cc8:	f1be 0e01 	subs.w	lr, lr, #1
 8009ccc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8009cd0:	ea4f 0757 	mov.w	r7, r7, lsr #1
 8009cd4:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8009cd8:	d1dc      	bne.n	8009c94 <__ieee754_sqrt+0xb0>
 8009cda:	4323      	orrs	r3, r4
 8009cdc:	d006      	beq.n	8009cec <__ieee754_sqrt+0x108>
 8009cde:	1c54      	adds	r4, r2, #1
 8009ce0:	bf0b      	itete	eq
 8009ce2:	4672      	moveq	r2, lr
 8009ce4:	3201      	addne	r2, #1
 8009ce6:	3001      	addeq	r0, #1
 8009ce8:	f022 0201 	bicne.w	r2, r2, #1
 8009cec:	1043      	asrs	r3, r0, #1
 8009cee:	07c1      	lsls	r1, r0, #31
 8009cf0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8009cf4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009cf8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009cfc:	bf48      	it	mi
 8009cfe:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8009d02:	4610      	mov	r0, r2
 8009d04:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 8009d08:	e782      	b.n	8009c10 <__ieee754_sqrt+0x2c>
 8009d0a:	0ae3      	lsrs	r3, r4, #11
 8009d0c:	3915      	subs	r1, #21
 8009d0e:	0564      	lsls	r4, r4, #21
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d0fa      	beq.n	8009d0a <__ieee754_sqrt+0x126>
 8009d14:	02de      	lsls	r6, r3, #11
 8009d16:	d50a      	bpl.n	8009d2e <__ieee754_sqrt+0x14a>
 8009d18:	f1c2 0020 	rsb	r0, r2, #32
 8009d1c:	fa24 f000 	lsr.w	r0, r4, r0
 8009d20:	1e55      	subs	r5, r2, #1
 8009d22:	4094      	lsls	r4, r2
 8009d24:	4303      	orrs	r3, r0
 8009d26:	1b4a      	subs	r2, r1, r5
 8009d28:	e78a      	b.n	8009c40 <__ieee754_sqrt+0x5c>
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	e7f0      	b.n	8009d10 <__ieee754_sqrt+0x12c>
 8009d2e:	005b      	lsls	r3, r3, #1
 8009d30:	3201      	adds	r2, #1
 8009d32:	e7ef      	b.n	8009d14 <__ieee754_sqrt+0x130>
 8009d34:	4688      	mov	r8, r1
 8009d36:	e7bd      	b.n	8009cb4 <__ieee754_sqrt+0xd0>
 8009d38:	7ff00000 	.word	0x7ff00000

08009d3c <fabs>:
 8009d3c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009d40:	4770      	bx	lr

08009d42 <finite>:
 8009d42:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8009d46:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009d4a:	0fc0      	lsrs	r0, r0, #31
 8009d4c:	4770      	bx	lr
	...

08009d50 <nan>:
 8009d50:	2000      	movs	r0, #0
 8009d52:	4901      	ldr	r1, [pc, #4]	; (8009d58 <nan+0x8>)
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	7ff80000 	.word	0x7ff80000

08009d5c <rint>:
 8009d5c:	f3c1 5c0a 	ubfx	ip, r1, #20, #11
 8009d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d62:	f2ac 37ff 	subw	r7, ip, #1023	; 0x3ff
 8009d66:	2f13      	cmp	r7, #19
 8009d68:	4602      	mov	r2, r0
 8009d6a:	460b      	mov	r3, r1
 8009d6c:	460c      	mov	r4, r1
 8009d6e:	4605      	mov	r5, r0
 8009d70:	ea4f 76d1 	mov.w	r6, r1, lsr #31
 8009d74:	dc59      	bgt.n	8009e2a <rint+0xce>
 8009d76:	2f00      	cmp	r7, #0
 8009d78:	da2a      	bge.n	8009dd0 <rint+0x74>
 8009d7a:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009d7e:	4301      	orrs	r1, r0
 8009d80:	d022      	beq.n	8009dc8 <rint+0x6c>
 8009d82:	f3c3 0113 	ubfx	r1, r3, #0, #20
 8009d86:	4301      	orrs	r1, r0
 8009d88:	424d      	negs	r5, r1
 8009d8a:	430d      	orrs	r5, r1
 8009d8c:	4936      	ldr	r1, [pc, #216]	; (8009e68 <rint+0x10c>)
 8009d8e:	0c5c      	lsrs	r4, r3, #17
 8009d90:	0b2d      	lsrs	r5, r5, #12
 8009d92:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8009d96:	0464      	lsls	r4, r4, #17
 8009d98:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009d9c:	ea45 0304 	orr.w	r3, r5, r4
 8009da0:	e9d1 4500 	ldrd	r4, r5, [r1]
 8009da4:	4620      	mov	r0, r4
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 f9e0 	bl	800016c <__adddf3>
 8009dac:	e9cd 0100 	strd	r0, r1, [sp]
 8009db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009db4:	462b      	mov	r3, r5
 8009db6:	4622      	mov	r2, r4
 8009db8:	f7f6 f9d6 	bl	8000168 <__aeabi_dsub>
 8009dbc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009dc0:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	460b      	mov	r3, r1
 8009dc8:	4610      	mov	r0, r2
 8009dca:	4619      	mov	r1, r3
 8009dcc:	b003      	add	sp, #12
 8009dce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009dd0:	4926      	ldr	r1, [pc, #152]	; (8009e6c <rint+0x110>)
 8009dd2:	4139      	asrs	r1, r7
 8009dd4:	ea03 0001 	and.w	r0, r3, r1
 8009dd8:	4310      	orrs	r0, r2
 8009dda:	d0f5      	beq.n	8009dc8 <rint+0x6c>
 8009ddc:	084b      	lsrs	r3, r1, #1
 8009dde:	ea04 0151 	and.w	r1, r4, r1, lsr #1
 8009de2:	ea52 0501 	orrs.w	r5, r2, r1
 8009de6:	d00c      	beq.n	8009e02 <rint+0xa6>
 8009de8:	ea24 0303 	bic.w	r3, r4, r3
 8009dec:	f44f 2480 	mov.w	r4, #262144	; 0x40000
 8009df0:	2f13      	cmp	r7, #19
 8009df2:	bf0c      	ite	eq
 8009df4:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8009df8:	2500      	movne	r5, #0
 8009dfa:	fa44 f707 	asr.w	r7, r4, r7
 8009dfe:	ea43 0407 	orr.w	r4, r3, r7
 8009e02:	4919      	ldr	r1, [pc, #100]	; (8009e68 <rint+0x10c>)
 8009e04:	4623      	mov	r3, r4
 8009e06:	eb01 06c6 	add.w	r6, r1, r6, lsl #3
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	e9d6 4500 	ldrd	r4, r5, [r6]
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 f9aa 	bl	800016c <__adddf3>
 8009e18:	e9cd 0100 	strd	r0, r1, [sp]
 8009e1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e20:	4622      	mov	r2, r4
 8009e22:	462b      	mov	r3, r5
 8009e24:	f7f6 f9a0 	bl	8000168 <__aeabi_dsub>
 8009e28:	e7cc      	b.n	8009dc4 <rint+0x68>
 8009e2a:	2f33      	cmp	r7, #51	; 0x33
 8009e2c:	dd05      	ble.n	8009e3a <rint+0xde>
 8009e2e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8009e32:	d1c9      	bne.n	8009dc8 <rint+0x6c>
 8009e34:	f7f6 f99a 	bl	800016c <__adddf3>
 8009e38:	e7c4      	b.n	8009dc4 <rint+0x68>
 8009e3a:	f04f 31ff 	mov.w	r1, #4294967295
 8009e3e:	f2ac 4c13 	subw	ip, ip, #1043	; 0x413
 8009e42:	fa21 f10c 	lsr.w	r1, r1, ip
 8009e46:	4208      	tst	r0, r1
 8009e48:	d0be      	beq.n	8009dc8 <rint+0x6c>
 8009e4a:	ea10 0251 	ands.w	r2, r0, r1, lsr #1
 8009e4e:	bf18      	it	ne
 8009e50:	f04f 4580 	movne.w	r5, #1073741824	; 0x40000000
 8009e54:	ea4f 0351 	mov.w	r3, r1, lsr #1
 8009e58:	bf1e      	ittt	ne
 8009e5a:	ea20 0303 	bicne.w	r3, r0, r3
 8009e5e:	fa45 fc0c 	asrne.w	ip, r5, ip
 8009e62:	ea43 050c 	orrne.w	r5, r3, ip
 8009e66:	e7cc      	b.n	8009e02 <rint+0xa6>
 8009e68:	0800a260 	.word	0x0800a260
 8009e6c:	000fffff 	.word	0x000fffff

08009e70 <scalbn>:
 8009e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e72:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8009e76:	4604      	mov	r4, r0
 8009e78:	460d      	mov	r5, r1
 8009e7a:	4617      	mov	r7, r2
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	b996      	cbnz	r6, 8009ea6 <scalbn+0x36>
 8009e80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009e84:	4303      	orrs	r3, r0
 8009e86:	d039      	beq.n	8009efc <scalbn+0x8c>
 8009e88:	4b35      	ldr	r3, [pc, #212]	; (8009f60 <scalbn+0xf0>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f7f6 fb24 	bl	80004d8 <__aeabi_dmul>
 8009e90:	4b34      	ldr	r3, [pc, #208]	; (8009f64 <scalbn+0xf4>)
 8009e92:	4604      	mov	r4, r0
 8009e94:	429f      	cmp	r7, r3
 8009e96:	460d      	mov	r5, r1
 8009e98:	da0f      	bge.n	8009eba <scalbn+0x4a>
 8009e9a:	a32d      	add	r3, pc, #180	; (adr r3, 8009f50 <scalbn+0xe0>)
 8009e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ea0:	f7f6 fb1a 	bl	80004d8 <__aeabi_dmul>
 8009ea4:	e006      	b.n	8009eb4 <scalbn+0x44>
 8009ea6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009eaa:	4296      	cmp	r6, r2
 8009eac:	d10a      	bne.n	8009ec4 <scalbn+0x54>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	f7f6 f95c 	bl	800016c <__adddf3>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	460d      	mov	r5, r1
 8009eb8:	e020      	b.n	8009efc <scalbn+0x8c>
 8009eba:	460b      	mov	r3, r1
 8009ebc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009ec0:	f1a1 0636 	sub.w	r6, r1, #54	; 0x36
 8009ec4:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8009ec8:	19b9      	adds	r1, r7, r6
 8009eca:	4291      	cmp	r1, r2
 8009ecc:	dd0e      	ble.n	8009eec <scalbn+0x7c>
 8009ece:	a322      	add	r3, pc, #136	; (adr r3, 8009f58 <scalbn+0xe8>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 8009ed8:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8009edc:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8009ee0:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8009ee4:	4820      	ldr	r0, [pc, #128]	; (8009f68 <scalbn+0xf8>)
 8009ee6:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 8009eea:	e7d9      	b.n	8009ea0 <scalbn+0x30>
 8009eec:	2900      	cmp	r1, #0
 8009eee:	dd08      	ble.n	8009f02 <scalbn+0x92>
 8009ef0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009ef4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009ef8:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009efc:	4620      	mov	r0, r4
 8009efe:	4629      	mov	r1, r5
 8009f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f02:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8009f06:	da16      	bge.n	8009f36 <scalbn+0xc6>
 8009f08:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009f0c:	429f      	cmp	r7, r3
 8009f0e:	ea4f 73d5 	mov.w	r3, r5, lsr #31
 8009f12:	dd08      	ble.n	8009f26 <scalbn+0xb6>
 8009f14:	4c15      	ldr	r4, [pc, #84]	; (8009f6c <scalbn+0xfc>)
 8009f16:	4814      	ldr	r0, [pc, #80]	; (8009f68 <scalbn+0xf8>)
 8009f18:	f363 74df 	bfi	r4, r3, #31, #1
 8009f1c:	a30e      	add	r3, pc, #56	; (adr r3, 8009f58 <scalbn+0xe8>)
 8009f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f22:	4621      	mov	r1, r4
 8009f24:	e7bc      	b.n	8009ea0 <scalbn+0x30>
 8009f26:	4c12      	ldr	r4, [pc, #72]	; (8009f70 <scalbn+0x100>)
 8009f28:	4812      	ldr	r0, [pc, #72]	; (8009f74 <scalbn+0x104>)
 8009f2a:	f363 74df 	bfi	r4, r3, #31, #1
 8009f2e:	a308      	add	r3, pc, #32	; (adr r3, 8009f50 <scalbn+0xe0>)
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	e7f5      	b.n	8009f22 <scalbn+0xb2>
 8009f36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009f3a:	3136      	adds	r1, #54	; 0x36
 8009f3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009f40:	ea43 5501 	orr.w	r5, r3, r1, lsl #20
 8009f44:	4620      	mov	r0, r4
 8009f46:	4629      	mov	r1, r5
 8009f48:	2200      	movs	r2, #0
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <scalbn+0x108>)
 8009f4c:	e7a8      	b.n	8009ea0 <scalbn+0x30>
 8009f4e:	bf00      	nop
 8009f50:	c2f8f359 	.word	0xc2f8f359
 8009f54:	01a56e1f 	.word	0x01a56e1f
 8009f58:	8800759c 	.word	0x8800759c
 8009f5c:	7e37e43c 	.word	0x7e37e43c
 8009f60:	43500000 	.word	0x43500000
 8009f64:	ffff3cb0 	.word	0xffff3cb0
 8009f68:	8800759c 	.word	0x8800759c
 8009f6c:	7e37e43c 	.word	0x7e37e43c
 8009f70:	01a56e1f 	.word	0x01a56e1f
 8009f74:	c2f8f359 	.word	0xc2f8f359
 8009f78:	3c900000 	.word	0x3c900000

08009f7c <_init>:
 8009f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7e:	bf00      	nop
 8009f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f82:	bc08      	pop	{r3}
 8009f84:	469e      	mov	lr, r3
 8009f86:	4770      	bx	lr

08009f88 <_fini>:
 8009f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8a:	bf00      	nop
 8009f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8e:	bc08      	pop	{r3}
 8009f90:	469e      	mov	lr, r3
 8009f92:	4770      	bx	lr
